{
  "crypto.search": {
    "title": "search",
    "description": "The documentation page provides information on how to perform a cryptocurrency\n  search, including the search query and provider parameters, as well as the resulting\n  crypto search data such as symbol, name, currency, and exchange information.",
    "keywords": [
      "cryptocurrency search",
      "available cryptocurrency pairs",
      "python obb crypto search",
      "search query parameter",
      "provider parameter",
      "crypto search results",
      "crypto search provider",
      "crypto search warnings",
      "crypto search chart",
      "crypto search metadata",
      "crypto data",
      "symbol",
      "crypto name",
      "crypto currency",
      "crypto exchange",
      "crypto exchange name"
    ]
  },
  "crypto.price.historical": {
    "title": "historical",
    "description": "Learn how to use the `obb.equity.price.historical` function to load historical\n  price data for a specific stock ticker. Find out about the available parameters\n  and providers, as well as the structure of the returned data and the columns it\n  contains.",
    "keywords": [
      "equity historical price",
      "load stock data",
      "specific ticker",
      "python function",
      "equity data parameters",
      "alpha vantage provider",
      "fmp provider",
      "intrinio provider",
      "polygon provider",
      "yfinance provider",
      "equity historical data returns",
      "equity data columns",
      "alpha vantage data columns",
      "cboe data columns",
      "fmp data columns",
      "intrinio data columns",
      "polygon data columns",
      "yfinance data columns"
    ]
  },
  "currency.reference_rates": {
    "title": "reference_rates",
    "description": "Current, official, currency reference rates",
    "keywords": [
      "currency",
      "reference_rates"
    ]
  },
  "currency.search": {
    "title": "search",
    "description": "Learn how to search for available currency pairs using the `obb.currency.search`\n  function, and retrieve a list of results, including provider name, warnings, chart,\n  and metadata. Explore the various parameters such as provider, symbol, date, search\n  terms, active tickers, order data, sort field, and limit. Dive into the details\n  of the returned data, including name, symbol, currency, stock exchange, exchange\n  short name, code, base currency, quote currency, market, locale, currency symbol,\n  currency name, base currency symbol, base currency name, last updated timestamp\n  in UTC, and delisted timestamp in UTC.",
    "keywords": [
      "currency search",
      "available currency pairs",
      "obb.currency.search",
      "provider",
      "symbol",
      "date",
      "search terms",
      "active tickers",
      "order data",
      "sort field",
      "limit",
      "results",
      "warnings",
      "chart",
      "metadata",
      "name",
      "symbol",
      "currency",
      "stock exchange",
      "exchange short name",
      "code",
      "base currency",
      "quote currency",
      "market",
      "locale",
      "currency symbol",
      "currency name",
      "base currency symbol",
      "base currency name",
      "last updated utc",
      "delisted utc"
    ]
  },
  "currency.price.historical": {
    "title": "historical",
    "description": "Learn how to use the `obb.equity.price.historical` function to load historical\n  price data for a specific stock ticker. Find out about the available parameters\n  and providers, as well as the structure of the returned data and the columns it\n  contains.",
    "keywords": [
      "equity historical price",
      "load stock data",
      "specific ticker",
      "python function",
      "equity data parameters",
      "alpha vantage provider",
      "fmp provider",
      "intrinio provider",
      "polygon provider",
      "yfinance provider",
      "equity historical data returns",
      "equity data columns",
      "alpha vantage data columns",
      "cboe data columns",
      "fmp data columns",
      "intrinio data columns",
      "polygon data columns",
      "yfinance data columns"
    ]
  },
  "derivatives.futures.curve": {
    "title": "curve",
    "description": "Learn about fetching historical futures price data using Python and an\n  API. Understand the available parameters, such as symbol, date, and provider. Explore\n  the returned results, including FuturesCurve, warnings, chart, and metadata. Analyze\n  the data, including expiration, close price, and trading symbol.",
    "keywords": [
      "futures historical price",
      "futures historical data",
      "Python",
      "API",
      "symbol",
      "date",
      "provider",
      "cboe",
      "yfinance",
      "results",
      "FuturesCurve",
      "warnings",
      "Chart",
      "Metadata",
      "expiration",
      "close price",
      "trading symbol"
    ]
  },
  "derivatives.futures.historical": {
    "title": "historical",
    "description": "Futures Historical Price",
    "keywords": [
      "derivatives",
      "futures",
      "historical"
    ]
  },
  "derivatives.options.chains": {
    "title": "chains",
    "description": "Learn how to get the complete options chain for a ticker using the OBB.equity.options.chains\n  function. Explore the available parameters like symbol and provider, and understand\n  the data returned, including contract symbol, expiration, strike price, and more.",
    "keywords": [
      "options chain",
      "ticker",
      "complete options chain",
      "symbol",
      "provider",
      "data",
      "contract symbol",
      "expiration",
      "strike price",
      "option type",
      "eod date",
      "trading volume",
      "open price",
      "open interest",
      "high price",
      "low price",
      "implied volatility",
      "delta",
      "gamma",
      "theta",
      "vega",
      "bid size",
      "ask size",
      "theoretical value",
      "last trade price",
      "prev close",
      "change percent",
      "rho",
      "last trade timestamp",
      "dte"
    ]
  },
  "derivatives.options.unusual": {
    "title": "unusual",
    "description": "Learn how to get the complete options chain for a ticker with the equity\n  options unusual API. Explore the available parameters such as symbol and provider.\n  Retrieve valuable data like the underlying symbol, contract symbol, trade type,\n  sentiment, total value, total size, average price, ask/bid prices at execution,\n  underlying price at execution, and timestamp.",
    "keywords": [
      "complete options chain",
      "ticker options",
      "equity options unusual",
      "symbol",
      "provider",
      "intrinio",
      "source",
      "data",
      "underlying symbol",
      "contract symbol",
      "trade type",
      "sentiment",
      "total value",
      "total size",
      "average price",
      "ask at execution",
      "bid at execution",
      "underlying price at execution",
      "timestamp"
    ]
  },
  "econometrics.autocorrelation": {
    "title": "autocorrelation",
    "description": "Learn how to perform the Durbin-Watson test for autocorrelation in Python.\n  Understand the parameters and return value of the function, and how to use exogenous\n  variables in the analysis. This documentation provides a detailed explanation.",
    "keywords": [
      "Durbin-Watson test",
      "autocorrelation",
      "Python",
      "data analysis",
      "exogenous variables",
      "parameter",
      "return",
      "documentation"
    ]
  },
  "econometrics.causality": {
    "title": "causality",
    "description": "Learn how to perform a Granger causality test to determine if X causes\n  y. Understand the parameters and the results returned by the test.",
    "keywords": [
      "Granger causality test",
      "causality",
      "perform",
      "determine",
      "exogenous variables",
      "lags",
      "data",
      "target column",
      "results"
    ]
  },
  "econometrics.cointegration": {
    "title": "cointegration",
    "description": "Learn how to use the two-step Engle-Granger test to show co-integration\n  between two time series in Python. Explore the parameters, input dataset, data columns,\n  and the OBBject returned with the test results.",
    "keywords": [
      "co-integration",
      "Engle-Granger test",
      "time series",
      "data",
      "columns",
      "cointegration",
      "maxlag",
      "Python"
    ]
  },
  "econometrics.correlation_matrix": {
    "title": "correlation_matrix",
    "description": "Learn how to get the correlation matrix of an input dataset using Python.\n  Find information on the parameters and return value of the function.",
    "keywords": [
      "correlation matrix",
      "input dataset",
      "Python"
    ]
  },
  "econometrics.ols_regression": {
    "title": "ols_regression",
    "description": "Learn how to perform OLS regression using statsmodels in Python. This\n  documentation explains the parameters required and the object returned.",
    "keywords": [
      "OLS regression",
      "statsmodels",
      "perform OLS regression",
      "data",
      "target column",
      "exogenous variables",
      "model",
      "results objects"
    ]
  },
  "econometrics.ols_regression_summary": {
    "title": "ols_regression_summary",
    "description": "Learn how to perform OLS regression using statsmodels in Python. Explore\n  the parameters and returns of the function, including the data, target column, exogenous\n  variables, and summary object.",
    "keywords": [
      "OLS regression",
      "statsmodels",
      "summary object",
      "parameters",
      "data",
      "y_column",
      "x_columns",
      "exogenous variables",
      "returns",
      "OBBject",
      "model"
    ]
  },
  "econometrics.panel_between": {
    "title": "panel_between",
    "description": "Perform a Between estimator regression on panel data. This page provides\n  details on the parameters required and the returned OBBject with the fit model.",
    "keywords": [
      "Between estimator",
      "regression",
      "panel data",
      "perform",
      "parameters",
      "data",
      "y_column",
      "x_columns",
      "exogenous variables",
      "returns",
      "fit model"
    ]
  },
  "econometrics.panel_first_difference": {
    "title": "panel_first_difference",
    "description": "Learn how to perform a first-difference estimate for panel data using\n  this Python function. Understand the parameters and the object returned by the function.",
    "keywords": [
      "panel data",
      "first-difference estimate",
      "perform",
      "parameters",
      "data",
      "dataset",
      "target column",
      "exogenous variables",
      "fit model"
    ]
  },
  "econometrics.panel_fixed": {
    "title": "panel_fixed",
    "description": "Learn about the one- and two-way fixed effects estimator for panel data\n  analysis. Explore the parameters and returns of this function for panel data regression\n  and modeling.",
    "keywords": [
      "panel data",
      "fixed effects estimator",
      "panel data analysis",
      "two-way fixed effects",
      "panel data regression",
      "panel data modeling"
    ]
  },
  "econometrics.panel_fmac": {
    "title": "panel_fmac",
    "description": "Learn how to use the Fama-MacBeth estimator for panel data analysis in\n  Python. Understand the parameters required and how to specify the input dataset\n  and target column. Explore how this function can help you analyze panel data by\n  incorporating exogenous variables.",
    "keywords": [
      "Fama-MacBeth estimator",
      "panel data analysis",
      "Python function",
      "parameters",
      "exogenous variables"
    ]
  },
  "econometrics.panel_pooled": {
    "title": "panel_pooled",
    "description": "Learn how to perform a pooled coefficient estimator regression on panel\n  data in Python. Understand the parameters and return value of the function.",
    "keywords": [
      "pooled coefficient estimator regression",
      "panel data",
      "Python",
      "data analysis",
      "exogenous variables"
    ]
  },
  "econometrics.panel_random_effects": {
    "title": "panel_random_effects",
    "description": "Learn how to perform One-way Random Effects model for panel data using\n  a Python function. This function takes an input dataset, target column, and exogenous\n  variables as parameters and returns the fit model.",
    "keywords": [
      "One-way Random Effects model",
      "panel data",
      "perform",
      "Python function"
    ]
  },
  "econometrics.residual_autocorrelation": {
    "title": "residual_autocorrelation",
    "description": "Perform Breusch-Godfrey Lagrange Multiplier tests for residual autocorrelation\n  in a Python function. Learn about the parameters used and the returned object.",
    "keywords": [
      "Breusch-Godfrey Lagrange Multiplier tests",
      "residual autocorrelation",
      "Python function",
      "parameter description",
      "function returns"
    ]
  },
  "econometrics.unit_root": {
    "title": "unit_root",
    "description": "Learn how to use the Augmented Dickey-Fuller unit root test to check\n  for stationarity in time series data. This function takes in an input dataset and\n  performs the test on specified data columns. The regression type can be customized,\n  and the function returns the results.",
    "keywords": [
      "Augmented Dickey-Fuller",
      "unit root test",
      "data",
      "data columns",
      "unit root",
      "regression",
      "constant",
      "trend",
      "trend-squared",
      "results"
    ]
  },
  "economy.balance_of_payments": {
    "title": "balance_of_payments",
    "description": "Balance of Payments Reports",
    "keywords": [
      "economy",
      "balance_of_payments"
    ]
  },
  "economy.calendar": {
    "title": "calendar",
    "description": "The Economic Calendar provides information on economic events and data.\n  Use the OBB Python function `obb.economy.calendar()` to retrieve economic calendar\n  data. The function accepts parameters such as start date, end date, provider, country,\n  importance, and group. It returns a list of economic calendar data, including the\n  date, event, reference, source, actual value, previous value, consensus value, and\n  forecast value. The data can be filtered by provider such as FMP, Nasdaq, or Trading\n  Economics.",
    "keywords": [
      "economic calendar",
      "python obb.economy.calendar",
      "parameters",
      "start date",
      "end date",
      "provider",
      "country",
      "importance",
      "group",
      "returns",
      "data",
      "date",
      "event",
      "reference",
      "source",
      "source url",
      "actual",
      "previous",
      "consensus",
      "forecast",
      "url",
      "currency",
      "unit",
      "change",
      "change percent",
      "updated at",
      "created at",
      "description"
    ]
  },
  "economy.cpi": {
    "title": "cpi",
    "description": "Get Consumer Price Index (CPI) data for various countries and calculate\n  inflation measurements. This economic indicator provides insights into the growth\n  rate of prices on a monthly, quarterly, and annual basis. Harmonized CPI data is\n  also available. Specify the start and end dates for the desired data range. The\n  data provider and metadata information are included in the results.",
    "keywords": [
      "Consumer Price Index (CPI) Data",
      "CPI data",
      "CPI calculation",
      "inflation measurement",
      "economic indicator",
      "country-wise CPI data",
      "growth rate",
      "monthly CPI",
      "quarterly CPI",
      "annual CPI",
      "harmonized CPI",
      "start date",
      "end date",
      "data provider",
      "metadata info"
    ]
  },
  "economy.risk_premium": {
    "title": "risk_premium",
    "description": "Learn about Historical Market Risk Premium and the obb.economy.risk_premium\n  function. Explore the parameters, returns, and data available, including results,\n  warnings, chart, metadata, country, continent, total equity risk premium, and country\n  risk premium.",
    "keywords": [
      "Historical Market Risk Premium",
      "obb.economy.risk_premium",
      "parameters",
      "provider",
      "returns",
      "OBBject",
      "results",
      "RiskPremium",
      "warnings",
      "chart",
      "metadata",
      "data",
      "country",
      "continent",
      "total equity risk premium",
      "country risk premium"
    ]
  },
  "economy.gdp.forecast": {
    "title": "forecast",
    "description": "Forecasted GDP Data",
    "keywords": [
      "economy",
      "gdp",
      "forecast"
    ]
  },
  "economy.gdp.nominal": {
    "title": "nominal",
    "description": "Nominal GDP Data",
    "keywords": [
      "economy",
      "gdp",
      "nominal"
    ]
  },
  "economy.gdp.real": {
    "title": "real",
    "description": "Learn about Real GDP Data and how to access it using the provided parameters.\n  Find detailed descriptions of the available parameters and the data returned. Understand\n  the structure of the returns and explore the data attributes.",
    "keywords": [
      "Real GDP Data",
      "parameters",
      "units",
      "start date",
      "end date",
      "provider",
      "country",
      "returns",
      "results",
      "GdpReal",
      "warnings",
      "chart",
      "metadata",
      "data",
      "date",
      "value",
      "documentation"
    ]
  },
  "equity.market_snapshots": {
    "title": "market_snapshots",
    "description": "Get a current, complete market snapshot with the obb.equity.market_snapshots\n  Python method. Retrieve equity data such as stock information, financial data, market\n  analysis, and trading volume. Explore details like stock performance, price change,\n  moving averages, 52-week high and low, market cap, earnings per share, price to\n  earnings ratio, and stock exchange.",
    "keywords": [
      "market snapshot",
      "equity data",
      "market data",
      "stock information",
      "financial data",
      "market analysis",
      "trading volume",
      "stock performance",
      "price change",
      "moving averages",
      "52-week high",
      "52-week low",
      "market cap",
      "earnings per share",
      "price to earnings ratio",
      "stock exchange"
    ]
  },
  "equity.profile": {
    "title": "profile",
    "description": "Get general price and performance metrics of a stock with the Equity\n  Information API. Retrieve data such as the symbol, name, price, open price, high\n  price, low price, close price, change in price, change percent, previous close,\n  type, exchange ID, bid, ask, volume, implied volatility, realized volatility, last\n  trade timestamp, annual high, and annual low.",
    "keywords": [
      "equity info",
      "price and performance metrics",
      "stock data",
      "equity profile",
      "symbol",
      "provider",
      "data",
      "parameters",
      "returns",
      "cboe",
      "EquityInfo",
      "warnings",
      "chart",
      "metadata",
      "Data",
      "name",
      "price",
      "open price",
      "high price",
      "low price",
      "close price",
      "change percent",
      "previous close",
      "type",
      "exchange ID",
      "bid",
      "ask",
      "volume",
      "implied volatility",
      "realized volatility",
      "last trade timestamp",
      "annual high",
      "annual low",
      "iv30",
      "hv30",
      "iv60",
      "hv60",
      "iv90",
      "hv90"
    ]
  },
  "equity.screener": {
    "title": "screener",
    "description": "Equity Screen",
    "keywords": [
      "equity",
      "screener"
    ]
  },
  "equity.search": {
    "title": "search",
    "description": "Learn how to perform an equity search to find a company or stock ticker.\n  Understand the query parameters, such as search by ticker symbol and search provider.\n  Explore the various filters available, including market cap, price, beta, volume,\n  dividend, ETF, sector, industry, country, and exchange. Limit and structure the\n  results accordingly. Get access to the returned data, provider information, warnings,\n  chart, and metadata.",
    "keywords": [
      "equity search",
      "company search",
      "stock ticker search",
      "query parameter",
      "search by ticker symbol",
      "search provider",
      "market cap filter",
      "price filter",
      "beta filter",
      "volume filter",
      "dividend filter",
      "ETF filter",
      "sector filter",
      "industry filter",
      "country filter",
      "exchange filter",
      "limit results",
      "data structure",
      "results",
      "provider",
      "warnings",
      "chart",
      "metadata",
      "symbol",
      "name",
      "dpm_name",
      "post_station",
      "market cap",
      "sector",
      "industry",
      "beta",
      "price",
      "last annual dividend",
      "volume",
      "exchange",
      "exchange_name",
      "country",
      "is_etf",
      "actively trading",
      "cik"
    ]
  },
  "equity.calendar.dividend": {
    "title": "dividend",
    "description": "Get upcoming and historical dividend data with the OBB.equity.calendar.dividend\n  method. This method allows you to retrieve dividend information such as dates, amounts,\n  and provider details. It also provides warnings, charts, and metadata for further\n  analysis.",
    "keywords": [
      "dividend calendar",
      "upcoming dividends",
      "historical dividends",
      "dividend data",
      "dividend schedule",
      "dividend information",
      "dividend dates",
      "dividend amounts",
      "dividend provider",
      "dividend warnings",
      "dividend chart",
      "dividend metadata",
      "ex-dividend date",
      "record date",
      "payment date",
      "declaration date",
      "dividend symbol",
      "dividend name",
      "dividend adjusted amount",
      "dividend label",
      "annualized dividend amount"
    ]
  },
  "equity.calendar.earnings": {
    "title": "earnings",
    "description": "Learn how to retrieve upcoming and historical earnings calendar data\n  using the OBB.equity.calendar.earnings Python function. The function allows you\n  to specify symbols, limit the number of data entries, and choose a data provider.\n  The returned data includes EPS, revenue, and other important details for the specified\n  symbols and dates.",
    "keywords": [
      "earnings calendar",
      "upcoming earnings",
      "historical earnings",
      "Python function",
      "earnings data retrieval",
      "symbol",
      "limit",
      "provider",
      "data entries",
      "chart",
      "metadata",
      "data",
      "EPS",
      "revenue",
      "estimated EPS",
      "estimated revenue",
      "date",
      "time",
      "updated from date",
      "fiscal date ending"
    ]
  },
  "equity.calendar.ipo": {
    "title": "ipo",
    "description": "Access the Upcoming and Historical IPO Calendars and retrieve IPO information\n  using Python.",
    "keywords": [
      "Upcoming IPO Calendar",
      "Historical IPO Calendar",
      "Python function",
      "equity.calendar.ipo",
      "symbol",
      "start_date",
      "end_date",
      "limit",
      "provider",
      "intrinio",
      "nasdaq",
      "status",
      "min_value",
      "max_value",
      "OBBject",
      "results",
      "CalendarIpo",
      "warnings",
      "Chart",
      "Metadata",
      "data",
      "ipo_date",
      "status",
      "exchange",
      "offer_amount",
      "share_price",
      "share_price_lowest",
      "share_price_highest",
      "share_count",
      "share_count_lowest",
      "share_count_highest",
      "announcement_url",
      "sec_report_url",
      "open_price",
      "close_price",
      "volume",
      "day_change",
      "week_change",
      "month_change",
      "id",
      "company",
      "security",
      "name",
      "expected_price_date",
      "filed_date",
      "withdraw_date",
      "deal_status"
    ]
  },
  "equity.calendar.split": {
    "title": "split",
    "description": "Learn how to use the `obb.equity.calendar.split` function to show stock\n  split calendar data, including start and end dates, provider, results, warnings,\n  chart, metadata, and information about the stock splits.",
    "keywords": [
      "Calendar splits",
      "stock split calendar",
      "equity calendar split",
      "start date",
      "end date",
      "provider",
      "data",
      "results",
      "warnings",
      "chart",
      "metadata",
      "date",
      "label",
      "symbol",
      "numerator",
      "denominator"
    ]
  },
  "equity.compare.peers": {
    "title": "peers",
    "description": "Learn how to compare and analyze equity peers with the `obb.equity.compare.peers`\n  function. This function allows you to retrieve a list of company peers based on\n  symbol, sector, exchange, and market cap. Understand the parameters, returns, and\n  data structure provided by this function.",
    "keywords": [
      "equity peers",
      "company peers",
      "compare peers",
      "symbol",
      "provider",
      "parameter",
      "returns",
      "data",
      "list of peers",
      "sector",
      "exchange",
      "market cap",
      "serializable results",
      "chart object",
      "metadata",
      "command execution",
      "warnings"
    ]
  },
  "equity.darkpool.otc": {
    "title": "otc",
    "description": "Get weekly aggregate trade data for Over The Counter deals, including\n  ATS trading data and non-ATS trading data. The data is provided for each ATS/firm\n  with trade reporting obligations under FINRA rules.",
    "keywords": [
      "Over The Counter deals",
      "ATS trading data",
      "FINRA rules",
      "symbol",
      "provider",
      "tier",
      "is_ats",
      "OBBject",
      "results",
      "OTCAggregate",
      "warnings",
      "Chart",
      "Metadata",
      "data",
      "update_date",
      "share_quantity",
      "trade_quantity"
    ]
  },
  "equity.discovery.active": {
    "title": "active",
    "description": "Learn how to get the most active ETFs using the ETF discovery API. This\n  page provides documentation for the parameters, returns, and data associated with\n  the API endpoint. Understand how to use the sorting, limiting, and provider parameters\n  and explore the returned results, chart object, and metadata. Find details about\n  the data fields including symbol, name, last price, percent change, net change,\n  volume, date, country, mantissa, type, and formatted values. Retrieve the source\n  url for additional information.",
    "keywords": [
      "ETFs",
      "most active ETFs",
      "ETF discovery",
      "sort order",
      "limit parameter",
      "provider parameter",
      "results",
      "chart object",
      "metadata",
      "symbol",
      "name",
      "last price",
      "percent change",
      "net change",
      "volume",
      "date",
      "country",
      "mantissa",
      "type",
      "formatted price",
      "formatted volume",
      "formatted price change",
      "formatted percent change",
      "url"
    ]
  },
  "equity.discovery.aggressive_small_caps": {
    "title": "aggressive_small_caps",
    "description": "Learn how to get aggressive small cap equities with the equity discovery\n  API. Understand the parameters, returns, and data format.",
    "keywords": [
      "equities",
      "aggressive small caps",
      "equity discovery",
      "parameter",
      "sort order",
      "provider",
      "returns",
      "data",
      "symbol",
      "name",
      "price",
      "change",
      "percent change",
      "volume",
      "market cap",
      "average volume",
      "PE ratio",
      "documentation"
    ]
  },
  "equity.discovery.filings": {
    "title": "filings",
    "description": "Get the most-recent filings submitted to the SEC",
    "keywords": [
      "equity",
      "discovery",
      "filings"
    ]
  },
  "equity.discovery.gainers": {
    "title": "gainers",
    "description": "Learn how to get the top ETF gainers using Python code. This documentation\n  includes details about the parameters, return values, and data format.",
    "keywords": [
      "ETF gainers",
      "ETFGainers",
      "Python code",
      "parameters",
      "sort order",
      "limit",
      "provider",
      "returns",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "symbol",
      "name",
      "last price",
      "percent change",
      "net change",
      "trading volume",
      "date",
      "bluegrass channel",
      "country",
      "mantissa",
      "type",
      "formatted price",
      "formatted volume",
      "formatted price change",
      "formatted percent change",
      "url"
    ]
  },
  "equity.discovery.growth_tech": {
    "title": "growth_tech",
    "description": "Learn how to get growth tech equities, sort them, and retrieve detailed\n  data such as symbol, name, price, volume, and more using the OBB.equity.discovery.growth_tech\n  method in the provided code snippet. This documentation page also covers the parameters,\n  returns, and available data structures.",
    "keywords": [
      "growth tech equities",
      "tech equities",
      "equity discovery",
      "sorting",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "symbol",
      "name",
      "price",
      "change",
      "percent change",
      "volume",
      "market cap",
      "average volume",
      "P/E ratio"
    ]
  },
  "equity.discovery.losers": {
    "title": "losers",
    "description": "Learn how to get the top ETF losers using the OBB ETF Discovery API endpoint.\n  Explore the available parameters and the returned data, including symbols, names,\n  prices, percentage changes, and trading volumes.",
    "keywords": [
      "ETF losers",
      "top ETF losers",
      "ETFLosers",
      "sort order",
      "data entries",
      "provider",
      "warnings",
      "chart",
      "metadata",
      "symbol",
      "name",
      "last price",
      "percent change",
      "net change",
      "trading volume",
      "date",
      "bluegrass channel",
      "country",
      "mantissa",
      "type",
      "formatted price",
      "formatted volume",
      "formatted price change",
      "formatted percent change",
      "source url"
    ]
  },
  "equity.discovery.top_retail": {
    "title": "top_retail",
    "description": "Learn about the OBB.equity.discovery.top_retail function in Python, which\n  tracks retail activity and sentiment for over 9,500 US traded stocks, ADRs, and\n  ETPs. Find out how to use the function's parameters and understand the data it returns.",
    "keywords": [
      "retail activity",
      "sentiment",
      "top retail",
      "equity discovery",
      "US traded stocks"
    ]
  },
  "equity.discovery.undervalued_growth": {
    "title": "undervalued_growth",
    "description": "Learn how to get undervalued growth equities using the equity discovery\n  feature, and understand the various parameters, returns, and data available in the\n  results.",
    "keywords": [
      "undervalued growth equities",
      "equity discovery",
      "sort order",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "symbol",
      "name",
      "price",
      "change",
      "percent change",
      "volume",
      "market cap",
      "average volume",
      "PE ratio",
      "TTM",
      "trading volume"
    ]
  },
  "equity.discovery.undervalued_large_caps": {
    "title": "undervalued_large_caps",
    "description": "Learn how to get undervalued large cap equities and explore equity discovery\n  using the OBB equity API. Understand the parameters available, such as sorting undervalued\n  large caps and selecting the yfinance provider. Retrieve useful equity data, including\n  the symbol, name, price, change, percent change, volume, market cap, average volume,\n  and PE ratio.",
    "keywords": [
      "undervalued large cap equities",
      "equity discovery",
      "sorting undervalued large caps",
      "yfinance provider",
      "equity data",
      "symbol",
      "name",
      "price",
      "change",
      "percent change",
      "volume",
      "market cap",
      "average volume",
      "PE ratio"
    ]
  },
  "equity.discovery.upcoming_release_days": {
    "title": "upcoming_release_days",
    "description": "Learn how to get upcoming release days for equity discovery using the\n  OBB object and the seeking alpha provider. Understand the parameters and data returned\n  by the API.",
    "keywords": [
      "upcoming release days",
      "equity discovery",
      "provider",
      "seeking alpha",
      "parameters",
      "returns",
      "data"
    ]
  },
  "equity.estimates.consensus": {
    "title": "consensus",
    "description": "Learn how to access and use the Price Target Consensus functionality\n  in your application. Explore the available parameters and understand the returned\n  data structure.",
    "keywords": [
      "Price target consensus data",
      "equity estimates consensus",
      "symbol parameter",
      "provider parameter",
      "results attribute",
      "provider attribute",
      "warnings attribute",
      "chart attribute",
      "metadata attribute",
      "data table",
      "target_high column",
      "target_low column",
      "target_consensus column",
      "target_median column"
    ]
  },
  "equity.estimates.historical": {
    "title": "historical",
    "description": "Learn about historical analyst estimates and analyst stock recommendations\n  with the OBBPy library in Python. Explore the usage of the `obb.equity.estimates.historical`\n  function and its parameters, including `symbol`, `period`, `limit`, and `provider`.\n  Understand the structure of the returned object, `OBBject`, with `results`, `provider`,\n  `warnings`, `chart`, and `metadata` properties. Dive into the available data such\n  as `symbol`, `date`, `estimated revenue`, `ebitda`, `ebit`, `net income`, `SGA expense`,\n  `EPS`, and the number of analysts who estimated revenue and EPS.",
    "keywords": [
      "historical analyst estimates",
      "analyst stock recommendations",
      "python obb.equity.estimates.historical",
      "parameters",
      "standard",
      "symbol",
      "union[str, list[str]]",
      "period",
      "literal['quarter', 'annual']",
      "limit",
      "int",
      "provider",
      "literal['fmp']",
      "returns",
      "obbject",
      "list[analystestimates]",
      "serializable results",
      "optional[literal['fmp']]",
      "optional[list[warning_]]",
      "optional[chart]",
      "optional[metadata]",
      "data",
      "symbol",
      "str",
      "date",
      "estimated revenue low",
      "estimated revenue high",
      "estimated revenue average",
      "estimated ebitda low",
      "estimated ebitda high",
      "estimated ebitda average",
      "estimated ebit low",
      "estimated ebit high",
      "estimated ebit average",
      "estimated net income low",
      "estimated net income high",
      "estimated net income average",
      "estimated sga expense low",
      "estimated sga expense high",
      "estimated sga expense average",
      "estimated eps average",
      "estimated eps high",
      "estimated eps low",
      "number of analysts who estimated revenue",
      "number of analysts who estimated eps"
    ]
  },
  "equity.estimates.price_target": {
    "title": "price_target",
    "description": "Get price target data for an equity symbol. Retrieve information such\n  as publication date, analyst details, price target, and more. Supports multiple\n  symbols and customizable providers.",
    "keywords": [
      "price target data",
      "equity estimates",
      "symbol",
      "provider",
      "grade",
      "published date",
      "news URL",
      "news title",
      "analyst name",
      "analyst company",
      "price target",
      "adjusted price target",
      "price when posted",
      "news publisher",
      "news base URL"
    ]
  },
  "equity.fundamental.balance": {
    "title": "balance",
    "description": "Learn how to use the balance sheet function in Python to retrieve financial\n  statement data. This documentation provides details about the function parameters,\n  return values, and available data types.",
    "keywords": [
      "balance sheet statement",
      "balance sheet function",
      "python function",
      "financial statement function",
      "balance sheet data parameters",
      "balance sheet data returns",
      "balance sheet data types"
    ]
  },
  "equity.fundamental.balance_growth": {
    "title": "balance_growth",
    "description": "Learn about balance sheet statement growth, equity data for a company,\n  parameters like symbol, limit, and provider, and explore the returned results, warnings,\n  charts, and metadata. Retrieve detailed data on various balance sheet growth metrics\n  like cash and cash equivalents, short-term investments, inventory, total assets,\n  total liabilities, and more.",
    "keywords": [
      "balance sheet statement growth",
      "company balance sheet growth",
      "equity data",
      "symbol",
      "limit parameter",
      "provider parameter",
      "results",
      "balance sheet growth",
      "warnings",
      "chart",
      "metadata",
      "data",
      "cash and cash equivalents",
      "short-term investments",
      "net receivables",
      "inventory",
      "current assets",
      "property, plant, and equipment",
      "goodwill",
      "intangible assets",
      "long-term investments",
      "tax assets",
      "other non-current assets",
      "total non-current assets",
      "other assets",
      "total assets",
      "accounts payable",
      "short-term debt",
      "total current liabilities",
      "long-term debt",
      "non-current deferred revenue",
      "non-current deferred tax liabilities",
      "total non-current liabilities",
      "common stock",
      "retained earnings",
      "accumulated other comprehensive income/loss",
      "total stockholders' equity",
      "total liabilities and stockholders' equity",
      "total investments",
      "total debt",
      "net debt"
    ]
  },
  "equity.fundamental.cash": {
    "title": "cash",
    "description": "Learn how to use the Cash Flow Statement API endpoint to retrieve information\n  about cash flow statements. Understand the parameters and return values of the API,\n  and explore the available data fields for cash flow statements.",
    "keywords": [
      "Cash Flow Statement",
      "cash flow statement parameters",
      "cash flow statement returns",
      "cash flow statement data",
      "python obb.equity.fundamental.cash",
      "symbol",
      "period",
      "limit",
      "provider",
      "cik",
      "filing date",
      "period of report date",
      "include sources",
      "order",
      "sort",
      "net income",
      "depreciation and amortization",
      "stock based compensation",
      "deferred income tax",
      "other non-cash items",
      "changes in operating assets and liabilities",
      "accounts receivables",
      "inventory",
      "vendor non-trade receivables",
      "other current and non-current assets",
      "accounts payables",
      "deferred revenue",
      "other current and non-current liabilities",
      "net cash flow from operating activities",
      "purchases of marketable securities",
      "sales from maturities of investments",
      "investments in property plant and equipment",
      "payments from acquisitions",
      "other investing activities",
      "net cash flow from investing activities",
      "taxes paid on net share settlement",
      "dividends paid",
      "common stock repurchased",
      "debt proceeds",
      "debt repayment",
      "other financing activities",
      "net cash flow from financing activities",
      "net change in cash"
    ]
  },
  "equity.fundamental.cash_growth": {
    "title": "cash_growth",
    "description": "Learn about Cash Flow Statement Growth and how to retrieve cash growth\n  data using the Python function obb.equity.fundamental.cash_growth(). This page provides\n  details on the function's parameters and the data it returns, including information\n  on net income, depreciation and amortization, working capital, investments, financing\n  activities, and more.",
    "keywords": [
      "Cash Flow Statement Growth",
      "company cash flow",
      "cash growth",
      "Python",
      "function",
      "parameters",
      "symbol",
      "limit",
      "provider",
      "data",
      "returns",
      "net income",
      "depreciation and amortization",
      "deferred income tax",
      "stock-based compensation",
      "working capital",
      "accounts receivables",
      "inventory",
      "accounts payables",
      "other non-cash items",
      "net cash provided by operating activities",
      "investments in property, plant, and equipment",
      "net acquisitions",
      "purchases of investments",
      "sales maturities of investments",
      "net cash used for investing activities",
      "debt repayment",
      "common stock issued",
      "common stock repurchased",
      "dividends paid",
      "net cash used/provided by financing activities",
      "foreign exchange changes on cash",
      "net change in cash",
      "cash at end of period",
      "cash at beginning of period",
      "operating cash flow",
      "capital expenditure",
      "free cash flow"
    ]
  },
  "equity.fundamental.dividends": {
    "title": "dividends",
    "description": "Get historical dividends data for a given company with the OBB.equity.fundamental.dividends\n  function. Explore parameters like symbol and provider, and understand the returned\n  results, warnings, and metadata. View the data fields, including date, label, adj_dividend,\n  dividend, record_date, payment_date, and declaration_date.",
    "keywords": [
      "historical dividends",
      "dividends data",
      "company dividends",
      "symbol",
      "data provider",
      "default provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "date",
      "label",
      "adj_dividend",
      "dividend",
      "record_date",
      "payment_date",
      "declaration_date"
    ]
  },
  "equity.fundamental.employee_count": {
    "title": "employee_count",
    "description": "Learn how to retrieve historical employee count data using the Python\n  API. Understand the parameters, returns, and data structure for the OBB.equity.fundamental.employee_count\n  method.",
    "keywords": [
      "historical employees",
      "employee count",
      "Python API",
      "data retrieval",
      "symbol",
      "provider",
      "warnings",
      "chart object",
      "metadata",
      "data",
      "CIK",
      "acceptance time",
      "period of report",
      "company name",
      "form type",
      "filing date",
      "source URL"
    ]
  },
  "equity.fundamental.filings": {
    "title": "filings",
    "description": "Learn how to retrieve company filings data such as date, type of document,\n  and link. Understand the available parameters to filter the data, including symbol,\n  limit, provider, type, and page. Explore the different fields in the data, such\n  as ticker symbol, accepted date, and final link.",
    "keywords": [
      "company filings",
      "data entries",
      "symbol",
      "limit",
      "provider",
      "type",
      "page",
      "cik",
      "date",
      "link",
      "ticker symbol",
      "accepted date",
      "final link",
      "report date",
      "act",
      "items",
      "primary doc description",
      "primary doc",
      "accession number",
      "file number",
      "film number",
      "is inline xbrl",
      "is xbrl",
      "size",
      "complete submission url",
      "filing detail url",
      "xml"
    ]
  },
  "equity.fundamental.financial_attributes": {
    "title": "financial_attributes",
    "description": "Fetch the value of financial attributes for a selected company and fiscal period",
    "keywords": [
      "equity",
      "fundamental",
      "financial_attributes"
    ]
  },
  "equity.fundamental.historical_eps": {
    "title": "historical_eps",
    "description": "Historical earnings-per-share for a given company",
    "keywords": [
      "equity",
      "fundamental",
      "historical_eps"
    ]
  },
  "equity.fundamental.historical_splits": {
    "title": "historical_splits",
    "description": "Learn how to retrieve historical stock splits data using the Python obb.equity.fundamental.historical_splits\n  function. Understand the parameters, returns, and data structure for this API call.",
    "keywords": [
      "historical stock splits",
      "stock splits data",
      "python obb.equity.fundamental.historical_splits",
      "parameters",
      "symbol",
      "provider",
      "returns",
      "results",
      "provider name",
      "warnings",
      "chart object",
      "metadata",
      "data",
      "date",
      "label",
      "numerator",
      "denominator"
    ]
  },
  "equity.fundamental.income": {
    "title": "income",
    "description": "Get income statement and financial performance data for a company. Parameters\n  include symbol, period, limit, provider, and more. Data includes revenue, gross\n  profit, operating expenses, net income, and more.",
    "keywords": [
      "income statement",
      "financial performance",
      "get income data",
      "period",
      "limit",
      "provider",
      "symbol",
      "cik",
      "filing date",
      "period of report date",
      "include sources",
      "order",
      "sort",
      "revenue",
      "cost of revenue",
      "gross profit",
      "cost and expenses",
      "research and development expenses",
      "general and administrative expenses",
      "selling and marketing expenses",
      "other expenses",
      "operating expenses",
      "depreciation and amortization",
      "ebitda",
      "operating income",
      "interest income",
      "interest expense",
      "income before tax",
      "income tax expense",
      "net income",
      "eps",
      "weighted average shares outstanding",
      "link",
      "reported currency",
      "filling date",
      "accepted date",
      "calendar year"
    ]
  },
  "equity.fundamental.income_growth": {
    "title": "income_growth",
    "description": "Explore the growth of a company's income statement with the Python function\n  obb.equity.fundamental.income_growth. Retrieve data for symbols, specify the limit,\n  period, and provider, and get detailed information on various aspects of the income\n  statement growth.",
    "keywords": [
      "income statement growth",
      "company income statement",
      "python obb.equity.fundamental.income_growth",
      "symbol",
      "limit",
      "period",
      "provider",
      "data entries",
      "time period",
      "provider name",
      "warnings",
      "chart object",
      "metadata",
      "symbol data",
      "date",
      "growth revenue",
      "cost of goods sold",
      "gross profit",
      "gross profit ratio",
      "research and development expenses",
      "general and administrative expenses",
      "selling and marketing expenses",
      "operating expenses",
      "total costs and expenses",
      "interest expenses",
      "depreciation and amortization expenses",
      "ebitda",
      "ebitda ratio",
      "operating income",
      "operating income ratio",
      "total other income expenses net",
      "income before tax",
      "income tax expenses",
      "net income",
      "eps",
      "eps diluted",
      "weighted average shares outstanding"
    ]
  },
  "equity.fundamental.management": {
    "title": "management",
    "description": "Learn about key executives for a company and how to retrieve their data\n  using the `obb.equity.fundamental.management` function. Get details such as designation,\n  name, pay, currency, gender, birth year, and title since.",
    "keywords": [
      "key executives",
      "company executives",
      "symbol",
      "data",
      "designation",
      "name",
      "pay",
      "currency",
      "gender",
      "birth year",
      "title since"
    ]
  },
  "equity.fundamental.management_compensation": {
    "title": "management_compensation",
    "description": "Learn how to retrieve executive compensation data for a company using\n  the equity management compensation function in Python. Understand the parameters,\n  return values, and available data fields such as symbol, salary, bonus, stock award,\n  and more.",
    "keywords": [
      "executive compensation",
      "company executive compensation",
      "equity management compensation",
      "symbol parameter",
      "provider parameter",
      "return values",
      "data",
      "symbol",
      "cik",
      "filing date",
      "accepted date",
      "name and position",
      "year of compensation",
      "salary",
      "bonus",
      "stock award",
      "incentive plan compensation",
      "all other compensation",
      "total compensation",
      "URL"
    ]
  },
  "equity.fundamental.metrics": {
    "title": "metrics",
    "description": "Learn about key metrics for a given company using the `obb.equity.fundamental.metrics`\n  Python function. This API endpoint provides data such as revenue per share, net\n  income per share, market capitalization, price-to-earnings ratio, and more. Explore\n  the available parameters and returned data to analyze financial performance. Full\n  documentation and usage examples available.",
    "keywords": [
      "key metrics",
      "python function",
      "documentation",
      "API",
      "parameters",
      "returns",
      "data",
      "symbol",
      "period",
      "limit",
      "provider",
      "with_ttm",
      "revenue per share",
      "net income per share",
      "operating cash flow per share",
      "free cash flow per share",
      "cash per share",
      "book value per share",
      "tangible book value per share",
      "shareholders equity per share",
      "interest debt per share",
      "market capitalization",
      "enterprise value",
      "price-to-earnings ratio",
      "price-to-sales ratio",
      "price-to-operating cash flow ratio",
      "price-to-free cash flow ratio",
      "price-to-book ratio",
      "price-to-tangible book ratio",
      "earnings yield",
      "free cash flow yield",
      "debt-to-equity ratio",
      "debt-to-assets ratio",
      "net debt-to-EBITDA ratio",
      "current ratio",
      "interest coverage",
      "income quality",
      "dividend yield",
      "payout ratio",
      "sales general and administrative expenses-to-revenue ratio",
      "research and development expenses-to-revenue ratio",
      "intangibles-to-total assets ratio",
      "capital expenditures-to-operating cash flow ratio",
      "capital expenditures-to-revenue ratio",
      "capital expenditures-to-depreciation ratio",
      "stock-based compensation-to-revenue ratio",
      "Graham number",
      "return on invested capital",
      "return on tangible assets",
      "Graham net-net working capital",
      "working capital",
      "tangible asset value",
      "net current asset value",
      "invested capital",
      "average receivables",
      "average payables",
      "average inventory",
      "days sales outstanding",
      "days payables outstanding",
      "days of inventory on hand",
      "receivables turnover",
      "payables turnover",
      "inventory turnover",
      "return on equity",
      "capital expenditures per share",
      "calendar year"
    ]
  },
  "equity.fundamental.multiples": {
    "title": "multiples",
    "description": "Learn how to calculate equity valuation multiples for a stock ticker\n  using the OBB Python function. Discover the available parameters and the data returned,\n  including revenue per share, net income per share, market capitalization, price-to-earnings\n  ratio, and more. Improve your investment analysis with this powerful tool.",
    "keywords": [
      "equity valuation multiples",
      "stock ticker valuation",
      "python function",
      "parameters",
      "returns",
      "data",
      "revenue per share",
      "net income per share",
      "operating cash flow per share",
      "free cash flow per share",
      "cash per share",
      "book value per share",
      "tangible book value per share",
      "shareholders equity per share",
      "market capitalization",
      "price-to-earnings ratio",
      "price-to-sales ratio",
      "price-to-operating cash flow ratio",
      "price-to-free cash flow ratio",
      "price-to-book ratio",
      "price-to-tangible book ratio",
      "enterprise value-to-sales ratio",
      "enterprise value-to-EBITDA ratio",
      "earnings yield",
      "free cash flow yield",
      "debt-to-equity ratio",
      "debt-to-assets ratio",
      "net debt-to-EBITDA ratio",
      "current ratio",
      "interest coverage",
      "income quality",
      "dividend yield",
      "payout ratio",
      "sales general and administrative expenses-to-revenue ratio",
      "research and development expenses-to-revenue ratio",
      "intangibles-to-total assets ratio",
      "capital expenditures-to-operating cash flow ratio",
      "capital expenditures-to-revenue ratio",
      "capital expenditures-to-depreciation ratio",
      "stock-based compensation-to-revenue ratio",
      "graham number",
      "return on invested capital",
      "return on tangible assets",
      "graham net-net working capital",
      "working capital",
      "tangible asset value",
      "net current asset value",
      "invested capital",
      "average receivables",
      "average payables",
      "average inventory",
      "days sales outstanding",
      "days payables outstanding",
      "days of inventory on hand",
      "receivables turnover",
      "payables turnover",
      "inventory turnover",
      "return on equity",
      "capital expenditures per share"
    ]
  },
  "equity.fundamental.overview": {
    "title": "overview",
    "description": "Learn about the company overview and get essential information, including\n  symbol, price, beta, volume average, market capitalization, last dividend, industry,\n  website, CEO, sector, country, and more.",
    "keywords": [
      "company overview",
      "overview symbol",
      "equity fundamental overview",
      "parameters",
      "returns",
      "data",
      "symbol",
      "price",
      "beta",
      "vol_avg",
      "mkt_cap",
      "last_div",
      "range",
      "changes",
      "company_name",
      "currency",
      "cik",
      "isin",
      "cusip",
      "exchange",
      "exchange_short_name",
      "industry",
      "website",
      "description",
      "ceo",
      "sector",
      "country",
      "full_time_employees",
      "phone",
      "address",
      "city",
      "state",
      "zip",
      "dcf_diff",
      "dcf",
      "image",
      "ipo_date",
      "default_image",
      "is_etf",
      "is_actively_trading",
      "is_adr",
      "is_fund"
    ]
  },
  "equity.fundamental.ratios": {
    "title": "ratios",
    "description": "Learn about financial ratios for a given company over time. Explore various\n  equity ratios, such as current ratio, quick ratio, and cash conversion cycle. Understand\n  key profitability metrics like return on equity and profit margin. Analyze debt\n  ratios, inventory turnover, and operating and free cash flows. Evaluate the price\n  to earnings ratio and dividend yield.",
    "keywords": [
      "financial ratios",
      "company ratios",
      "ratios over time",
      "equity ratios",
      "current ratio",
      "quick ratio",
      "cash conversion cycle",
      "return on equity",
      "profit margin",
      "debt ratio",
      "inventory turnover",
      "operating cash flow",
      "free cash flow",
      "price to earnings ratio",
      "dividend yield"
    ]
  },
  "equity.fundamental.revenue_per_geography": {
    "title": "revenue_per_geography",
    "description": "Learn about the revenue per geography data with the geographic revenue\n  data Python function in this documentation page. Understand the symbol, period,\n  structure, and provider parameters. Explore the returns, results, metadata, and\n  the data structure including the date, geographic segment, and revenue by region\n  (Americas, Europe, Greater China, Japan, Rest of Asia Pacific).",
    "keywords": [
      "geographic revenue data",
      "revenue per geography",
      "Python function",
      "documentation page",
      "symbol parameter",
      "period parameter",
      "structure parameter",
      "provider parameter",
      "returns",
      "results",
      "metadata",
      "data",
      "date",
      "geographic segment",
      "Americas",
      "Europe",
      "Greater China",
      "Japan",
      "Rest of Asia Pacific"
    ]
  },
  "equity.fundamental.revenue_per_segment": {
    "title": "revenue_per_segment",
    "description": "Learn how to get revenue data for a specific business line using the\n  equity fundamental revenue per segment function.",
    "keywords": [
      "Revenue Business Line",
      "business line revenue data",
      "equity fundamental revenue per segment",
      "symbol",
      "period",
      "structure",
      "provider",
      "results",
      "RevenueBusinessLine",
      "chart",
      "metadata",
      "data",
      "date",
      "business line"
    ]
  },
  "equity.fundamental.search_financial_attributes": {
    "title": "search_financial_attributes",
    "description": "Search financial attributes for financial statements",
    "keywords": [
      "equity",
      "fundamental",
      "search_financial_attributes"
    ]
  },
  "equity.fundamental.trailing_dividend_yield": {
    "title": "trailing_dividend_yield",
    "description": "Trailing 1yr dividend yield",
    "keywords": [
      "equity",
      "fundamental",
      "trailing_dividend_yield"
    ]
  },
  "equity.fundamental.transcript": {
    "title": "transcript",
    "description": "Learn how to retrieve earnings call transcripts for a given company using\n  Python obb.equity.fundamental.transcript. Understand the data parameters, returns,\n  symbol, year, quarter, and metadata associated with the transcripts.",
    "keywords": [
      "earnings call transcript",
      "python obb.equity.fundamental.transcript",
      "data parameters",
      "returns",
      "symbols",
      "year",
      "quar",
      "content",
      "metadata",
      "provider"
    ]
  },
  "equity.ownership.insider_trading": {
    "title": "insider_trading",
    "description": "Learn how to use the stock insider trading Python function to get information\n  about insider trading, including parameter details, return types, and data descriptions.",
    "keywords": [
      "stock insider trading",
      "equity ownership",
      "Python function",
      "parameter details",
      "data description",
      "symbol",
      "transaction type",
      "limit",
      "provider",
      "returns",
      "results",
      "chart",
      "metadata",
      "data",
      "filing date",
      "transaction date",
      "reporting CIK",
      "securities owned",
      "company CIK",
      "reporting name",
      "type of owner",
      "acquisition or disposition",
      "form type",
      "securities transacted",
      "price",
      "security name",
      "link"
    ]
  },
  "equity.ownership.institutional": {
    "title": "institutional",
    "description": "Learn about institutional ownership data, and how to use the OBB.equity.ownership.institutional\n  function in Python to access the data. Explore the symbol, include_current_quarter,\n  date, and provider parameters. Understand the meaning and usage of the results,\n  provider, warnings, chart, and metadata properties. Additionally, get detailed descriptions\n  of the various data fields such as symbol, cik, date, investors_holding, number_of_13f_shares,\n  total_invested, ownership_percent, new_positions, closed_positions, total_calls,\n  total_puts, and put_call_ratio.",
    "keywords": [
      "institutional ownership data",
      "python OBB.equity.ownership.institutional function",
      "symbol parameter",
      "include_current_quarter parameter",
      "date parameter",
      "provider parameter",
      "results property",
      "provider property",
      "warnings property",
      "chart property",
      "metadata property",
      "data description",
      "symbol data",
      "cik data",
      "date data",
      "investors_holding data",
      "last_investors_holding data",
      "investors_holding_change data",
      "number_of_13f_shares data",
      "last_number_of_13f_shares data",
      "number_of_13f_shares_change data",
      "total_invested data",
      "last_total_invested data",
      "total_invested_change data",
      "ownership_percent data",
      "last_ownership_percent data",
      "ownership_percent_change data",
      "new_positions data",
      "last_new_positions data",
      "new_positions_change data",
      "increased_positions data",
      "last_increased_positions data",
      "increased_positions_change data",
      "closed_positions data",
      "last_closed_positions data",
      "closed_positions_change data",
      "reduced_positions data",
      "last_reduced_positions data",
      "reduced_positions_change data",
      "total_calls data",
      "last_total_calls data",
      "total_calls_change data",
      "total_puts data",
      "last_total_puts data",
      "total_puts_change data",
      "put_call_ratio data",
      "last_put_call_ratio data",
      "put_call_ratio_change data"
    ]
  },
  "equity.ownership.major_holders": {
    "title": "major_holders",
    "description": "Get detailed information about equity ownership and stock ownership,\n  including investment data, security data, market value data, shares data, performance\n  data, and ownership data. Use the equity ownership API to retrieve equity ownership\n  details, and explore various stock ownership parameters and returns. Access company\n  ownership data, investor data, filing data, industry data, and more.",
    "keywords": [
      "equity ownership",
      "company ownership",
      "equity ownership API",
      "equity ownership data",
      "equity ownership parameters",
      "equity ownership returns",
      "equity ownership data fields",
      "stock ownership",
      "stock ownership data",
      "stock ownership API",
      "stock ownership parameters",
      "stock ownership returns",
      "stock ownership data fields",
      "investment data",
      "security data",
      "market value data",
      "shares data",
      "performance data",
      "ownership data",
      "equity ownership details",
      "stock ownership details",
      "equity ownership information",
      "stock ownership information",
      "company ownership data",
      "investor data",
      "filing data",
      "industry data"
    ]
  },
  "equity.ownership.share_statistics": {
    "title": "share_statistics",
    "description": "Learn how to retrieve and analyze share statistics for a given company\n  using the obb.equity.ownership.share_statistics API endpoint. This documentation\n  provides details on the parameters, return values, and data structure.",
    "keywords": [
      "share statistics",
      "company statistics",
      "equity ownership",
      "symbol",
      "provider",
      "data",
      "free float",
      "float shares",
      "outstanding shares",
      "source"
    ]
  },
  "equity.price.historical": {
    "title": "historical",
    "description": "Learn how to use the `obb.equity.price.historical` function to load historical\n  price data for a specific stock ticker. Find out about the available parameters\n  and providers, as well as the structure of the returned data and the columns it\n  contains.",
    "keywords": [
      "equity historical price",
      "load stock data",
      "specific ticker",
      "python function",
      "equity data parameters",
      "alpha vantage provider",
      "fmp provider",
      "intrinio provider",
      "polygon provider",
      "yfinance provider",
      "equity historical data returns",
      "equity data columns",
      "alpha vantage data columns",
      "cboe data columns",
      "fmp data columns",
      "intrinio data columns",
      "polygon data columns",
      "yfinance data columns"
    ]
  },
  "equity.price.nbbo": {
    "title": "nbbo",
    "description": "Learn how to load the National Best Bid and Offer (NBBO) for a specific\n  equity using the OBB.equity.price.nbbo API. Explore the parameters and data returned\n  by the query, including ask price, bid price, ask size, bid size, exchange details,\n  timestamps, and more.",
    "keywords": [
      "Equity Quote",
      "National Best Bid and Offer",
      "specific equity",
      "symbol",
      "provider",
      "polygon",
      "query",
      "limit",
      "date",
      "timestamp",
      "OBBject",
      "results",
      "EquityNBBO",
      "warnings",
      "Chart",
      "Metadata",
      "ask_exchange",
      "ask",
      "ask_size",
      "bid_size",
      "bid",
      "bid_exchange",
      "tape",
      "conditions",
      "indicators",
      "sequence_num",
      "participant_timestamp",
      "sip_timestamp",
      "trf_timestamp",
      "data"
    ]
  },
  "equity.price.performance": {
    "title": "performance",
    "description": "Learn how to calculate the price performance return for a symbol over\n  different time periods using the OBB.equity.price.performance function. Retrieve\n  data such as one-day return, week to date return, one-week return, month to date\n  return, and more. Understand the parameters, returns, and data structure of the\n  function.",
    "keywords": [
      "price performance",
      "return",
      "symbol",
      "data",
      "provider",
      "chart",
      "metadata",
      "one-day return",
      "week to date return",
      "one-week return",
      "month to date return",
      "one-month return",
      "quarter to date return",
      "three-month return",
      "six-month return",
      "year to date return",
      "one-year return",
      "three-year return",
      "five-year return",
      "ten-year return",
      "max return",
      "time series",
      "ticker symbol"
    ]
  },
  "equity.price.quote": {
    "title": "quote",
    "description": "Learn how to load stock data for a specific ticker with the Equity Quote\n  function. Discover the various parameters and data returned, including day low,\n  day high, date, symbol, name, price, volume, and more.",
    "keywords": [
      "equity quote",
      "stock data",
      "ticker",
      "parameters",
      "symbol",
      "provider",
      "returns",
      "data",
      "day low",
      "day high",
      "date",
      "fmp",
      "intrinio",
      "source",
      "results",
      "warnings",
      "chart",
      "metadata",
      "price",
      "changes percentage",
      "change",
      "year high",
      "year low",
      "market cap",
      "price avg50",
      "price avg200",
      "volume",
      "avg volume",
      "exchange",
      "open",
      "previous close",
      "eps",
      "pe",
      "earnings announcement",
      "shares outstanding",
      "last price",
      "last time",
      "last size",
      "bid price",
      "bid size",
      "ask price",
      "ask size",
      "close price",
      "high price",
      "low price",
      "exchange volume",
      "market volume",
      "updated on",
      "listing venue",
      "sales conditions",
      "quote conditions",
      "market center code",
      "is darkpool",
      "messages",
      "security"
    ]
  },
  "equity.shorts.fails_to_deliver": {
    "title": "fails_to_deliver",
    "description": "Learn how to retrieve reported Fail-to-deliver (FTD) data using the OBB.equity.shorts.fails_to_deliver\n  function in Python. Explore the available parameters for symbol selection and provider\n  options. Understand the data returned, including settlement date, symbol, quantity\n  of fails, and more.",
    "keywords": [
      "Fail-to-deliver data",
      "Fail-to-deliver reporting",
      "Equity FTD",
      "Symbol data",
      "Provider selection",
      "Limiting number of reports",
      "Skipping reports",
      "Settlement date",
      "CUSIP",
      "Quantity of fails",
      "Previous closing price"
    ]
  },
  "equity.shorts.short_interest": {
    "title": "short_interest",
    "description": "Learn how to get reported Short Volume and Days to Cover data using the\n  OBB.equity.shorts.short_interest function in Python. This page provides information\n  on the parameters, returns, and available data fields such as settlement date, symbol,\n  issue name, market class, current short position, previous short position, average\n  daily volume, days to cover, change, and change percentage.",
    "keywords": [
      "Get reported Short Volume and Days to Cover data",
      "OBB.equity.shorts.short_interest",
      "symbol",
      "provider",
      "Short Volume",
      "Days to Cover",
      "data",
      "parameters",
      "returns",
      "data",
      "settlement_date",
      "symbol",
      "issue_name",
      "market_class",
      "current_short_position",
      "previous_short_position",
      "avg_daily_volume",
      "days_to_cover",
      "change",
      "change_pct"
    ]
  },
  "equity.shorts.short_volume": {
    "title": "short_volume",
    "description": "This documentation page provides information and usage instructions on\n  retrieving Fail-to-deliver (FTD) data using the Python library. Learn how to use\n  the `obb.equity.shorts.short_volume` function to fetch FTD data, including parameters,\n  return values, and data details such as date, market, volume, and more. The page\n  also covers the stockgrid provider, chart object, and metadata information about\n  the command execution.",
    "keywords": [
      "Fail-to-deliver data",
      "FTD data",
      "Python library",
      "equity shorts",
      "short volume",
      "stockgrid provider",
      "data parameters",
      "data returns",
      "chart object",
      "metadata",
      "data",
      "date",
      "market",
      "short volume",
      "short exempt volume",
      "total volume",
      "close price",
      "short volume percentage"
    ]
  },
  "etf.countries": {
    "title": "countries",
    "description": "Learn about ETF country weighting and how to retrieve country exposure\n  data using obb.etf.countries API endpoint.",
    "keywords": [
      "ETF country weighting",
      "obb.etf.countries",
      "symbol",
      "provider",
      "etf",
      "data",
      "results",
      "chart",
      "metadata",
      "country exposure"
    ]
  },
  "etf.historical": {
    "title": "historical",
    "description": "Learn how to access historical market price data for ETFs with the OBB.etf.historical()\n  method. This method allows you to retrieve data such as the opening, high, low,\n  and closing prices, as well as the trading volume and adjusted closing price for\n  a specific ETF symbol during a given time period.",
    "keywords": [
      "ETF Historical Market Price",
      "ETF historical data",
      "ETF symbol",
      "start date",
      "end date",
      "provider",
      "query results",
      "chart object",
      "metadata",
      "data",
      "open price",
      "high price",
      "low price",
      "close price",
      "volume",
      "adjusted close price"
    ]
  },
  "etf.holdings": {
    "title": "holdings",
    "description": "Learn how to get the holdings data for an individual ETF using the `obb.etf.holdings`\n  method. Understand the parameters like symbol, provider, date, and CIK. Explore\n  the returns, results, warnings, chart, and metadata. Dive into the data fields like\n  symbol, name, LEI, title, CUSIP, ISIN, balance, units, currency, value, weight,\n  payoff profile, asset category, issuer category, country, and more.",
    "keywords": [
      "ETF holdings",
      "individual ETF holdings",
      "holdings data for ETF",
      "symbol",
      "provider",
      "date",
      "CIK",
      "returns",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "name",
      "LEI",
      "title",
      "CUSIP",
      "ISIN",
      "balance",
      "units",
      "currency",
      "value",
      "weight",
      "payoff profile",
      "asset category",
      "issuer category",
      "country",
      "is restricted",
      "fair value level",
      "is cash collateral",
      "is non-cash collateral",
      "is loan by fund",
      "acceptance datetime"
    ]
  },
  "etf.holdings_date": {
    "title": "holdings_date",
    "description": "Learn how to retrieve the holdings filing date for an individual ETF\n  using the OBB.etf.holdings_date API. Explore the available parameters, such as symbol\n  and provider, and understand the returned results like results list, chart object,\n  and metadata info.",
    "keywords": [
      "ETF holdings filing date",
      "get ETF holdings filing date",
      "ETF holdings date API",
      "symbol parameter",
      "provider parameter",
      "fmp provider",
      "cik parameter",
      "returns",
      "results",
      "warnings",
      "chart object",
      "metadata info",
      "data parameter",
      "date field"
    ]
  },
  "etf.holdings_performance": {
    "title": "holdings_performance",
    "description": "Get the ETF holdings performance using the `obb.etf.holdings_performance`\n  function in Python. This function returns a variety of performance metrics for ETF\n  holdings, including one-day return, week-to-date return, one-week return, month-to-date\n  return, and more. Analyze and chart the performance of ETF holdings with this comprehensive\n  function.",
    "keywords": [
      "ETF holdings performance",
      "etf holdings performance python",
      "etf holdings performance function",
      "etf performance data",
      "etf returns",
      "etf performance metrics",
      "etf performance analysis",
      "etf performance statistics",
      "etf performance calculation",
      "etf performance chart"
    ]
  },
  "etf.info": {
    "title": "info",
    "description": "Get an overview of ETF information using the `obb.etf.info` function.\n  Learn about the available parameters, returns, and data fields like name, inception\n  date, asset class, assets under management, average trading volume, CUSIP, description,\n  domicile, expense ratio, ISIN, net asset value, website link, and holdings count.",
    "keywords": [
      "ETF Information Overview",
      "obb.etf.info",
      "parameters",
      "symbol",
      "provider",
      "returns",
      "data",
      "name",
      "inception date",
      "asset class",
      "assets under management",
      "average trading volume",
      "CUSIP",
      "description",
      "domicile",
      "expense ratio",
      "ISIN",
      "net asset value",
      "website link",
      "holdings count"
    ]
  },
  "etf.price_performance": {
    "title": "price_performance",
    "description": "Learn about price performance returns over different periods and how\n  to retrieve data for a given symbol. Find out how to analyze the time series data,\n  view the provider information, and access additional metadata and warnings.",
    "keywords": [
      "price performance",
      "return",
      "periods",
      "symbol",
      "data",
      "time series",
      "chart",
      "provider",
      "metadata",
      "warnings",
      "one-day return",
      "week to date return",
      "one-week return",
      "month to date return",
      "one-month return",
      "quarter to date return",
      "three-month return",
      "six-month return",
      "year to date return",
      "one-year return",
      "three-year return",
      "five-year return",
      "ten-year return",
      "max return",
      "ticker symbol"
    ]
  },
  "etf.search": {
    "title": "search",
    "description": "Learn how to search for ETFs with parameters like query, provider, exchange\n  code, and more. Retrieve key details about ETFs, including market cap, industry,\n  sector, beta, current price, annual dividend, trading volume, exchange, and country.\n  Find actively trading ETFs and their symbol representation.",
    "keywords": [
      "search for ETFs",
      "ETF search query",
      "ETF provider",
      "ETF exchange code",
      "ETF trading volume",
      "ETF market cap",
      "ETF sector",
      "ETF industry",
      "ETF beta",
      "ETF current price",
      "ETF annual dividend",
      "ETF exchange",
      "ETF country",
      "actively trading ETF"
    ]
  },
  "etf.sectors": {
    "title": "sectors",
    "description": "Learn about ETF sector weighting using OBB.etf.sectors API. Find information\n  about the parameters, returns, and data, including sectors, weights, and exposure\n  levels in normalized percentage points.",
    "keywords": [
      "ETF Sector weighting",
      "OBB.etf.sectors",
      "parameters",
      "symbol",
      "provider",
      "returns",
      "results",
      "etf sectors",
      "warnings",
      "chart",
      "metadata",
      "data",
      "sector",
      "weight",
      "exposure",
      "normalized percentage points"
    ]
  },
  "etf.discovery.active": {
    "title": "active",
    "description": "Learn how to get the most active ETFs using the ETF discovery API. This\n  page provides documentation for the parameters, returns, and data associated with\n  the API endpoint. Understand how to use the sorting, limiting, and provider parameters\n  and explore the returned results, chart object, and metadata. Find details about\n  the data fields including symbol, name, last price, percent change, net change,\n  volume, date, country, mantissa, type, and formatted values. Retrieve the source\n  url for additional information.",
    "keywords": [
      "ETFs",
      "most active ETFs",
      "ETF discovery",
      "sort order",
      "limit parameter",
      "provider parameter",
      "results",
      "chart object",
      "metadata",
      "symbol",
      "name",
      "last price",
      "percent change",
      "net change",
      "volume",
      "date",
      "country",
      "mantissa",
      "type",
      "formatted price",
      "formatted volume",
      "formatted price change",
      "formatted percent change",
      "url"
    ]
  },
  "etf.discovery.gainers": {
    "title": "gainers",
    "description": "Learn how to get the top ETF gainers using Python code. This documentation\n  includes details about the parameters, return values, and data format.",
    "keywords": [
      "ETF gainers",
      "ETFGainers",
      "Python code",
      "parameters",
      "sort order",
      "limit",
      "provider",
      "returns",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "symbol",
      "name",
      "last price",
      "percent change",
      "net change",
      "trading volume",
      "date",
      "bluegrass channel",
      "country",
      "mantissa",
      "type",
      "formatted price",
      "formatted volume",
      "formatted price change",
      "formatted percent change",
      "url"
    ]
  },
  "etf.discovery.losers": {
    "title": "losers",
    "description": "Learn how to get the top ETF losers using the OBB ETF Discovery API endpoint.\n  Explore the available parameters and the returned data, including symbols, names,\n  prices, percentage changes, and trading volumes.",
    "keywords": [
      "ETF losers",
      "top ETF losers",
      "ETFLosers",
      "sort order",
      "data entries",
      "provider",
      "warnings",
      "chart",
      "metadata",
      "symbol",
      "name",
      "last price",
      "percent change",
      "net change",
      "trading volume",
      "date",
      "bluegrass channel",
      "country",
      "mantissa",
      "type",
      "formatted price",
      "formatted volume",
      "formatted price change",
      "formatted percent change",
      "source url"
    ]
  },
  "fixedincome.sofr": {
    "title": "sofr",
    "description": "Learn about the Secured Overnight Financing Rate (SOFR), a measure of\n  the cost of borrowing cash overnight collateralized by Treasury securities. Explore\n  the SOFR Python function parameters, data returns, and more.",
    "keywords": [
      "Secured Overnight Financing Rate",
      "SOFR",
      "borrowing cash overnight",
      "collateralizing by Treasury securities",
      "SOFR python function",
      "SOFR parameters",
      "start_date",
      "end_date",
      "provider",
      "SOFR period",
      "returns",
      "results",
      "provider name",
      "warnings",
      "chart",
      "metadata",
      "data",
      "date",
      "rate"
    ]
  },
  "fixedincome.corporate.commercial_paper": {
    "title": "commercial_paper",
    "description": "Learn about commercial paper, a form of short-term promissory notes issued\n  primarily by corporations. Discover how it can help raise cash for current transactions\n  and serve as a lower-cost alternative to bank loans. Explore the parameters and\n  data returned by the commercial paper API endpoint.",
    "keywords": [
      "commercial paper",
      "short-term promissory notes",
      "corporations",
      "raise cash",
      "lower-cost alternative",
      "start_date",
      "end_date",
      "maturity",
      "category",
      "grade",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "date",
      "rate"
    ]
  },
  "fixedincome.corporate.hqm": {
    "title": "hqm",
    "description": "Learn about the HQM yield curve and the high quality corporate bond market.\n  Get information on AAA, AA, and A bonds, market-weighted average quality, corporate\n  bond rates, maturity, yield curve type, provider, and data.",
    "keywords": [
      "HQM yield curve",
      "high quality corporate bond market",
      "AAA bonds",
      "AA bonds",
      "A bonds",
      "market-weighted average quality",
      "corporate bond rates",
      "maturity",
      "yield curve type",
      "provider",
      "fred",
      "data"
    ]
  },
  "fixedincome.corporate.ice_bofa": {
    "title": "ice_bofa",
    "description": "Learn about ICE BofA US Corporate Bond Indices, including the ICE BofA\n  US Corporate Index and parameters for the `obb.fixedincome.corporate.ice_bofa` function.\n  Find out how to retrieve historical data and explore the available categories and\n  areas.",
    "keywords": [
      "ICE BofA US Corporate Bond Indices",
      "ICE BofA US Corporate Index",
      "US dollar denominated investment grade corporate debt",
      "Moody's",
      "S&P",
      "Fitch",
      "investment grade rating",
      "final maturity",
      "rebalance date",
      "fixed coupon schedule",
      "minimum amount outstanding",
      "US Corporate Master Index",
      "start date",
      "end date",
      "index type",
      "provider",
      "fred",
      "category",
      "area",
      "grade",
      "options",
      "returns",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "rate"
    ]
  },
  "fixedincome.corporate.moody": {
    "title": "moody",
    "description": "Moody Corporate Bond Index",
    "keywords": [
      "fixedincome",
      "corporate",
      "moody"
    ]
  },
  "fixedincome.corporate.spot_rates": {
    "title": "spot_rates",
    "description": "Learn about spot rates and how they are used to calculate the yield on\n  a bond. Understand the concept of discounting and its application in evaluating\n  pension liabilities. Explore the parameters needed to query and retrieve spot rate\n  data. Get the serializable results, provider information, warnings, chart, and metadata\n  associated with the query. Access the spot rate data including the date and rate.",
    "keywords": [
      "spot rates",
      "yield",
      "bond",
      "zero coupon bond",
      "interest rate",
      "discounting",
      "pension liability",
      "maturities",
      "query",
      "results",
      "provider",
      "warnings",
      "chart",
      "metadata",
      "data",
      "date",
      "rate"
    ]
  },
  "fixedincome.government.eu_yield_curve": {
    "title": "eu_yield_curve",
    "description": "Learn about the Euro Area Yield Curve, its definition, and how to access\n  ECB yield curve data. Understand the factors influencing yield curve shape and rate\n  expectations. Explore parameters, types, and providers for yield curve data, as\n  well as the returned results, chart object, and metadata.",
    "keywords": [
      "Euro Area Yield Curve",
      "ECB yield curve data",
      "yield curve definition",
      "bond yield curve",
      "Treasury market",
      "credit quality",
      "yield curve shape",
      "rate expectations",
      "pure expectations hypothesis",
      "bond pricing",
      "debt market",
      "yield curve parameters",
      "yield curve types",
      "yield curve provider",
      "yield curve data",
      "yield curve ratings",
      "OBBject",
      "EUYieldCurve",
      "results",
      "chart",
      "metadata"
    ]
  },
  "fixedincome.government.treasury_auctions": {
    "title": "treasury_auctions",
    "description": "Government Treasury Auctions",
    "keywords": [
      "fixedincome",
      "government",
      "treasury_auctions"
    ]
  },
  "fixedincome.government.treasury_rates": {
    "title": "treasury_rates",
    "description": "Government Treasury Rates",
    "keywords": [
      "fixedincome",
      "government",
      "treasury_rates"
    ]
  },
  "fixedincome.government.us_yield_curve": {
    "title": "us_yield_curve",
    "description": "Learn about the US Yield Curve and how to retrieve United States yield\n  curve data using the OBB.fixedincome.government.us_yield_curve function. Explore\n  parameters like date, inflation adjustment, and provider. Understand the returned\n  results, including the chart, metadata, and warnings. Discover the data structure,\n  including maturity and rate.",
    "keywords": [
      "US Yield Curve",
      "United States yield curve",
      "yield curve",
      "government bonds",
      "fixed income",
      "rates",
      "inflation adjusted",
      "FRED provider",
      "data",
      "maturity",
      "treasury rate",
      "rate"
    ]
  },
  "fixedincome.rate.ameribor": {
    "title": "ameribor",
    "description": "Ameribor",
    "keywords": [
      "fixedincome",
      "rate",
      "ameribor"
    ]
  },
  "fixedincome.rate.dpcredit": {
    "title": "dpcredit",
    "description": "Discount Window Primary Credit Rate",
    "keywords": [
      "fixedincome",
      "rate",
      "dpcredit"
    ]
  },
  "fixedincome.rate.ecb": {
    "title": "ecb",
    "description": "Learn about the key interest rates set by the European Central Bank (ECB)\n  for the Euro area. Explore the Python API for accessing European Central Bank interest\n  rate data and understand the available parameters to customize your queries.",
    "keywords": [
      "European Central Bank interest rates",
      "ECB key interest rates",
      "ECB refinancing operations",
      "deposit facility rate",
      "marginal lending facility rate",
      "Python OBB fixed income API",
      "start date parameter",
      "end date parameter",
      "interest rate type parameter",
      "provider parameter",
      "European Central Bank Interest Rates data",
      "European Central Bank Interest Rates API"
    ]
  },
  "fixedincome.rate.effr": {
    "title": "effr",
    "description": "Fed Funds Rate",
    "keywords": [
      "fixedincome",
      "rate",
      "effr"
    ]
  },
  "fixedincome.rate.effr_forecast": {
    "title": "effr_forecast",
    "description": "Fed Funds Rate Projections",
    "keywords": [
      "fixedincome",
      "rate",
      "effr_forecast"
    ]
  },
  "fixedincome.rate.estr": {
    "title": "estr",
    "description": "Euro Short-Term Rate",
    "keywords": [
      "fixedincome",
      "rate",
      "estr"
    ]
  },
  "fixedincome.rate.iorb": {
    "title": "iorb",
    "description": "Interest on Reserve Balances",
    "keywords": [
      "fixedincome",
      "rate",
      "iorb"
    ]
  },
  "fixedincome.rate.sonia": {
    "title": "sonia",
    "description": "Sterling Overnight Index Average",
    "keywords": [
      "fixedincome",
      "rate",
      "sonia"
    ]
  },
  "fixedincome.spreads.tmc": {
    "title": "tmc",
    "description": "Learn about Treasury Constant Maturity and how to get data for it. Understand\n  constant maturity calculation and the use of Treasury yield curve and Treasury securities.\n  Explore parameters like start date, end date, maturity, and provider. Get a list\n  of results, warnings, and metadata along with a chart depicting the Treasury Constant\n  Maturity rate.",
    "keywords": [
      "Treasury Constant Maturity",
      "data",
      "U.S. Treasury",
      "yield curve",
      "Treasury securities",
      "start date",
      "end date",
      "maturity",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "rate"
    ]
  },
  "fixedincome.spreads.tmc_effr": {
    "title": "tmc_effr",
    "description": "Learn how to select Treasury Constant Maturity and access data for it\n  using the obb.fixedincome.spreads.tmc_effr function. Understand constant maturity,\n  Treasury yield curve, bid-yields, and Treasury securities. Explore the parameters\n  and data returned by the function.",
    "keywords": [
      "Treasury Constant Maturity",
      "data for Treasury Constant Maturity",
      "constant maturity",
      "U.S. Treasury",
      "Treasury yield curve",
      "yield curve interpolation",
      "bid-yields",
      "Treasury securities",
      "obb.fixedincome.spreads.tmc_effr",
      "start_date",
      "end_date",
      "maturity",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "date",
      "rate"
    ]
  },
  "fixedincome.spreads.treasury_effr": {
    "title": "treasury_effr",
    "description": "This documentation page provides information about Treasury Bill data,\n  including the selected Treasury Bill rate minus Federal Funds Rate. It explains\n  the concept of constant maturity and the Treasury yield curve. The page also covers\n  the parameters, returns, and data associated with the `obb.fixedincome.spreads.treasury_effr`\n  function.",
    "keywords": [
      "Treasury Bill",
      "Selected Treasury Bill",
      "Federal Funds Rate",
      "Constant Maturity",
      "Treasury yield curve",
      "bid-yields",
      "US Treasuries",
      "obb.fixedincome.spreads.treasury_effr",
      "start_date",
      "end_date",
      "maturity",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "rate",
      "data"
    ]
  },
  "index.available": {
    "title": "available",
    "description": "Available Indices",
    "keywords": [
      "index",
      "available"
    ]
  },
  "index.constituents": {
    "title": "constituents",
    "description": "Learn how to fetch constituents of an index using the OBB library in\n  Python. Get detailed information such as symbol, name, sector, sub-sector, headquarters,\n  date of first addition, CIK, and founding year of the constituent companies in the\n  index.",
    "keywords": [
      "index constituents",
      "fetch constituents",
      "index constituents parameters",
      "index constituents returns",
      "index constituents data",
      "index constituents symbol",
      "index constituents name",
      "index constituents sector",
      "index constituents sub-sector",
      "index constituents headquarters",
      "index constituents date first added",
      "index constituents cik",
      "index constituents founding year"
    ]
  },
  "index.fred": {
    "title": "fred",
    "description": "Learn how to retrieve Historical Fred Indices close values for selected\n  symbols using the OBB Python library. This documentation page provides details on\n  the required parameters, their types, and default values. It also explains the structure\n  of the returned data and its fields.",
    "keywords": [
      "Historical Fred Indices",
      "Close values",
      "get data",
      "symbol",
      "start date",
      "end date",
      "limit",
      "provider",
      "next page",
      "all pages",
      "results",
      "warnings",
      "chart",
      "metadata",
      "date",
      "value"
    ]
  },
  "index.market": {
    "title": "market",
    "description": "Learn how to retrieve historical market indices data using various data\n  providers and query parameters. Understand the available parameters and return values,\n  such as symbol, start date, end date, provider, interval, timeseries, timespan,\n  sort order, limit, adjusted, multiplier, chart, metadata, date, open price, high\n  price, low price, close price, volume, calls volume, puts volume, options volume,\n  adjusted close price, unadjusted volume, change, change percent, label, change over\n  time, and transactions.",
    "keywords": [
      "Historical Market Indices",
      "market data",
      "symbol",
      "start date",
      "end date",
      "data provider",
      "query",
      "interval",
      "timeseries",
      "timespan",
      "sort order",
      "limit",
      "adjusted",
      "multiplier",
      "chart",
      "metadata",
      "date",
      "open price",
      "high price",
      "low price",
      "close price",
      "volume",
      "calls volume",
      "puts volume",
      "options volume",
      "adjusted close price",
      "unadjusted volume",
      "change",
      "change percent",
      "label",
      "change over time",
      "transactions"
    ]
  },
  "index.search": {
    "title": "search",
    "description": "Learn how to perform index search and retrieve index data using this\n  Python API. Understand the different parameters and their defaults, and get detailed\n  information about index symbols, names, and additional attributes such as ISIN code,\n  region, description, currency, and trading times.",
    "keywords": [
      "index search",
      "search indices",
      "Python search query",
      "index data",
      "index symbol",
      "index name",
      "European indices",
      "US indices"
    ]
  },
  "index.snapshots": {
    "title": "snapshots",
    "description": "Index Snapshots documentation page with information on current levels\n  for all indices from a specific provider, and details on parameters, query, returns,\n  and data.",
    "keywords": [
      "index snapshots",
      "current levels",
      "provider",
      "parameters",
      "region",
      "query",
      "returns",
      "data",
      "symbol",
      "name",
      "currency",
      "price",
      "open",
      "high",
      "low",
      "close",
      "prev close",
      "change",
      "change percent",
      "isin code",
      "last trade timestamp"
    ]
  },
  "index.sp500_multiples": {
    "title": "sp500_multiples",
    "description": "Learn about S&P 500 multiples and Shiller PE ratios. Use the `index.sp500_multiples`\n  query to retrieve historical data on various financial metrics such as PE Ratio,\n  Dividend, Earnings, Inflation Adjusted Price, Sales, Price to Sales Ratio, and Book\n  Value per Share. Specify query parameters such as start date, end date, and provider.\n  Collapse the frequency or transform the time series. Get results, charts, metadata,\n  and more.",
    "keywords": [
      "S&P 500 multiples",
      "Shiller PE ratios",
      "SP500Multiples",
      "index.sp500_multiples",
      "historical data",
      "PE Ratio",
      "Dividend",
      "Earnings",
      "Inflation Adjusted Price",
      "Sales",
      "Price to Sales Ratio",
      "Book Value per Share",
      "query parameters",
      "start date",
      "end date",
      "provider",
      "collapse",
      "transform",
      "results",
      "chart",
      "metadata",
      "data",
      "date"
    ]
  },
  "news.company": {
    "title": "company",
    "description": "Get company news for one or more companies using various providers. This\n  API allows you to retrieve news articles along with metadata such as date, title,\n  image, text, and URL. The available providers include Benzinga, FMP, Intrinio, Polygon,\n  Ultima, and Yfinance.",
    "keywords": [
      "company news",
      "news for companies",
      "news API",
      "API parameters",
      "benzinga provider",
      "fmp provider",
      "polygon provider",
      "intrinio provider",
      "ultima provider",
      "yfinance provider",
      "data entries",
      "metadata",
      "company news results",
      "company news warnings",
      "company news chart",
      "data date",
      "data title",
      "data image",
      "data text",
      "data URL",
      "benzinga data",
      "fmp data",
      "intrinio data",
      "polygon data",
      "ultima data",
      "yfinance data"
    ]
  },
  "news.world": {
    "title": "world",
    "description": "Learn how to retrieve global news data using the obb.news.world API.\n  This documentation covers the parameters, returns, and data structures used in the\n  API, including details on how to set the limit and provider, and how to filter the\n  news by date, author, channels, and more. Explore the different data fields such\n  as date, title, images, text, and URL, and understand the structure of the returned\n  results, warnings, chart, and metadata.",
    "keywords": [
      "Global News",
      "global news data",
      "obb.news.world",
      "parameters",
      "limit",
      "provider",
      "default",
      "benzinga",
      "biztoc",
      "fmp",
      "intrinio",
      "display",
      "date",
      "start_date",
      "end_date",
      "updated_since",
      "published_since",
      "sort",
      "order",
      "isin",
      "cusip",
      "channels",
      "topics",
      "authors",
      "content_types",
      "returns",
      "results",
      "provider",
      "warnings",
      "chart",
      "metadata",
      "data",
      "date",
      "title",
      "images",
      "text",
      "url",
      "id",
      "author",
      "teaser",
      "stocks",
      "tags",
      "updated",
      "favicon",
      "score",
      "site",
      "company",
      "datetime",
      "list",
      "dict"
    ]
  },
  "quantitative.capm": {
    "title": "capm",
    "description": "Learn about the Capital Asset Pricing Model (CAPM), a widely-used finance\n  theory for determining an investment's expected return based on its risk. Understand\n  how CAPM can be used as an investment strategy to evaluate and select securities.",
    "keywords": [
      "capital asset pricing model",
      "CAPM",
      "finance",
      "investment strategy"
    ]
  },
  "quantitative.kurtosis": {
    "title": "kurtosis",
    "description": "Learn how to calculate Kurtosis using the provided time series data in\n  Python.",
    "keywords": [
      "Kurtosis",
      "data",
      "time series data",
      "target column name",
      "window size",
      "OBBject",
      "Python"
    ]
  },
  "quantitative.normality": {
    "title": "normality",
    "description": "Learn about normality statistics and their significance in data analysis.\n  Discover different techniques such as kurtosis, skewness, Jarque-Bera, Shapiro-Wilk,\n  and Kolmogorov-Smirnov for evaluating normality in time series data. Explore how\n  these tests can help determine if a data sample follows a normal distribution.",
    "keywords": [
      "normality statistics",
      "kurtosis",
      "skewness",
      "Jarque-Bera",
      "Shapiro-Wilk",
      "Kolmogorov-Smirnov",
      "time series data",
      "target column",
      "normality tests"
    ]
  },
  "quantitative.omega_ratio": {
    "title": "omega_ratio",
    "description": "Learn how to calculate the Omega Ratio using a Python function. This\n  documentation page provides information on the parameters required, including time\n  series data, target column, and threshold. The function returns a list of Omega\n  ratios.",
    "keywords": [
      "Omega Ratio",
      "calculate Omega Ratio",
      "Python function",
      "documentation page",
      "time series data",
      "target column",
      "threshold",
      "OmegaModel"
    ]
  },
  "quantitative.quantile": {
    "title": "quantile",
    "description": "Learn how to get the quantile from a time series data using a Python\n  function. This documentation page provides information about the parameters and\n  returns of the function.",
    "keywords": [
      "quantile",
      "get quantile",
      "time series data",
      "target column",
      "window size",
      "quantile percentage",
      "python",
      "function"
    ]
  },
  "quantitative.sharpe_ratio": {
    "title": "sharpe_ratio",
    "description": "Learn how to calculate the Sharpe Ratio using time series data in Python.\n  Understand the parameters required, including the target column, risk-free rate,\n  and window size. Enhance your investment analysis by computing the Sharpe ratio.",
    "keywords": [
      "Sharpe Ratio",
      "time series data",
      "target column",
      "risk-free rate",
      "window size",
      "python"
    ]
  },
  "quantitative.skewness": {
    "title": "skewness",
    "description": "Learn how to calculate skewness using the 'Get Skewness' function. This\n  Python function is used to calculate the skewness of time series data. Understand\n  the parameters such as data, target column, and window size, and the return type\n  of the function. Perform data analysis with this powerful function.",
    "keywords": [
      "skewness",
      "get skewness",
      "time series data",
      "target column",
      "window size",
      "function parameters",
      "return type",
      "Python",
      "data analysis"
    ]
  },
  "quantitative.sortino_ratio": {
    "title": "sortino_ratio",
    "description": "Learn how to calculate and use the Sortino Ratio in Python. Understand\n  the methodology, terminology, and parameters involved. Compare Sortino ratio to\n  Sharpe ratio and adjust it accordingly. Enhance your risk management strategies\n  with Sortino ratio.",
    "keywords": [
      "Sortino Ratio",
      "Sortino method",
      "Sortino terminology",
      "Sortino ratio calculation",
      "Sortino ratio parameters",
      "Sortino ratio target return",
      "Sortino ratio window size",
      "Sortino ratio adjusted",
      "Sortino ratio vs Sharpe ratio",
      "Sortino ratio Python"
    ]
  },
  "quantitative.summary": {
    "title": "summary",
    "description": "Learn how to get summary statistics on time series data using Python.\n  This documentation page provides information on the parameters and return value\n  of the function.",
    "keywords": [
      "summary statistics",
      "get summary statistics",
      "summary table",
      "python",
      "time series data",
      "target column"
    ]
  },
  "quantitative.unitroot_test": {
    "title": "unitroot_test",
    "description": "Learn about the Unit Root Test function in Python, including the Augmented\n  Dickey-Fuller test and the Kwiatkowski-Phillips-Schmidt-Shin test. Explore the parameters,\n  such as data, target, fuller_reg, and kpss_reg, and understand how to interpret\n  the unit root tests summary.",
    "keywords": [
      "Unit Root Test",
      "Augmented Dickey-Fuller test",
      "Kwiatkowski-Phillips-Schmidt-Shin test",
      "data",
      "target",
      "fuller_reg",
      "kpss_reg",
      "Time series data",
      "unit root tests",
      "unit root tests summary"
    ]
  },
  "regulators.cftc.cot": {
    "title": "cot",
    "description": "Learn how to lookup Commitment of Traders Reports by series ID and view\n  the results, metadata, warnings, and charts associated with the reports. Understand\n  the available parameters such as default report, provider, data type, legacy format,\n  report type, measure, start date, end date, and transform.",
    "keywords": [
      "Commitment of Traders Reports",
      "lookup",
      "series ID",
      "CFTC",
      "regulators",
      "default report",
      "provider",
      "data type",
      "legacy format",
      "report type",
      "measure",
      "start date",
      "end date",
      "transform",
      "results",
      "metadata",
      "warnings",
      "chart",
      "traders",
      "date"
    ]
  },
  "regulators.cftc.cot_search": {
    "title": "cot_search",
    "description": "Learn about curated Commitment of Traders Reports series information\n  and how to perform a search for specific data. Find details on the parameters,\n  data returned, and available CFTC codes.",
    "keywords": [
      "Commitment of Traders Reports",
      "curated COT Reports series",
      "CFTC Code",
      "underlying asset",
      "search query",
      "provider",
      "results",
      "warnings",
      "chart object",
      "metadata info",
      "CFTC"
    ]
  },
  "regulators.sec.cik_map": {
    "title": "cik_map",
    "description": "Learn how to retrieve the CIK number corresponding to a ticker symbol\n  using the python obb.regulators.sec.cik_map function. Understand the available parameters,\n  return values, and data structure.",
    "keywords": [
      "CIK number",
      "ticker symbol",
      "python obb.regulators.sec.cik_map function",
      "get data for symbol",
      "provider parameter",
      "returns",
      "results",
      "warnings",
      "chart object",
      "metadata info",
      "data",
      "central index key"
    ]
  },
  "regulators.sec.filings": {
    "title": "filings",
    "description": "Learn how to look up filings to the Securities and Exchange Commission\n  (SEC) using ticker symbols or Central Index Keys (CIKs). Find information on parameters,\n  data returned, and different types of filings available.",
    "keywords": [
      "filings",
      "SEC",
      "ticker symbol",
      "CIK",
      "parameters",
      "symbol",
      "limit",
      "provider",
      "cik",
      "type",
      "returns",
      "data",
      "date",
      "type of document",
      "link",
      "report date",
      "accepted date",
      "SEC act number",
      "SEC item numbers",
      "primary document description",
      "primary document",
      "accession number",
      "file number",
      "film number",
      "inline XBRL filing",
      "XBRL filing",
      "size of filing",
      "complete filing submission URL",
      "filing details URL",
      "primary XML document"
    ]
  },
  "regulators.sec.institutions_search": {
    "title": "institutions_search",
    "description": "Learn how to use the OBB.regulators.sec.institutions_search() method\n  to look up institutions regulated by the SEC. This method allows you to search for\n  institutions based on various parameters such as the query and provider. It returns\n  a list of search results and provides additional attributes like warnings, chart,\n  and metadata. Explore the attributes like name and cik for more details on the institution.",
    "keywords": [
      "institutions regulated by the SEC",
      "SEC regulated institutions lookup",
      "SEC regulated institutions search",
      "SEC institutions search query",
      "OBB regulator",
      "InstitutionsSearch class",
      "provider parameter",
      "query parameter",
      "use_cache parameter",
      "results attribute",
      "warnings attribute",
      "chart attribute",
      "metadata attribute",
      "name attribute",
      "cik attribute"
    ]
  },
  "regulators.sec.rss_litigation": {
    "title": "rss_litigation",
    "description": "Learn how to use the RSS feed to access litigation releases, including\n  civil lawsuits brought by the Commission in federal court. This documentation provides\n  details about the 'obb.regulators.sec.rss_litigation' python function, its parameters\n  and return values, as well as the data structure used for the releases.",
    "keywords": [
      "RSS feed",
      "litigation releases",
      "civil lawsuits",
      "Commission",
      "federal court",
      "python",
      "obb.regulators.sec.rss_litigation",
      "provider",
      "parameters",
      "returns",
      "data",
      "published",
      "title",
      "summary",
      "id",
      "link"
    ]
  },
  "regulators.sec.schema_files": {
    "title": "schema_files",
    "description": "Get lists of SEC XML schema files by year with the OBBect function. Returns\n  serializable results, provider name, warnings list, chart object, metadata info,\n  and data including a list of URLs to SEC Schema Files.",
    "keywords": [
      "SEC XML schema files",
      "SEC XML schema files by year",
      "get SEC XML schema files",
      "OBBect",
      "Serializable results",
      "provider name",
      "warnings list",
      "chart object",
      "metadata info",
      "fetch URL path",
      "data",
      "list of URLs to SEC Schema Files"
    ]
  },
  "regulators.sec.sic_search": {
    "title": "sic_search",
    "description": "Learn how to perform a search for industry titles, reporting office,\n  and SIC codes using Python. Explore the parameters, returns, and data associated\n  with the `obb.regulators.sec.sic_search` function.",
    "keywords": [
      "search",
      "industry titles",
      "reporting office",
      "SIC codes",
      "Python",
      "search query",
      "provider",
      "cache",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "sector industrial code",
      "industry title",
      "reporting office",
      "Corporate Finance Office"
    ]
  },
  "regulators.sec.symbol_map": {
    "title": "symbol_map",
    "description": "Retrieve the ticker symbol corresponding to a company CIK using the\n  OBB API endpoint. This function allows you to perform a search query and get the\n  results along with additional metadata, warnings, and optional chart data.",
    "keywords": [
      "ticker symbol",
      "CIK",
      "company",
      "ticker mapping",
      "search query",
      "provider",
      "results",
      "warnings",
      "chart",
      "metadata",
      "data",
      "symbol",
      "entity"
    ]
  },
  "technical.ad": {
    "title": "ad",
    "description": "Learn about the Accumulation/Distribution Line and how it is interpreted\n  to detect trends in price movement. Explore its parameters, usage, and see code\n  examples.",
    "keywords": [
      "Accumulation/Distribution Line",
      "On Balance Volume",
      "CLV",
      "divergence",
      "price",
      "trending upward",
      "flat",
      "flattening of the price",
      "Parameters",
      "data",
      "index",
      "offset",
      "Returns",
      "Examples"
    ]
  },
  "technical.adosc": {
    "title": "adosc",
    "description": "Learn about the Accumulation/Distribution Oscillator, also known as the\n  Chaikin Oscillator. This momentum indicator examines the strength of price moves\n  and underlying buying and selling pressure. Discover how divergence between the\n  indicator and price signals market turning points. Explore the parameters, data,\n  and examples for using this oscillator in your analysis.",
    "keywords": [
      "Accumulation/Distribution Oscillator",
      "Chaikin Oscillator",
      "momentum indicator",
      "Accumulation-Distribution line",
      "buying pressure",
      "selling pressure",
      "divergence",
      "market turning points",
      "parameters",
      "data",
      "fast calculation",
      "slow calculation",
      "offset",
      "returns",
      "examples"
    ]
  },
  "technical.adx": {
    "title": "adx",
    "description": "Learn about ADX, a Welles Wilder style moving average of the Directional\n  Movement Index. Understand its calculation, interpretation, and usage with stock\n  data. Explore examples for implementation.",
    "keywords": [
      "ADX",
      "Welles Wilder",
      "moving average",
      "Directional Movement Index",
      "trend",
      "calculation",
      "data",
      "index column",
      "length",
      "scalar value",
      "drift",
      "interpretation",
      "stock data",
      "historical data",
      "examples"
    ]
  },
  "technical.aroon": {
    "title": "aroon",
    "description": "Learn about the Aroon Indicator, a trend indicator in technical analysis.\n  Understand how the Aroon Up and Down lines can help identify upward and downward\n  trends, and how to calculate and use the Aroon Indicator. Includes examples and\n  parameters.",
    "keywords": [
      "Aroon Indicator",
      "Aroon Up and Down",
      "Aroon Indicator explanation",
      "trend indicator",
      "technical analysis",
      "Aroon Indicator usage",
      "Aroon Indicator examples",
      "Aroon Indicator parameters",
      "Aroon Indicator calculation"
    ]
  },
  "technical.atr": {
    "title": "atr",
    "description": "Learn about the Average True Range indicator used to measure volatility\n  in financial data and how to apply it with examples.",
    "keywords": [
      "Average True Range",
      "volatility measurement",
      "gaps",
      "limit moves",
      "data",
      "index column",
      "length",
      "moving average mode",
      "difference period",
      "offset",
      "OBBject",
      "List",
      "examples"
    ]
  },
  "technical.bbands": {
    "title": "bbands",
    "description": "Learn about Bollinger Bands, a popular trading indicator used to identify\n  volatility, overbought or oversold conditions, support and resistance levels, and\n  price targets. Understand how they work, their parameters, and how to use them effectively\n  in your trading strategy.",
    "keywords": [
      "Bollinger Bands",
      "trading indicator",
      "volatility",
      "buy or sell signals",
      "overbought or oversold conditions",
      "support or resistance level",
      "price targets",
      "moving average",
      "standard deviation"
    ]
  },
  "technical.cci": {
    "title": "cci",
    "description": "Learn about the Commodity Channel Index (CCI) and how it can be used\n  to detect market trends, overbought or oversold conditions, and price divergence.\n  This documentation provides an overview of the CCI, its parameters, and its calculation,\n  along with an explanation of the CCI data it returns.",
    "keywords": [
      "Commodity Channel Index",
      "CCI",
      "market trends",
      "trading range",
      "overbought",
      "oversold",
      "price divergence",
      "price correction",
      "data",
      "index column",
      "length",
      "scalar",
      "CCI calculation",
      "CCI data"
    ]
  },
  "technical.cg": {
    "title": "cg",
    "description": "Learn about the Center of Gravity (COG) indicator, how it predicts price\n  movements and reversals, and its use in range-bound markets. Explore the parameters,\n  examples, and how to calculate COG data with OpenBB for technical analysis.",
    "keywords": [
      "center of gravity",
      "COG indicator",
      "price movements",
      "price reversals",
      "oscillators",
      "range-bound markets",
      "upcoming price change",
      "asset trading",
      "data",
      "COG calculation",
      "index column",
      "length",
      "COG data",
      "openbb",
      "equity price historical",
      "stock data",
      "symbol",
      "start date",
      "provider",
      "technical analysis",
      "TSLA"
    ]
  },
  "technical.clenow": {
    "title": "clenow",
    "description": "Learn about Clenow Volatility Adjusted Momentum and how to calculate\n  it using Python code with openbb library. Explore the parameters, examples, and\n  returns of this technical analysis function.",
    "keywords": [
      "Clenow Volatility Adjusted Momentum",
      "Clenow",
      "momentum",
      "data",
      "index column",
      "target column",
      "period",
      "calculation",
      "examples",
      "Python code",
      "openbb",
      "equity",
      "price",
      "historical",
      "symbol",
      "start date",
      "provider",
      "technical analysis",
      "stock data"
    ]
  },
  "technical.cones": {
    "title": "cones",
    "description": "Calculate realized volatility quantiles over rolling windows of time\n  using different volatility models. Understand the parameters and their effects,\n  such as index, quantile values, and is_crypto. Examples and code snippets provided.",
    "keywords": [
      "realized volatility quantiles",
      "rolling windows of time",
      "calculate volatility",
      "parameter data",
      "quantile value",
      "volatility models",
      "standard deviation",
      "Parkinson volatility",
      "Garman-Klass volatility",
      "Hodges-Tompkins volatility",
      "Rogers-Satchell volatility",
      "Yang-Zhang volatility",
      "is_crypto",
      "cones data",
      "code example"
    ]
  },
  "technical.demark": {
    "title": "demark",
    "description": "Learn how to use the Demark sequential indicator function in the OBBject\n  library to analyze stock market data and calculate specific values. See examples\n  of its implementation with the OpenBB package.",
    "keywords": [
      "Demark sequential indicator",
      "data",
      "index",
      "target",
      "show_all",
      "asint",
      "offset",
      "OBBject",
      "List[Data]",
      "calculated data",
      "examples",
      "openbb",
      "equity",
      "price",
      "historical",
      "symbol",
      "start_date",
      "provider",
      "fmp",
      "technical",
      "demark"
    ]
  },
  "technical.donchian": {
    "title": "donchian",
    "description": "Learn about Donchian Channels, an indicator formed by upper and lower\n  bands around a midrange or median band. Explore the parameters, returns, and examples.",
    "keywords": [
      "Donchian Channels",
      "indicator",
      "upper band",
      "lower band",
      "moving average",
      "security",
      "N periods",
      "Donchian Channel",
      "parameters",
      "data",
      "index column",
      "lower length",
      "upper length",
      "offset",
      "returns",
      "examples"
    ]
  },
  "technical.ema": {
    "title": "ema",
    "description": "Learn how to calculate the Exponential Moving Average (EMA) in Python\n  using the openbb library. Understand its benefits as a cumulative calculation and\n  how it maintains data responsiveness. Find details on parameters like data, target\n  column, index column, length, and offset. Get code examples to implement EMA calculations\n  in your projects.",
    "keywords": [
      "Exponential Moving Average",
      "EMA",
      "cumulative calculation",
      "moving average",
      "data responsiveness",
      "parameters",
      "target column",
      "index column",
      "length",
      "offset",
      "calculated data",
      "examples"
    ]
  },
  "technical.fib": {
    "title": "fib",
    "description": "Learn how to create Fibonacci Retracement Levels using the openbb Python\n  library for technical analysis. Apply the Fibonacci indicator to stock data and\n  visualize the results.",
    "keywords": [
      "Fibonacci Retracement Levels",
      "Fibonacci indicator",
      "technical analysis",
      "stock data",
      "Python",
      "data visualization",
      "open source library"
    ]
  },
  "technical.fisher": {
    "title": "fisher",
    "description": "Learn about the Fisher Transform, a technical indicator created by John\n  F. Ehlers that converts prices into a Gaussian normal distribution. This indicator\n  can help identify extreme prices and turning points in asset prices. Discover how\n  to use the Fisher Transform with examples and parameter explanations.",
    "keywords": [
      "Fisher Transform",
      "John F. Ehlers",
      "technical indicator",
      "Gaussian normal distribution",
      "extreme prices",
      "turning points",
      "price waves",
      "trend isolation",
      "indicator parameters",
      "data",
      "index column",
      "Fisher period",
      "Fisher Signal period",
      "indicator application",
      "OBBject",
      "example",
      "stock data",
      "equity",
      "historical price",
      "symbol",
      "start date",
      "data provider"
    ]
  },
  "technical.hma": {
    "title": "hma",
    "description": "Learn about the Hull Moving Average (HMA), a responsive and smooth moving\n  average indicator. Understand how to use the HMA, its parameters, and see examples\n  using the OBBject library.",
    "keywords": [
      "Hull Moving Average",
      "moving average",
      "lag",
      "smoothing",
      "data",
      "target column",
      "index column",
      "length",
      "offset",
      "OBBject",
      "examples",
      "openbb",
      "equity",
      "price",
      "historical",
      "symbol",
      "start date",
      "provider"
    ]
  },
  "technical.ichimoku": {
    "title": "ichimoku",
    "description": "Learn about Ichimoku Cloud, a versatile indicator that defines support\n  and resistance, identifies trend direction, gauges momentum, and provides trading\n  signals. Explore its parameters and usage in Python.",
    "keywords": [
      "Ichimoku Cloud",
      "Ichimoku Kinko Hyo",
      "versatile indicator",
      "support and resistance",
      "trend direction",
      "momentum",
      "trading signals",
      "conversion line",
      "base line",
      "lagging span",
      "Chikou Span Column",
      "data leak"
    ]
  },
  "technical.kc": {
    "title": "kc",
    "description": "Learn how to use Keltner Channels, volatility-based bands used to determine\n  the direction of a trend. This documentation covers the Keltner Channels calculation,\n  breakout signals, and parameters like the moving average mode, length, scalar value,\n  and offset.",
    "keywords": [
      "Keltner Channels",
      "volatility-based bands",
      "direction of a trend",
      "average true range",
      "ATR",
      "breakout signals",
      "Keltner Channels calculation",
      "moving average mode",
      "length of Keltner Channels",
      "scalar value for Keltner Channels",
      "offset for Keltner Channels",
      "Keltner Channels data"
    ]
  },
  "technical.macd": {
    "title": "macd",
    "description": "Learn about the Moving Average Convergence Divergence (MACD), a powerful\n  technical indicator used in financial analysis. Understand how the MACD signals\n  trend changes, identifies overbought and oversold conditions, and generates buy/sell\n  signals. Explore the parameters and see examples of how to use this indicator in\n  Python.",
    "keywords": [
      "Moving Average Convergence Divergence",
      "MACD",
      "Exponential Moving Averages",
      "Signal line",
      "trend changes",
      "overbought conditions",
      "oversold conditions",
      "divergence with price",
      "buy signal",
      "sell signal",
      "zero line",
      "parameters",
      "data",
      "target column",
      "fast EMA",
      "slow EMA",
      "signal EMA",
      "calculated data",
      "examples"
    ]
  },
  "technical.obv": {
    "title": "obv",
    "description": "Learn about On Balance Volume (OBV), a cumulative volume indicator that\n  helps to interpret price moves, identify trends, and determine market trends. This\n  documentation page provides an explanation of how OBV works, its parameters, and\n  a Python example.",
    "keywords": [
      "On Balance Volume",
      "OBV",
      "cumulative volume",
      "up and down volume",
      "running total",
      "price moves",
      "non-confirmed move",
      "rising peaks",
      "falling troughs",
      "strong trend",
      "flat OBV",
      "interpret OBV",
      "how to use OBV",
      "Python example"
    ]
  },
  "technical.rsi": {
    "title": "rsi",
    "description": "Learn about Relative Strength Index (RSI) and how to calculate it. Understand\n  its interpretation as an overbought/oversold indicator and its relevance in identifying\n  price movements and reversals. Explore the various parameters involved in the RSI\n  calculation with practical examples.",
    "keywords": [
      "Relative Strength Index",
      "RSI",
      "oversold indicator",
      "overbought indicator",
      "divergence",
      "price movements",
      "reversal",
      "parameters",
      "data",
      "target",
      "index",
      "length",
      "scalar",
      "drift",
      "examples"
    ]
  },
  "technical.sma": {
    "title": "sma",
    "description": "Learn about the Simple Moving Average and how it can be used to smooth\n  data, eliminate noise, and identify trends. Gain insights into the simple form of\n  moving averages, equal weighting, responsiveness to changes, and filtering data.\n  Understand the parameters involved in the calculation, such as length and offset.",
    "keywords": [
      "Simple Moving Average",
      "moving averages",
      "smoothing data",
      "identify trends",
      "noise elimination",
      "simplest form of moving average",
      "equal weight",
      "responsive to changes",
      "filtering data",
      "data calculation",
      "length parameter",
      "offset parameter"
    ]
  },
  "technical.stoch": {
    "title": "stoch",
    "description": "Learn about the Stochastic Oscillator and its calculation. Understand\n  the parameters, returns, and see examples of how to use it with OpenBB. Improve\n  your page's SEO with this well-researched content.",
    "keywords": [
      "stochastic oscillator",
      "close",
      "trading range",
      "'%D values'",
      "overbought condition",
      "oversold condition",
      "buy signal",
      "sell signal",
      "raw %K",
      "crossover signals",
      "parameters",
      "data",
      "index",
      "fast %K period",
      "slow %D period",
      "slow %K period",
      "returns",
      "stochastic oscillator data",
      "examples",
      "openbb",
      "equity",
      "price",
      "historical",
      "symbol",
      "start date",
      "provider",
      "stock data",
      "stoch data",
      "well-researched",
      "improve page's SEO"
    ]
  },
  "technical.vwap": {
    "title": "vwap",
    "description": "Learn about the Volume Weighted Average Price (VWAP) and how it measures\n  the average typical price by volume. Discover how it can be used with intraday charts\n  to identify general direction. Explore Python examples using the OpenBB OBB package.",
    "keywords": [
      "Volume Weighted Average Price",
      "average typical price by volume",
      "intraday charts",
      "general direction identification",
      "timeseries offset aliases",
      "python examples",
      "openbb obb package"
    ]
  },
  "technical.wma": {
    "title": "wma",
    "description": "Learn about the Weighted Moving Average (WMA) and how it is used to give\n  more weight to recent data. Understand its unique calculation and how it compares\n  to the Simple Moving Average. Find out the parameters for the WMA function, such\n  as the target and index column names, length, and offset. See an example of using\n  the WMA function in Python with the OpenBB library to calculate WMA data for historical\n  stock prices.",
    "keywords": [
      "weighted moving average",
      "WMA",
      "moving average",
      "weighting factor",
      "price",
      "data",
      "calculation",
      "simple moving average",
      "parameters",
      "target column",
      "index column",
      "length",
      "offset",
      "returns",
      "examples",
      "python",
      "openbb",
      "equity",
      "price",
      "historical",
      "symbol",
      "start date",
      "provider",
      "wma data"
    ]
  },
  "technical.zlma": {
    "title": "zlma",
    "description": "Learn about the zero lag exponential moving average (ZLEMA) and how it\n  can be used to perform EMA calculations on de-lagged data. Explore the parameters\n  and get examples of implementing ZLEMA in Python.",
    "keywords": [
      "zero lag exponential moving average",
      "ZLEMA",
      "EMA calculation",
      "de-lagged data",
      "moving average",
      "lagged data",
      "cumulative effect",
      "parameters",
      "target column",
      "index column",
      "length",
      "offset",
      "calculation",
      "calculated data",
      "example"
    ]
  }
}