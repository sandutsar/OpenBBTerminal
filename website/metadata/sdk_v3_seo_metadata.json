{
  "alt.covid.global_cases": {
    "title": "global_cases",
    "description": "The 'global_cases' page provides code and instructions for getting historical\n  Covid-19 case data for any country. Utilize the provided Python function to retrieve\n  a DataFrame of historical data.",
    "keywords": [
      "Covid-19",
      "historical data",
      "openbb.alt.covid.global_cases",
      "global cases",
      "country specific data",
      "programming"
    ]
  },
  "alt.covid.global_deaths": {
    "title": "global_deaths",
    "description": "This page provides understanding about the function 'global_deaths' from\n  OpenBB.terminals used to fetch historical death statistics for a specified country\n  due to covid.",
    "keywords": [
      "OpenBB.terminals",
      "global_deaths",
      "covid",
      "historical death data",
      "python function",
      "dataframe",
      "country specific statistics"
    ]
  },
  "alt.covid.ov": {
    "title": "ov",
    "description": "This documentation page provides detailed information on the 'ov' models\n  used for retrieving historical cases and deaths-by-country data. It also explains\n  the parameters required to run these models, and returns in the form of a DataFrame.",
    "keywords": [
      "docusaurus",
      "ov model",
      "historical data",
      "cases",
      "deaths",
      "country-specific",
      "dataframe",
      "parameters",
      "functions"
    ]
  },
  "alt.covid.slopes": {
    "title": "slopes",
    "description": "Our site offers extensive information on how to use slopes models to\n  analyze COVID-19 data. The models provide detailed data frames based on historical\n  data to help with the analysis and prediction. Learn how to manipulate these models\n  to suit your specific needs.",
    "keywords": [
      "slopes models",
      "COVID-19 data analysis",
      "data frames",
      "historical data",
      "OpenBB finance"
    ]
  },
  "alt.covid.stat": {
    "title": "stat",
    "description": "This page provides a comprehensive guide on how to use two functions,\n  stat and chart, in the OpenBBTerminal for COVID-19 data analysis. They are used\n  for retrieving and visualising historical cases and deaths by country.",
    "keywords": [
      "stat function",
      "chart function",
      "COVID-19 data analysis",
      "historical cases and deaths",
      "Country-wise data",
      "Data visualisation",
      "pandas DataFrame"
    ]
  },
  "alt.oss.github_data": {
    "title": "github_data",
    "description": "This page provides the function 'openbb.alt.oss.github_data' to retrieve\n  repository stats from a specified GitHub API endpoint using Python. It includes\n  a list of parameters for this function and explains what data you will retrieve.",
    "keywords": [
      "github data",
      "repository stats",
      "openbb.alt.oss.github_data",
      "github api endpoint",
      "params",
      "api endpoint",
      "dictionary data"
    ]
  },
  "alt.oss.history": {
    "title": "history",
    "description": "This documentation page provides detailed information about using the\n  openbb software's history feature, with sections for its model and chart display.\n  It illustrates how to retrieve repository star history, search for specific repositories,\n  and plot repo summaries.",
    "keywords": [
      "openbb software",
      "repository star history",
      "github",
      "chart display",
      "repo summary plot",
      "export dataframe",
      "software documentation"
    ]
  },
  "alt.oss.ross": {
    "title": "ross",
    "description": "This documentation page provides detailed information about the 'ross'\n  functions of the OpenBB Terminal. These functions help to retrieve and visualize\n  data about startups from the ROSS index.",
    "keywords": [
      "ross function",
      "data retrieval",
      "startups data",
      "ROSS index",
      "visualization",
      "dataframe",
      "chart",
      "data sort",
      "growth line chart",
      "data export"
    ]
  },
  "alt.oss.search": {
    "title": "search",
    "description": "Discover OpenBB's robust functionality to sort repos by stars or forks,\n  with an additional category filter feature. The result is straightforwardly produced\n  as a DataFrame. Source code available.",
    "keywords": [
      "OpenBB finance",
      "Repo sorter",
      "Star ranking",
      "Fork ranking",
      "Category filter",
      "Python API",
      "Financial data extraction",
      "Dataframe results"
    ]
  },
  "alt.oss.summary": {
    "title": "summary",
    "description": "This documentation page contains comprehensive information on OpenBB's\n  repository summary and chart view options. You can retrieve a summary with OpenBB\n  library and display it in a chart view. Includes source code links and detailed\n  parameter descriptions for usage.",
    "keywords": [
      "Repository Summary",
      "Chart View",
      "Source Code",
      "Github",
      "Docusaurus",
      "API"
    ]
  },
  "alt.oss.top": {
    "title": "top",
    "description": "'This content describes two features: ''Model'' and ''Chart''. ''Model''\n  gets repositories sorted by stars or forks with possible category filtering. ''Chart''\n  plots a repo summary. Both procedures involve parameters like ''sortby'', ''categories'',\n  ''limit'', ''export'', and ''external_axes''.'",
    "keywords": [
      "Documentation",
      "Model",
      "Chart",
      "Repositories",
      "Stars",
      "Forks",
      "Filtering",
      "Parameters",
      "Sortby",
      "Categories",
      "Limit",
      "Export",
      "External_axes"
    ]
  },
  "alt.oss._make_request": {
    "title": "_make_request",
    "description": "This is a documentation page for the '_make_request' helper method used\n  for scraping in Python. The method takes a URL as parameter and returns a BeautifulSoup\n  object or None.",
    "keywords": [
      "make_request",
      "scraping",
      "code",
      "BeautifulSoup",
      "URL",
      "helper method"
    ]
  },
  "alt.oss._retry_session": {
    "title": "_retry_session",
    "description": "The _retry_session function in OpenBBTerminal is a Python helper method\n  that attempts to mount a session given a URL, implementing a retry scheme with parameters\n  for number of retries and a backoff factor. It returns a session object from the\n  requests library.",
    "keywords": [
      "_retry_session",
      "url",
      "retries",
      "backoff_factor",
      "requests.Session",
      "session mount",
      "retry scheme"
    ]
  },
  "crypto.candle": {
    "title": "candle",
    "description": "The page provides documentation for the 'candle' function in the OpenBB\n  crypto module. It describes how a candle chart can be plotted from a provided DataFrame,\n  and the various parameters that can be adjusted.",
    "keywords": [
      "crypto.candle",
      "candle chart",
      "Binance source",
      "Python script",
      "data visualization",
      "OpenBB crypto module",
      "matplotlib",
      "OHLCV"
    ]
  },
  "crypto.chart": {
    "title": "chart",
    "description": "Extend your technical analysis with the OpenBB crypto chart function.\n  This feature allows loading of cryptocurrency data, optional title configuration\n  based on Coin and Currency, and control over plot scale (linear or log). Source\n  code is available.",
    "keywords": [
      "Technical Analysis",
      "OpenBB crypto chart",
      "Cryptocurrency data",
      "matplotlib axes",
      "linear plot scale",
      "log plot scale"
    ]
  },
  "crypto.find": {
    "title": "find",
    "description": "'The page provides the information about a function that can find similar\n  coins by coin name, symbol or id. The tool supports multiple data sources including:\n  CoinGecko, CoinPaprika, Binance, and Coinbase and can return the data in a Pandas\n  DataFrame format.'",
    "keywords": [
      "find similar coin",
      "cryptocurrency",
      "Cryptocurrency search",
      "CoinGecko",
      "CoinPaprika",
      "Binance",
      "Coinbase",
      "Data source of coins",
      "data frame",
      "openbb.crypto.find",
      "Crypto search function"
    ]
  },
  "crypto.load": {
    "title": "load",
    "description": "The documentation page describes the crypto currency load function in\n  OpenBB's Terminal. It helps to get data for any crypto currency by specifying parameters\n  such as symbol, start date, interval, exchange, vs_currency, end_date and the source\n  of the data. It then returns a PD DataFrame with price and volume data.",
    "keywords": [
      "cryptocurrency",
      "crypto load",
      "crypto currency data",
      "parameters",
      "CCXT",
      "CoinGecko",
      "YahooFinance",
      "Binance",
      "PD Dataframe",
      "interval",
      "exchange",
      "vs currency",
      "symbol"
    ]
  },
  "crypto.price": {
    "title": "price",
    "description": "Get the price and confidence interval from the Pyth live feed for any\n  given crypto asset. It also provides the previous price of the asset for comparison.",
    "keywords": [
      "price",
      "confidence interval",
      "Pyth live feed",
      "crypto price",
      "asset price",
      "confidence level",
      "previous price"
    ]
  },
  "crypto.dd.active": {
    "title": "active",
    "description": "Documentation for the activation and visualization of active addresses\n  of a certain cryptocurrency symbol. Explains how to both retrieve and chart data\n  concerning active addresses within specific time frames.",
    "keywords": [
      "cryptocurrency",
      "active addresses",
      "data visualization",
      "docusaurus documentation",
      "due diligence",
      "time intervals",
      "data export"
    ]
  },
  "crypto.dd.all_binance_trading_pairs": {
    "title": "all_binance_trading_pairs",
    "description": "This page provides the function to get all available trading pairs on\n  Binance in DataFrame format with columns including symbol, baseAsset, and quoteAsset.\n  This function does not require any parameters.",
    "keywords": [
      "Binance",
      "Trading pairs",
      "baseAsset",
      "quoteAsset",
      "Crypto Trading"
    ]
  },
  "crypto.dd.balance": {
    "title": "balance",
    "description": "This page provides documentation on the 'balance' functions, enabling\n  users to view account holdings for particular assets. It dives into the specifics\n  of how to use these functions to retrieve data from Binance and display it efficiently.",
    "keywords": [
      "balance functions",
      "account holdings",
      "asset",
      "Binance",
      "cryptocurrency",
      "dataframe",
      "parameters",
      "balance_chart function",
      "export dataframe",
      "USDT"
    ]
  },
  "crypto.dd.basic": {
    "title": "basic",
    "description": "This documentation page provides insights into how to use basic functions\n  of the OpenBB terminal for cryptocurrency tracking and analysis. It also provides\n  source code links and parameters information for two of its functions - 'coinpaprika_model'\n  and 'coinpaprika_view', dealing with basic information retrieval and chart generation\n  for cryptocurrencies respectively.",
    "keywords": [
      "OpenBB terminal",
      "cryptocurrency analysis",
      "coinpaprika_model",
      "basic coin information",
      "coinpaprika_view",
      "cryptocurrency chart generation",
      "cryptocurrency tracking",
      "cryptocurrency parameters",
      "BTC"
    ]
  },
  "crypto.dd.binance_available_quotes_for_each_coin": {
    "title": "binance_available_quotes_for_each_coin",
    "description": "This page provides a detailed guide to the helper methods in OpenBB Terminal\n  that, for every coin available on Binance, add all quote assets. It includes how\n  to use the function and what it will return.",
    "keywords": [
      "Binance",
      "cryptocurrency",
      "quote assets",
      "helper methods",
      "coin",
      "function",
      "parameters",
      "returns"
    ]
  },
  "crypto.dd.candle": {
    "title": "candle",
    "description": "This page provides documentation on how to get or chart candle for a\n  chosen trading pair and time interval on Coinbase using the OpenBB crypto library.\n  It includes the Python code for these functions and the parameters to use.",
    "keywords": [
      "OpenBB crypto library",
      "candle trading pair",
      "time interval",
      "Coinbase",
      "Python function",
      "Cryptocurrency trading",
      "Crypto trading analysis",
      "Cryptocurrency pairs",
      "Trade charting",
      "Data export"
    ]
  },
  "crypto.dd.change": {
    "title": "change",
    "description": "This page provides detailed documentation on how to track the 30-day\n  change in the supply held in exchange wallets using our function 'openbb.crypto.dd.change'.\n  It also includes steps on how to visualize these changes by plotting a chart using\n  the function 'openbb.crypto.dd.change_chart'. The page contains explanations about\n  each function parameter, return types, and default values along with links to the\n  source code.",
    "keywords": [
      "SEO optimization",
      "Metadata",
      "Cryptocurrency Supply Change",
      "Exchange Wallets",
      "OpenBB Crypto DD Change",
      "Plot Change Chart",
      "OpenBB Crypto DD Change Chart",
      "Documentation",
      "Source Code Link"
    ]
  },
  "crypto.dd.check_valid_binance_str": {
    "title": "check_valid_binance_str",
    "description": "Learn about the check_valid_binance_str Python function from OpenBB.\n  This function checks if symbols are defined in binance. Source code provided.",
    "keywords": [
      "binance",
      "symbol",
      "cryptocurrency",
      "due diligence",
      "check_valid_binance_str"
    ]
  },
  "crypto.dd.close": {
    "title": "close",
    "description": "This page details the use of the 'close' function in the OpenBB crypto\n  library which provides the closing price of a cryptocurrency within a specified\n  time range.",
    "keywords": [
      "crypto",
      "cryptocurrency",
      "BTC",
      "ETH",
      "closing price",
      "OpenBB crypto library"
    ]
  },
  "crypto.dd.coin": {
    "title": "coin",
    "description": "This page details how to fetch specific coin data by ID using the CoinPaprika\n  API in the OpenBBTerminal. Use this information to explore the specific parameters\n  and returns.",
    "keywords": [
      "coin",
      "cryptocurrency",
      "CoinPaprika",
      "coin data",
      "API",
      "coin id"
    ]
  },
  "crypto.dd.coin_market_chart": {
    "title": "coin_market_chart",
    "description": "The page provides details about the 'coin_market_chart' function in the\n  OpenBB crypto module. This function fetches and displays coin prices based on specified\n  parameters.",
    "keywords": [
      "coin market chart",
      "cryptocurrency prices",
      "openbb crypto",
      "Python data fetching",
      "coin prices API",
      "data frame",
      "pycoingecko model",
      "currency",
      "coin pricing data"
    ]
  },
  "crypto.dd.eb": {
    "title": "eb",
    "description": "This page provides documentation on how to use the OpenBBTerminal's 'eb'\n  function in cryptocurrency due diligence. Users can return and plot the total amount\n  of coins held on exchange addresses in Python - an essential tool for data analysis\n  in the crypto market.",
    "keywords": [
      "OpenBB finance",
      "OpenBB crypto",
      "Cryptocurrency due diligence",
      "Glassnode model",
      "Glassnode view",
      "Data analysis",
      "Bitcoin",
      "Exchange addresses",
      "EB chart"
    ]
  },
  "crypto.dd.events": {
    "title": "events",
    "description": "The page provides detailed documentation on how to get all events related\n  to a given cryptocurrency like conferences, start date of futures trading. It also\n  provides insights into how to sort, limit and export these events using the OpenBBTerminal\n  methods.",
    "keywords": [
      "cryptocurrency events",
      "cryptocurrency futures trading",
      "cryptocurrency conferences",
      "sorting cryptocurrency data",
      "exporting cryptocurrency data",
      "cryptocurrency",
      "data frame",
      "python cryptocurrency project",
      "CoinPaprika API"
    ]
  },
  "crypto.dd.ex": {
    "title": "ex",
    "description": "This page provides code documentation and examples for retrieving and\n  visualizing data about cryptocurrency exchanges for a given coin, using the CoinPaprika\n  API. The OpenBBTerminal project developed by OpenBB-finance allows sorting the data\n  and exports it for further analysis.",
    "keywords": [
      "cryptocurrency",
      "CoinPaprika",
      "cryptocurrency exchanges",
      "data sort",
      "data visualization",
      "BTC",
      "volume share",
      "data export"
    ]
  },
  "crypto.dd.exchanges": {
    "title": "exchanges",
    "description": "This page provides the guide on how to use the helper method, which gets\n  all the exchanges supported by CCXT.",
    "keywords": [
      "helper method",
      "CCXT",
      "exchanges"
    ]
  },
  "crypto.dd.fr": {
    "title": "fr",
    "description": "Our docusaurus page provides Python functions that return and display\n  crypto coin fundraising data. It deals with launch summary, sales rounds, treasury\n  accounts and metric value launch details. The page also showcases how to export\n  the data to different file formats.",
    "keywords": [
      "Crypto coin fundraising data",
      "Python functions",
      "Launch Summary",
      "Sales rounds",
      "Treasury accounts",
      "Metric value launch details",
      "Export data",
      "Docusaurus page"
    ]
  },
  "crypto.dd.get_mt": {
    "title": "get_mt",
    "description": "This page covers the get_mt function, its usage, parameters and return\n  types. It defines the method to retrieve available messari timeseries in two different\n  views; Model and Chart.",
    "keywords": [
      "get_mt function",
      "messari timeseries",
      "Model",
      "Chart",
      "Source code",
      "query",
      "export dataframe",
      "crypto dd"
    ]
  },
  "crypto.dd.gh": {
    "title": "gh",
    "description": "This is a documentation for GH development activity tool by OpenBB which\n  includes detailed functionality on how to return lists of Github activity for a\n  given cryptocurrency with adjustable time intervals. Source codes for model and\n  chart representations are included.",
    "keywords": [
      "GH tool",
      "developer activity",
      "cryptocurrency",
      "Github activity",
      "time interval",
      "model",
      "chart",
      "dataframe"
    ]
  },
  "crypto.dd.gov": {
    "title": "gov",
    "description": "This page provides functions for retrieving and viewing data on cryptocurrency\n  governance using OpenBB's Gov and Gov Chart functions. Check a crypto symbol's governance\n  and view it in a table or chart format. Also includes option to export data.",
    "keywords": [
      "cryptocurrency",
      "governance",
      "data analysis",
      "python functions",
      "gov function",
      "gov chart function",
      "crypto symbol",
      "data export"
    ]
  },
  "crypto.dd.headlines": {
    "title": "headlines",
    "description": "This documentation page details how to implement sentiment analysis for\n  financial asset symbols using FinBrain's API through the OpenBB Terminal's Python\n  protocols. It explains the parameters and returns for two functions that handle\n  model and chart views, showing raw table data and enabling exportation.",
    "keywords": [
      "sentiment analysis",
      "financial assets",
      "ticker symbols",
      "FinBrain's API",
      "Python protocols",
      "model view",
      "chart view",
      "raw table data",
      "exportation"
    ]
  },
  "crypto.dd.inv": {
    "title": "inv",
    "description": "Our inv function provides an overview of coin investors. It provides\n  a comprehensive list of individual and organizational investors for a specific cryptocurrency.\n  Additionally, our inv chart function prints a table of these coin investors and\n  offers the option of exporting this data to various file formats.",
    "keywords": [
      "coin investors",
      "cryptocurrency",
      "investors",
      "docusaurus page SEO",
      "functions",
      "crypto symbols",
      "data export",
      "csv",
      "json",
      "xlsx",
      "due diligence",
      "messari model",
      "messari view"
    ]
  },
  "crypto.dd.links": {
    "title": "links",
    "description": "'This documentation page includes instructions on how to use two specific\n  functions: ''links'' and ''links_chart'', part of OpenBB''s crypto asset due diligence\n  utilities. These functions help users understand and demonstrate how to handle crypto\n  asset links using Python within the OpenBB terminal.'",
    "keywords": [
      "OpenBB crypto due diligence",
      "Crypto asset links utility",
      "Python cryptocurrency utilities",
      "Crypto symbol link checking",
      "Dataframe export to CSV, JSON, XLS",
      "External axes in Python"
    ]
  },
  "crypto.dd.mcapdom": {
    "title": "mcapdom",
    "description": "Documentation for mcapdom function in OpenBBTerminal Python package,\n  providing the tools to retrieve and visualize market dominance data for any given\n  cryptocurrency over time. The page describes parameters, return values and provides\n  direct links to the source code.",
    "keywords": [
      "mcapdom",
      "market dominance",
      "crypto dominance",
      "crypto symbol",
      "market cap dominance chart",
      "OpenBB Python functions",
      "cryptocurrency due diligence",
      "cryptocurrency market data",
      "cryptocurrency trading analysis",
      "financial data visualization",
      "python finance",
      "cryptocurrency interval data"
    ]
  },
  "crypto.dd.mkt": {
    "title": "mkt",
    "description": "An extensive guide and source code for working with cryptocurrency market\n  data from the CoinPaprika API using Python with OpenBB finance. It includes sections\n  on how to fetch all markets for a given cryptocurrency and print tables that display\n  market information.",
    "keywords": [
      "CoinPaprika API",
      "cryptocurrency market data",
      "OpenBB finance",
      "cryptocurrency",
      "data fetching",
      "market tables"
    ]
  },
  "crypto.dd.mt": {
    "title": "mt",
    "description": "The page includes details about different functions used in cryptocurrency\n  due diligence, specifically handling and plotting Messari timeseries data. This\n  includes parameters and return values for each function, including the crypto symbol,\n  timeseries_id, interval frequency, start and end date. Also discusses exporting\n  these dataframes and using matplotlib for visualizing data.",
    "keywords": [
      "messari_timeseries",
      "crypto_symbol",
      "timeseries_id",
      "start_date",
      "end_date",
      "interval_frequency",
      "export_dataframe",
      "cryptocurrency_due_diligence",
      "openbb_terminal",
      "OpenBB-finance",
      "matplotlib"
    ]
  },
  "crypto.dd.news": {
    "title": "news",
    "description": "Detailed information on how to fetch recent cryptocurrency posts from\n  CryptoPanic news aggregator using OpenBB in Python. Also, understand about the news\n  filtering parameters available and how to display the news content.",
    "keywords": [
      "CryptoPanic",
      "News Aggregator",
      "News Filtering",
      "Python Code",
      "Cryptocurrency News",
      "Github Source Code"
    ]
  },
  "crypto.dd.nonzero": {
    "title": "nonzero",
    "description": "Documentation page for OpenBB's nonzero function and nonzero_chart function.\n  These functions are used to retrieve addresses with a non-zero balance of a certain\n  symbol and plot them respectively.",
    "keywords": [
      "nonzero function",
      "nonzero_chart function",
      "addresses with non-zero balance",
      "cryptocurrency",
      "dataframe",
      "BTC",
      "chart plotting",
      "export data",
      "due diligence"
    ]
  },
  "crypto.dd.ob": {
    "title": "ob",
    "description": "This documentation page provides detailed information about operation\n  of generating and viewing order book for a coin in a given exchange using OpenBB\n  library. Learn about the parameters required and the response for each function\n  call.",
    "keywords": [
      "orderbook",
      "openbb.crypto.dd",
      "cryptocurrency",
      "coin exchange",
      "ob",
      "ob_chart",
      "coin symbol",
      "exchange id",
      "crypto trading",
      "matplotlib.axes._axes.Axes"
    ]
  },
  "crypto.dd.oi": {
    "title": "oi",
    "description": "This page deals with open interest (OI) in cryptocurrency using OpenBB\n  terminal. The models and charts displaying open interest by exchange, frequency\n  and crypto symbol (BTC for instance) are available. You can also review the source\n  code and instructions on how to use related Python functions.",
    "keywords": [
      "OI",
      "Open Interest",
      "crypto",
      "symbol",
      "crypto symbol",
      "cryptocurrency",
      "exchange",
      "price",
      "frequency",
      "model",
      "chart",
      "parameter",
      "View",
      "Source Code",
      "dataframe",
      "BTC",
      "return",
      "export",
      "openbb.crypto.dd.oi",
      "openbb.crypto.dd.oi_chart"
    ]
  },
  "crypto.dd.pi": {
    "title": "pi",
    "description": "Details about the PI function used in OpenBB crypto due diligence. It\n  covers aspects like fetching coin product info and presenting it as tables and charts.\n  Also, includes links to the source code.",
    "keywords": [
      "Cryptocurrency",
      "Due Diligence",
      "pi Function",
      "Project Info",
      "Tables",
      "Charts",
      "Docusaurus",
      "Metadata",
      "Source Code",
      "Github"
    ]
  },
  "crypto.dd.pr": {
    "title": "pr",
    "description": "The documentation explains how to leverage APIs for calculating and comparing\n  potential returns of cryptocurrencies. It details requirements and parameters for\n  two functions - fetching data for potential returns calculation and function to\n  record these returns.",
    "keywords": [
      "cryptocurrency",
      "potential returns",
      "coin comparison",
      "fetch data",
      "APIs usage",
      "python functions",
      "coin calculation",
      "pr model",
      "pr chart",
      "CoinGecko source"
    ]
  },
  "crypto.dd.ps": {
    "title": "ps",
    "description": "This page includes an overview of the OpenBB Terminal cryptocurrency\n  functions ps and ps_chart. The ps function obtains ticker-related information for\n  a given cryptocurrency and the ps_chart function visualizes trading data for a particular\n  cryptocurrency. The documentation is inclusive of source code, input parameters,\n  and expected returns.",
    "keywords": [
      "Cryptocurrency",
      "CoinPaprika API",
      "Python programming",
      "Market ticker related information",
      "Cryptocurrency symbols",
      "Crypto trading data",
      "Cryptocurrency chart",
      "Data export",
      "CSV",
      "JSON",
      "XSLX"
    ]
  },
  "crypto.dd.rm": {
    "title": "rm",
    "description": "The page consists of two main components or features. Initially, it details\n  a function designed to return the roadmap for each individual cryptocurrency, explaining\n  how data can be sorted and what the output will look like. Later, it describes a\n  function aimed at plotting the roadmap for each cryptocurrency, including details\n  on the parameters users will need to understand and adjust for the purpose of the\n  function.",
    "keywords": [
      "cryptocurrency",
      "roadmap",
      "data sorting",
      "function parameters",
      "plotting",
      "matplotlib",
      "crypto symbol",
      "python programming",
      "dataframe",
      "reverse order",
      "export data"
    ]
  },
  "crypto.dd.show_available_pairs_for_given_symbol": {
    "title": "show_available_pairs_for_given_symbol",
    "description": "Documentation on the function of showing available pairs for a given\n  symbol in the OpenBB crypto framework at Coinbase. Default symbol is 'ETH'. Other\n  symbols include BTC, UNI, LUNA, DOT and more.",
    "keywords": [
      "crypto",
      "BTC",
      "ETH",
      "UNI",
      "LUNA",
      "DOT",
      "coinbase",
      "available pairs",
      "symbol"
    ]
  },
  "crypto.dd.stats": {
    "title": "stats",
    "description": "Discover the statistics module of openbb.crypto.dd using symbol trading\n  pair and explore the possibility of exporting data to desired file format. Find\n  detailed parameters and return values to improve your experience.",
    "keywords": [
      "crypto stats",
      "coinbase trading",
      "data export",
      "API parameters",
      "dataframe",
      "crypto trading",
      "base currency",
      "ETH-USDT",
      "UNI-ETH"
    ]
  },
  "crypto.dd.team": {
    "title": "team",
    "description": "This page provides documentation on functions used to retrieve and visualize\n  information about the team behind a specific cryptocurrency. These functions provide\n  details on individuals and organizations involved in the coin selected, with options\n  for exporting the data.",
    "keywords": [
      "cryptocurrency",
      "team information",
      "data visualization",
      "OpenBB crypto",
      "crypto team analysis",
      "Python functions",
      "export data",
      "crypto due diligence"
    ]
  },
  "crypto.dd.tk": {
    "title": "tk",
    "description": "This page provides documentation for the tk model and chart functions\n  from the openbb.crypto.dd library. The model function returns coin tokenomics for\n  a specific cryptocurrency while the chart function plots the same.",
    "keywords": [
      "cryptocurrency",
      "tokenomics",
      "openbb.crypto.dd",
      "coin tokenomics",
      "coin tokenomics plot",
      "programming",
      "function documentation"
    ]
  },
  "crypto.dd.tokenomics": {
    "title": "tokenomics",
    "description": "Documentation page for the tokenomics function in OpenBBTerminal's cryptocurrency\n  due diligence module. This Python method takes a coin symbol and gives back the\n  tokenomics for that coin.",
    "keywords": [
      "tokenomics",
      "coin",
      "cryptocurrency",
      "pycoingecko_model",
      "crypto",
      "dd",
      "symbol",
      "coin symbol",
      "tokenomics source code",
      "Metric",
      "Value"
    ]
  },
  "crypto.dd.trades": {
    "title": "trades",
    "description": "Documentation of 'trades' in OpenBB.finance. It includes various functions\n  for obtaining and displaying trades for a coin in a given exchange. It covers both\n  the model and view and provides detailed description of each parameter involved.",
    "keywords": [
      "trades",
      "exchange",
      "coin",
      "currency",
      "symbol",
      "OpenBB.finance",
      "ccxt model",
      "ccxt view",
      "trade chart",
      "crypto"
    ]
  },
  "crypto.dd.trading_pairs": {
    "title": "trading_pairs",
    "description": "Information and code snippet on how to get all trading pairs on binance\n  using openbb.crypto.dd.trading_pairs(). Details parameters and returns.",
    "keywords": [
      "trading pairs",
      "binance",
      "openbb.crypto.dd",
      "cryptocurrency",
      "due diligence",
      "openbb terminal",
      "trading parameters",
      "API",
      "ETHBTC symbol",
      "trading functionality"
    ]
  },
  "crypto.dd.trading_pair_info": {
    "title": "trading_pair_info",
    "description": "The trading_pair_info page provides a detailed guide on how to get essential\n  trading pair information from Coinbase using the OpenBB API. The tool supports all\n  significant trading pairs such as ETH-USDT and UNI-ETH. Retrieve the needed data\n  in a convenient DataFrame format. Check out the source code to learn more.",
    "keywords": [
      "trading pair info",
      "coinbase",
      "crypto trading",
      "cryptocurrency trading",
      "API",
      "ETH-USDT",
      "UNI-ETH",
      "dataframe",
      "due diligence"
    ]
  },
  "crypto.dd.twitter": {
    "title": "twitter",
    "description": "Learn how to implement twitter functions for cryptocurrency through our\n  OpenBB Terminal documentation. Access information such as code usage, parameters,\n  return types etc.",
    "keywords": [
      "Cryptocurrency",
      "Twitter",
      "Code Documentation",
      "Sort Data",
      "CSV",
      "JSON",
      "XLSX",
      "Export Dataframe",
      "CoinPaprika API"
    ]
  },
  "crypto.defi.anchor_data": {
    "title": "anchor_data",
    "description": "Improve your understanding of the Anchor protocol with the help of our\n  documentation providing detailed instructions on how to retrieve and plot earnings\n  data for a specific Terra address. Skim through the parameters, the types, the given\n  descriptions, and the functionality.",
    "keywords": [
      "docusaurus",
      "anchor protocol",
      "earnings data",
      "terra address",
      "parameters",
      "returns",
      "model",
      "view chart",
      "plot",
      "transactions history",
      "export"
    ]
  },
  "crypto.defi.aterra": {
    "title": "aterra",
    "description": "This document provides information about how to fetch historical data\n  for a specific Terra asset, plot the 30-day history of that asset and explains the\n  usage of each function. Also includes source code links.",
    "keywords": [
      "Terra assets",
      "historical data",
      "address",
      "GET request",
      "Draw chart",
      "aterra",
      "meta data",
      "parameters",
      "returns"
    ]
  },
  "crypto.defi.ayr": {
    "title": "ayr",
    "description": "This documentation page provides a detailed overview of the Anchor Yield\n  Reserve's 30-day history. It provides the source code and usage for the `ayr` and\n  `ayr_chart` functions from the `openbb.crypto.defi` namespace, including parameters\n  and returns.",
    "keywords": [
      "docusaurus",
      "metadata page",
      "Anchor Yield Reserve",
      "crypto",
      "defi",
      "ayr",
      "ayr_chart",
      "crypto.defi",
      "matplotlib",
      "dataframe",
      "parameters",
      "returns",
      "30-day history"
    ]
  },
  "crypto.defi.dtvl": {
    "title": "dtvl",
    "description": "This page of the documentation provides information about OpenBB's dtvl\n  model and view functions. The model function returns details about the historical\n  Total Value Locked (TVL) of a specified DeFi protocol, while the view function allows\n  for the plotting of TVL data across various decentralized applications (dApps).",
    "keywords": [
      "dtvl model",
      "dtvl view",
      "DeFi protocol",
      "historical TVL",
      "decentralized applications",
      "dApps",
      "crypto",
      "dataframe",
      "matplotlib",
      "export data",
      "function parameters",
      "digital assets",
      "crypto analytics"
    ]
  },
  "crypto.defi.gacc": {
    "title": "gacc",
    "description": "A detailed insight into the gacc function of Terra Blockchain. This documentation\n  shows how to effectively fetch Terra blockchain account growth history and how to\n  plot the related charts using openbb.crypto.defi.",
    "keywords": [
      "Terra Blockchain",
      "Account growth history",
      "openbb.crypto.defi",
      "gacc function",
      "Plotting blockchain data",
      "Cryptocurrency",
      "Crypto defi",
      "Blockchain technology"
    ]
  },
  "crypto.defi.gdapps": {
    "title": "gdapps",
    "description": "This page presents features such as the displaying and plotting of top\n  dApps by TVL, which are part of the DeFi module of the openbb crypto module. Detailed\n  guides on how to use these features with service parameters such as limit, export\n  type, and others are included. Links to source code are also provided.",
    "keywords": [
      "dApps",
      "TVL",
      "gdapps",
      "openbb.crypto.defi",
      "DeFi protocols",
      "Chart",
      "matplotlib",
      "Export dataframe",
      "Source code"
    ]
  },
  "crypto.defi.gov_proposals": {
    "title": "gov_proposals",
    "description": "Docusaurus page about Terra blockchain governance proposals, detailing\n  parameters and functionalities such as sorting, ascending/descending and exporting\n  data. Includes links to original source and GitHub source.",
    "keywords": [
      "Terra Blockchain",
      "Governance Proposals",
      "Sorting Data",
      "Ascending",
      "Descending",
      "Exporting Data",
      "Source Code",
      "Docusaurus Page SEO"
    ]
  },
  "crypto.defi.ldapps": {
    "title": "ldapps",
    "description": "This page provides documentation for ldapps functions used in the OpenBB\n  finance terminal. These functions retrieve and display information about listed\n  DeFi protocols, their current Total Valued Locked (TVL), and changes to it.",
    "keywords": [
      "DeFi protocols",
      "ldapps",
      "dApps",
      "cryptocurrency",
      "Total Valued Locked (TVL)",
      "dataframe"
    ]
  },
  "crypto.defi.luna_supply": {
    "title": "luna_supply",
    "description": "'Luna Supply documentation: Features two functions that offer supply\n  history data of the Terra ecosystem, in both numerical (DataFrame) and visual (Chart)\n  formats. Each function has customisable parameters providing flexibility to users.'",
    "keywords": [
      "Luna supply",
      "Terra ecosystem",
      "Supply history data",
      "Chart",
      "Supply type",
      "Day count",
      "Export type",
      "Result limit",
      "External axes"
    ]
  },
  "crypto.defi.newsletters": {
    "title": "newsletters",
    "description": "This page provides an understanding of how to scrape all substack newsletters\n  related to DeFi from a list of urls, and how to print a table of these newsletters.\n  Users can also learn how to limit the number of records displayed and export the\n  data to different file formats.",
    "keywords": [
      "Substack newsletters scrape",
      "DeFi related newsletters",
      "openbb.crypto.defi.newsletters()",
      "Display newsletters table",
      "Limit records",
      "Export data",
      "openbb.crypto.defi.newsletters_chart()"
    ]
  },
  "crypto.defi.sinfo": {
    "title": "sinfo",
    "description": "Learn how to get staking info for a given Terra account using OpenBB's\n  API. Explore functionality like viewing luna delegations and summary reports for\n  the chosen address, displaying staking info for the provided Terra account address,\n  and exporting dataframe data to csv, json, or xlsx file.",
    "keywords": [
      "Terra blockchain",
      "staking info",
      "luna delegations",
      "summary report",
      "export to csv",
      "export to json",
      "export to xlsx",
      "defi",
      "cryptocurrency",
      "dataframe"
    ]
  },
  "crypto.defi.sratio": {
    "title": "sratio",
    "description": "This page provides a detailed guide on how to use OpenBB finance's sratio\n  and sratio_chart functions. These functions retrieve and plot staking ratio history\n  from terra blockchain which can be useful for DeFi applications.",
    "keywords": [
      "terra blockchain",
      "staking ratio history",
      "OpenBB finance",
      "openbb crypto defi",
      "sratio function",
      "dataframe",
      "matplotlib"
    ]
  },
  "crypto.defi.sreturn": {
    "title": "sreturn",
    "description": "Get terra blockchain staking returns history",
    "keywords": [
      "blockchain",
      "terra",
      "staking",
      "defi"
    ]
  },
  "crypto.defi.stvl": {
    "title": "stvl",
    "description": "'The documentation explores the stvl functionality: a tool for returning\n  and plotting historical values of the total sum of Total Value Locked (TVL) from\n  all listed protocols. Source code links are included.'",
    "keywords": [
      "stvl",
      "Total Value Locked",
      "cryptocurrency",
      "historical values",
      "OpenBB-terminal",
      "defi",
      "dataframe",
      "plotting",
      "export",
      "returns",
      "protocols"
    ]
  },
  "crypto.defi.validators": {
    "title": "validators",
    "description": "The page details the usage and parameters of two functions that work\n  with 'validators' in the terra system. The 'validators' function provides terra\n  validators details while the 'validators_chart' function sorts data and provides\n  the option to export dataframe data.",
    "keywords": [
      "validators",
      "terra validators",
      "terramoney_fcd_model",
      "openbb.crypto.defi",
      "votingPower",
      "voting Power",
      "terra validators details",
      "validators chart",
      "sorting data",
      "key by which to sort data",
      "terramoney_fcd_view",
      "export dataframe data"
    ]
  },
  "crypto.defi.vaults": {
    "title": "vaults",
    "description": "This page provides detailed information on DeFi Vaults including functions\n  to get data and tools to visualize this data. The provided functions allow querying\n  various blockchains and DeFi protocols, and sorting by key metrics such as APY.",
    "keywords": [
      "DeFi Vaults Information",
      "openbb.crypto.defi.vaults",
      "openbb.crypto.defi.vaults_chart",
      "Blockchain",
      "DeFi protocol",
      "Kind of vault",
      "APY",
      "ethereum",
      "polygon",
      "avalanche",
      "bsc",
      "terra",
      "fantom",
      "moonriver",
      "celo",
      "heco",
      "okex",
      "cronos",
      "arbitrum",
      "eth",
      "harmony",
      "fuse",
      "defichain",
      "solana",
      "optimism",
      "aave",
      "acryptos",
      "alpaca",
      "anchor",
      "autofarm",
      "balancer",
      "bancor",
      "beefy",
      "belt",
      "compound",
      "convex",
      "cream",
      "curve",
      "defichain",
      "geist",
      "lido",
      "liquity",
      "mirror",
      "pancakeswap",
      "raydium",
      "sushi",
      "tarot",
      "traderjoe"
    ]
  },
  "crypto.disc.categories_keys": {
    "title": "categories_keys",
    "description": "This page provides documentation on the 'categories_keys' function from\n  OpenBB, which retrieves a list of categories keys in the cryptocurrency domain.",
    "keywords": [
      "categories_keys",
      "cryptocurrency",
      "category keys",
      "crypto categories",
      "function"
    ]
  },
  "crypto.disc.coins": {
    "title": "coins",
    "description": "This page documents the functions for retrieving and displaying cryptocurrency\n  coin data using the OpenBB Terminal. The main categories explained are 'model' and\n  'view', each with descriptions of available parameters and returns.",
    "keywords": [
      "docusaurus",
      "metadata",
      "cryptocurrency",
      "CoinGecko",
      "coins data",
      "dataframe",
      "model",
      "view",
      "sort data",
      "export data",
      "coins chart"
    ]
  },
  "crypto.disc.coins_for_given_exchange": {
    "title": "coins_for_given_exchange",
    "description": "The documentation page for the helper method openbb.crypto.disc.coins_for_given_exchange()\n  for getting all coins available on binance exchange sourced from CoinGecko. Information\n  includes parameters, returns and source code.",
    "keywords": [
      "cryptocurrency",
      "openbb.crypto.disc.coins_for_given_exchange",
      "binance",
      "CoinGecko",
      "trading pairs",
      "page paging"
    ]
  },
  "crypto.disc.coin_list": {
    "title": "coin_list",
    "description": "Technical documentation on how to get a list of coins available on CoinGecko\n  using the OpenBBTerminal. It includes parameters and returns in form of a pd.DataFrame.",
    "keywords": [
      "Coin List",
      "CoinGecko",
      "Source Code",
      "Cryptocurrency",
      "Discovery",
      "pycoingecko_model"
    ]
  },
  "crypto.disc.cpsearch": {
    "title": "cpsearch",
    "description": "Documentation for 'cpsearch', a cryptocurrency discovery function in\n  OpenBBTerminal using the CoinPaprika API. This page provides details about parameters,\n  source code links and data return types.",
    "keywords": [
      "docusaurus",
      "cpsearch",
      "coinPaprika",
      "cryptocurrency",
      "search",
      "crypto discovery",
      "search parameters",
      "coinPaprika API",
      "data analytics"
    ]
  },
  "crypto.disc.gainers": {
    "title": "gainers",
    "description": "The page provides functionalities regarding Largest Gainers in cryptocurrency,\n  powered by CoinGecko's API. It contains Python models and charts to display the\n  coins which gain the most in a given period. Additionally, it provides details on\n  how to sort and display data, and export data to different file formats.",
    "keywords": [
      "gainers",
      "crypto",
      "coingecko",
      "model",
      "chart",
      "dataframe",
      "price",
      "volume",
      "export"
    ]
  },
  "crypto.disc.losers": {
    "title": "losers",
    "description": "The 'Losers' page on OpenBBTerminal provides functions that allow users\n  to find out which cryptocurrencies suffered the largest losses during a given time\n  period. Documentation includes information on parameters, return types, and source\n  code.",
    "keywords": [
      "Cryptocurrency",
      "Losers",
      "Price changes",
      "CoinGecko",
      "API",
      "Crypto analysis"
    ]
  },
  "crypto.disc.top_coins": {
    "title": "top_coins",
    "description": "This OpenBBTerminal page provides insights on how to get top crypto coins\n  from sources like CoinGecko and CoinMarketCap using the 'openbb.crypto.disc.top_coins'\n  function. Parameters, return types, and usage examples are clearly illustrated.",
    "keywords": [
      "top cryptp coins",
      "CoinGecko",
      "openbb.crypto.disc.top_coins",
      "parameters",
      "returns",
      "examples",
      "CoinMarketCap",
      "limit parameter"
    ]
  },
  "crypto.disc.top_dapps": {
    "title": "top_dapps",
    "description": "This documentation page provides detailed instructions on how to get\n  top decentralized applications by daily volume and users. Also includes code for\n  creating and displaying a chart of such applications.",
    "keywords": [
      "docusaurus page",
      "top decentralized applications",
      "Metadata",
      "daily volume",
      "daily users",
      "chart",
      "cryptocurrency",
      "dataframe",
      "data sorting",
      "DappRadar",
      "export dataframe"
    ]
  },
  "crypto.disc.top_dexes": {
    "title": "top_dexes",
    "description": "The 'top_dexes' page contains information and source code for obtaining\n  and viewing decentralized exchange data, including daily volume and users. The first\n  tab shows a model for getting top dexes by specified parameters, while the second\n  tab displays a function that prints this data in tabular format.",
    "keywords": [
      "dexes",
      "decetralized exchange",
      "daily volume",
      "data model",
      "data view",
      "dappradar"
    ]
  },
  "crypto.disc.top_games": {
    "title": "top_games",
    "description": "This page is about the 'top_games' function that fetches the top blockchain\n  games based on daily volume and users. It provides information about the parameters\n  needed for the function, its source code and what the function will return.",
    "keywords": [
      "blockchain games",
      "daily volume",
      "daily users",
      "parameters",
      "data sorting",
      "data limit",
      "data export",
      "OpenBB crypto"
    ]
  },
  "crypto.disc.top_nfts": {
    "title": "top_nfts",
    "description": "Learn how to get and sort top NFT collections data by using OpenBB crypto\n  discovery tools. Source code, and parameters for customization are provided.",
    "keywords": [
      "nfts",
      "Top NFTs",
      "crypto",
      "cryptocurrency",
      "DappRadar",
      "crypto discovery",
      "NFT collections"
    ]
  },
  "crypto.disc.trending": {
    "title": "trending",
    "description": "This page provides detailed information on trending coins. Users can\n  learn how to return and view a table of trending coins from CoinGecko using OpenBB's\n  Python functions.",
    "keywords": [
      "CoinGecko",
      "trending coins",
      "Python functions",
      "cryptocurrency",
      "crypto trends",
      "dataframe"
    ]
  },
  "crypto.nft.collections": {
    "title": "collections",
    "description": "This documentation page provides methods to get NFT collections, its\n  source code and ways to visualize the data via charts. The content primarily revolves\n  around usage, parameters, and the return type of the functions.",
    "keywords": [
      "Docusaurus",
      "Marketing",
      "NFT",
      "Collections",
      "Chart",
      "nftpricefloor"
    ]
  },
  "crypto.nft.fp": {
    "title": "fp",
    "description": "The page provides detailed documentation on the functionality of nftpricefloor\n  model and view. The model helps to fetch NFT collections and the view function displays\n  the collection's floor price overtime.",
    "keywords": [
      "NFT collection",
      "nftpricefloor",
      "openbb.crypto.nft.fp",
      "openbb.crypto.nft.fp_chart",
      "Data Visualization",
      "Data Modelling"
    ]
  },
  "crypto.nft.stats": {
    "title": "stats",
    "description": "This page consists of detailed guidelines on how to utilise stats and\n  stats_chart functions. It shows how one can leverage these functions to get NFT\n  collection stats and print tables showcasing these stats, respectively sourced from\n  opensea.io.",
    "keywords": [
      "stats function",
      "stats_chart function",
      "NFT collection stats",
      "OpenSea data",
      "NFT data",
      "slug",
      "data export"
    ]
  },
  "crypto.onchain.baas": {
    "title": "baas",
    "description": "The 'baas' page details how to get average bid and ask prices, as well\n  as the average spread for a given crypto pair over a chosen time period in OpenBBTerminal.\n  It explains how to use various parameters for sorting and exporting data.",
    "keywords": [
      "baas",
      "crypto pair",
      "average bid and ask prices",
      "average spread",
      "time period",
      "ERC20 token symbol",
      "Quoted currency",
      "sort data",
      "data ascending",
      "Export dataframe"
    ]
  },
  "crypto.onchain.balance": {
    "title": "balance",
    "description": "This page provides information on how to use OpenBB's onchain tools for\n  interacting with the Ethereum blockchain. It includes instructions on how to get\n  information about token balances and displaying this information in a chart format.\n  Relevant Python code is also provided.",
    "keywords": [
      "Docusaurus",
      "Onchain",
      "ethplorer",
      "Ethereum blockchain",
      "Blockchain balance",
      "Tokens",
      "ETH balance",
      "Source code"
    ]
  },
  "crypto.onchain.btc_supply": {
    "title": "btc_supply",
    "description": "This documentation page provides codes and guidelines on how to obtain\n  information about the circulating supply of Bitcoin (BTC) through OpenBBTerminal's\n  onchain modules. It details the function to use, parameters needed, and the expected\n  returns.",
    "keywords": [
      "Bitcoin circulating supply",
      "BTC supply",
      "Blockchain information",
      "Cryptocurrency",
      "Onchain",
      "Data",
      "API",
      "Source code",
      "Function",
      "Parameters",
      "Returns"
    ]
  },
  "crypto.onchain.btc_transac": {
    "title": "btc_transac",
    "description": "This documentation page provides code and information about retrieving\n  and visualizing BTC confirmed transactions using OpenBB. It includes python code\n  and detailed parameters' description for the functions.",
    "keywords": [
      "BTC confirmed transactions",
      "API",
      "blockchain.info",
      "Data Export",
      "Data Visualization",
      "crypto.onchain.btc_transac",
      "crypto.onchain.btc_transac_chart"
    ]
  },
  "crypto.onchain.dex_trades_monthly": {
    "title": "dex_trades_monthly",
    "description": "Provides access to aggregated data of trades executed on Decentralized\n  Exchanges. You can set the currency of trade amount, limit the number of days and\n  even sort the data as required.",
    "keywords": [
      "dex_trades_monthly",
      "Decentralized Exchanges",
      "Trades data",
      "openbb_crypto_onchain",
      "trade_amount_currency",
      "USD",
      "limit",
      "ascend"
    ]
  },
  "crypto.onchain.dvcp": {
    "title": "dvcp",
    "description": "This documentation page contains information about dvcp, a function from\n  the OpenBB framework that provides data about the daily volume of a specific cryptocurrency\n  pair. Both the data model and a chart view are presented. The documentation includes\n  source code links, detailed information about parameters and returned data.",
    "keywords": [
      "dvcp",
      "cryptocurrency",
      "daily volume",
      "ERC20 token",
      "data model",
      "chart view",
      "parameters",
      "returned data"
    ]
  },
  "crypto.onchain.erc20_tokens": {
    "title": "erc20_tokens",
    "description": "This page provides a helper method that loads the most traded erc20 tokens.\n  It contains source code, parameters and returns for the OpenBBTerminal project's\n  cryptocurrency bitquery model.",
    "keywords": [
      "erc20 tokens",
      "most traded erc20 token",
      "cryptocurrency",
      "bitquery model",
      "OpenBBFinance",
      "token address",
      "token symbol",
      "token name"
    ]
  },
  "crypto.onchain.gwei": {
    "title": "gwei",
    "description": "This documentation page details the 'gwei' functionality of OpenBB's\n  crypto onchain operations. It contains code snippets and function descriptions for\n  retrieving Ethereum gas fees data, along with export methods for the same.",
    "keywords": [
      "crypto onchain operations",
      "gwei",
      "Ethereum gas fees data",
      "data export",
      "Source Code",
      "function documentation",
      "onchain data"
    ]
  },
  "crypto.onchain.hist": {
    "title": "hist",
    "description": "This page provides detailed information on how to retrieve and display\n  information about balance historical transactions using OpenBB's crypto.onchain\n  functionality. Learn how to use On-chain model's parameters to sort and limit transactions\n  as required for Ethplorer, including the export of data.",
    "keywords": [
      "OpenBB Crypto OnChain",
      "Blockchain balance",
      "Historical transactions",
      "OnChain Model",
      "OnChain View",
      "Ethplorer",
      "Balance historical transactions",
      "Sort by timestamp",
      "Sort in ascending order",
      "export dataframe to file",
      "Crypto"
    ]
  },
  "crypto.onchain.holders": {
    "title": "holders",
    "description": "This documentation page provides insights on obtaining and displaying\n  the top token holder information using Ethplorer. It explains the crypto-onchain\n  methods used for data extraction and its process.",
    "keywords": [
      "crypto onchain",
      "Ethplorer",
      "token holders",
      "ERC20 tokens",
      "data extraction",
      "data frame",
      "data processing",
      "data visualization"
    ]
  },
  "crypto.onchain.hr": {
    "title": "hr",
    "description": "The hr Tab provides functionalities to return a dataframe with the mean\n  hashrate of either btc or eth blockchain along with the symbol's price, over a specified\n  interval. Additionally, the hr_chart function provides the ability to plot this\n  data as a chart.",
    "keywords": [
      "OpenBB.crypto.onchain.hr",
      "OpenBB.crypto.onchain.hr_chart",
      "mean hashrate",
      "blockchain",
      "btc",
      "eth",
      "symbol price",
      "dataframe",
      "plot",
      "chart"
    ]
  },
  "crypto.onchain.info": {
    "title": "info",
    "description": "This documentation page provides information and source code regarding\n  getting info about ERC20 tokens, and displaying it. Covered aspects include related\n  parameters and returns.",
    "keywords": [
      "ERC20 token info",
      "Ethplorer",
      "parameters",
      "returns",
      "OpenBB finance",
      "cryptocurrency",
      "onchain"
    ]
  },
  "crypto.onchain.lt": {
    "title": "lt",
    "description": "Docusaurus page containing OpenBBTerminal's onchain lt model and view\n  that depict trades happening on Decentralized Exchanges - aggregated per DEX or\n  time. Also includes code snippets, parameter details, and return values.",
    "keywords": [
      "onchain",
      "lt model",
      "Decentralized Exchanges",
      "DEX",
      "lt view",
      "onchain trading",
      "trades aggregation",
      "code snippets",
      "parameter details",
      "return values",
      "Bitcoin"
    ]
  },
  "crypto.onchain.prices": {
    "title": "prices",
    "description": "The 'prices' page shows how to use our API to obtain and display information\n  about historic prices of different cryptocurrencies. This includes parameters and\n  return types.",
    "keywords": [
      "historical prices",
      "volume",
      "market cap",
      "average price",
      "onchain",
      "tokens",
      "Ethplorer",
      "cryptocurrency",
      "API",
      "dataframe"
    ]
  },
  "crypto.onchain.query_graph": {
    "title": "query_graph",
    "description": "This page provides a detailed explanation of the query_graph helper methods\n  for querying a graphql api, including the Python source code and parameters required,\n  from openbb.crypto.onchain.query_graph. The response data is a dictionary.",
    "keywords": [
      "query_graph",
      "helper methods",
      "graphql api",
      "bitquery.io",
      "openbb.crypto.onchain.query_graph",
      "parameters",
      "url",
      "query",
      "returns",
      "dictionary response data"
    ]
  },
  "crypto.onchain.th": {
    "title": "th",
    "description": "This page provides a detailed description and source code for two main\n  features provided by OpenBB-finance. These are the functionalities to acquire token\n  historical transactions data and display information about token history. The page\n  further provides detailed explanations for parameters required for both functions\n  and what each function returns.",
    "keywords": [
      "OpenBB-finance",
      "token historical transactions",
      "Ethplorer",
      "cryptocurrency",
      "onchain",
      "coding",
      "dataframe",
      "token balance",
      "python function",
      "parameters",
      "returns",
      "string",
      "integer",
      "boolean"
    ]
  },
  "crypto.onchain.token_decimals": {
    "title": "token_decimals",
    "description": "The page provides a detailed guide on using helper methods to identify\n  token decimal number using OpenBB Crypto's Onchain and Ethplorer model. It provides\n  insightful information about token decimals and how to fetch this information using\n  a given address. Ideal for users interacting with Ethereum-based tokens.",
    "keywords": [
      "token decimals",
      "blockchain balance",
      "OpenBB crypto",
      "onchain",
      "ethplorer model",
      "crypto token decimals"
    ]
  },
  "crypto.onchain.top": {
    "title": "top",
    "description": "Documentation for the OpenBB project's top 50 crypto tokens function.\n  This is implemented in Python and uses Docusaurus to organize and render the documentation.\n  It covers the parameters required and the expected result, including the sort order\n  and the type of data rendered.",
    "keywords": [
      "Docusaurus",
      "Metadata",
      "Top 50 Tokens",
      "Cryptocurrency",
      "ERC20",
      "Ethplorer",
      "Cryptocurrency Rank"
    ]
  },
  "crypto.onchain.ttcp": {
    "title": "ttcp",
    "description": "The ttcp (Top Traded Crypto Pairs) page provides details about two backend\n  functions that analyze trading data from decentralized exchanges like Uniswap. This\n  page includes python source-codes and parameters for the functions, which help in\n  viewing and analyzing the most traded crypto pairs within a chosen timeframe.",
    "keywords": [
      "ttcp",
      "Crypto Trade",
      "Crypto Pairs",
      "Decentralized Exchange",
      "Onchain Data",
      "Trade Analysis",
      "Ethereum",
      "Uniswap",
      "Bitquery Model",
      "Bitquery View",
      "Data Visualization"
    ]
  },
  "crypto.onchain.tv": {
    "title": "tv",
    "description": "'This documentation provides coding references and details about two\n  functions related to the OpenBB Crypto Onchain Decentralized Exchange: one function\n  to get token volume and another to view and print this data. Available parameters\n  and return types are also discussed.'",
    "keywords": [
      "Decentralized Exchange",
      "Token Volume",
      "OpenBB Crypto Onchain",
      "ERC20 token symbol",
      "Trade amount currency",
      "Sort data",
      "Data ascending",
      "Parameter details",
      "Return types",
      "Source code"
    ]
  },
  "crypto.onchain.tx": {
    "title": "tx",
    "description": "This is an intricate page pertaining to transaction information sourcing\n  from Ethplorer. It lays out comprehensive details about model and chart transactions,\n  offering Python source codes and linked GitHub resource. It elucidates transaction\n  hash parameters and the formats to export data frames, among others.",
    "keywords": [
      "Ethplorer transactions",
      "transaction information",
      "model transactions",
      "chart transactions",
      "Python source code",
      "transaction hash parameters",
      "export data frame formats",
      "GitHub resource"
    ]
  },
  "crypto.onchain.ueat": {
    "title": "ueat",
    "description": "Learn how to monitor unique ethereum address transactions using OpenBB's\n  ueat. Explore how to use the ueat function and chart for effective insights.",
    "keywords": [
      "ueat",
      "ethereum address transactions",
      "crypto onchain",
      "bitquery model",
      "bitquery view",
      "monitor ethereum transactions"
    ]
  },
  "crypto.onchain.whales": {
    "title": "whales",
    "description": "Learn how to utilise Whale Alert's API with OpenBB Terminal for tracking\n  high value transactions on major blockchains. This page contains detailed information\n  on how to implement and use this feature to retrieve both live and historical onchain\n  data from various cryptocurrencies.",
    "keywords": [
      "Whale Alert API",
      "blockchain transactions",
      "onchain data",
      "cryptocurrency",
      "major blockchains",
      "crypto whales",
      "high value transactions",
      "transaction tracking",
      "data retrieval"
    ]
  },
  "crypto.ov.altindex": {
    "title": "altindex",
    "description": "Page featuring the altindex function of the OpenBB library, enabling\n  the tracking of altcoin performance over various periods of time.",
    "keywords": [
      "altindex",
      "altcoin tracking",
      "cryptocurrency",
      "altcoin index",
      "Python crypto library",
      "blockchain documentation",
      "crypto charting",
      "scripting",
      "crypto data export"
    ]
  },
  "crypto.ov.btcrb": {
    "title": "btcrb",
    "description": "btcrb is a feature of the OpenBB Terminal that allows users to access\n  historical bitcoin price data and view it in a rainbow chart. At its core, btcrb\n  provides Python methods for retrieving this data over a specified date range and\n  visualizing it using Matplotlib.",
    "keywords": [
      "Bitcoin",
      "btcrb",
      "Price Data",
      "Rainbow Chart",
      "Data Retrieval",
      "Historical Bitcoin Data",
      "Matplotlib Visualization",
      "Cryptocurrency"
    ]
  },
  "crypto.ov.categories": {
    "title": "categories",
    "description": "'This page provides information about top crypto categories from the\n  CoinGecko source. Detailed explanations of the two main functions are provided:\n  the ''categories'' function, which returns top crypto categories based on various\n  filters, and the ''categories_chart'' function, which displays the top cryptocurrency\n  categories by market capitalization.'",
    "keywords": [
      "crypto categories",
      "CoinGecko",
      "crypto market capitalization",
      "data sorting",
      "data visualization",
      "openbb.crypto.ov.categories",
      "openbb.crypto.ov.categories_chart"
    ]
  },
  "crypto.ov.cbpairs": {
    "title": "cbpairs",
    "description": "This page provides in-depth information on how to use different functions\n  to get a list of available trading pairs or visualize it in a chart form with source\n  code supplied from OpenBB-finance/OpenBBTerminal project on GitHub.",
    "keywords": [
      "OpenBB-finance",
      "GitHub",
      "cryptocurrency",
      "trading pairs",
      "coinbase",
      "model",
      "view",
      "charts",
      "visualization"
    ]
  },
  "crypto.ov.coin_list": {
    "title": "coin_list",
    "description": "The coin_list page is a documentation of the function that returns the\n  list of all available coins on CoinPaprika. It includes source code and is part\n  of the OpenBBTerminal project.",
    "keywords": [
      "coin_list",
      "CoinPaprika",
      "crypto",
      "pandas.DataFrame"
    ]
  },
  "crypto.ov.contracts": {
    "title": "contracts",
    "description": "This page provides technical documentation around functions related to\n  cryptocurrency contract addresses. It includes information on how to use Python\n  functions for obtaining and sorting contract addresses for any given blockchain\n  platform using CoinPaprika as the data source.",
    "keywords": [
      "cryptocurrency",
      "contracts",
      "CoinPaprika",
      "Python functions",
      "blockchain platform",
      "contract addresses",
      "crypto data",
      "technical documentation",
      "sort data",
      "data export"
    ]
  },
  "crypto.ov.cr": {
    "title": "cr",
    "description": "Documentation for two functions providing cryptocurrency interest rates\n  for both borrowing and supplying.You can use the functions to export data or generate\n  charts. Several platforms are covered including BlockFi, Ledn, SwissBorg, and Youhodler.",
    "keywords": [
      "Cryptocurrency",
      "Crypto Interest Rates",
      "Crypto Borrowing",
      "Crypto Supplying",
      "Interest Rate Platforms",
      "Crypto Charts",
      "Crypto Data Export"
    ]
  },
  "crypto.ov.crypto_hack": {
    "title": "crypto_hack",
    "description": "Documentation page that describes the crypto hack function of the OpenBBTerminal,\n  its parameters and return values. Ideal for those who interact with OpenBB-finance's\n  cryptocurrency scripts.",
    "keywords": [
      "crypto hack",
      "crypto hack slug",
      "cryptocurrency",
      "rekt model",
      "OpenBB-finance"
    ]
  },
  "crypto.ov.crypto_hacks": {
    "title": "crypto_hacks",
    "description": "Deep dive into major cryptocurrency-related hacks with OpenBB's crypto\n  hacks models. Evaluate, sort by key parameters and view intricate details about\n  each crypto hack.",
    "keywords": [
      "Crypto hacks",
      "Crypto security",
      "Cryptocurrency",
      "OpenBB crypto",
      "Crypto hack data",
      "Crypto data sorting"
    ]
  },
  "crypto.ov.crypto_hack_slugs": {
    "title": "crypto_hack_slugs",
    "description": "This page provides details on the crypto_hack_slugs function of the OpenBB\n  finance platform. The function retrieves a list of cryptocurrency hack slugs.",
    "keywords": [
      "crypto hack slugs",
      "OpenBB finance",
      "cryptocurrency"
    ]
  },
  "crypto.ov.defi": {
    "title": "defi",
    "description": "This documents discusses useful functionalities for understanding global\n  Decentralized Finances. The content includes source code, parameters, and the returns.",
    "keywords": [
      "Decentralized Finances",
      "cryptocurrency",
      "CoinGecko",
      "parameters",
      "returns",
      "dataframe",
      "defi"
    ]
  },
  "crypto.ov.derivatives": {
    "title": "derivatives",
    "description": "This page provides instructions on how to extract crypto derivatives\n  data from CoinGecko API using Python. It provides detailed information on the parameters\n  used in the extraction code for both 'Model' and 'Chart' categories, along with\n  the return data format.",
    "keywords": [
      "CoinGecko API",
      "crypto derivatives",
      "data extraction",
      "cryptocurrency",
      "data sorting"
    ]
  },
  "crypto.ov.ewf": {
    "title": "ewf",
    "description": "The documentation page discusses two functions - openbb.crypto.ov.ewf\n  and openbb.crypto.ov.ewf_chart. The first function scrapes exchange withdrawal fees\n  and returns a DataFrame with details on Exchange, Coins, and various statistics.\n  The second function allows users to export this data into different formats. The\n  source code and use cases of both functions are included.",
    "keywords": [
      "openbb.crypto.ov.ewf",
      "Exchange withdrawal fees",
      "Scrapes exchange withdrawal fees",
      "openbb.crypto.ov.ewf_chart",
      "Model",
      "Chart",
      "Source Code",
      "Export dataframe data"
    ]
  },
  "crypto.ov.exchanges": {
    "title": "exchanges",
    "description": "This page provides information about how to show top crypto exchanges\n  through OpenBB's API with detailed parameters, return types and examples.",
    "keywords": [
      "crypto exchanges",
      "OpenBB API",
      "CoinGecko",
      "cryptocurrency"
    ]
  },
  "crypto.ov.exmarkets": {
    "title": "exmarkets",
    "description": "Documentation for the exmarkets API functions from OpenBBTerminal's Cryptocurrency\n  Overview tool. Lists markets by exchange ID and manages charts.",
    "keywords": [
      "exmarkets",
      "API",
      "Cryptocurrency Overview Tool",
      "Markets by Exchange ID",
      "Cryptocurrency",
      "CoinPaprika"
    ]
  },
  "crypto.ov.exrates": {
    "title": "exrates",
    "description": "Explanation and source code of 'exrates', a feature from OpenBB-finance\n  which fetches a list of cryptocurrency, fiat, and commodity exchange rates from\n  the CoinGecko API. This page includes how to use the function, its parameters, and\n  its returns.",
    "keywords": [
      "exrates",
      "OpenBB-finance",
      "CoinGecko API",
      "cryptocurrency",
      "exchange rates",
      "crypto",
      "fiats",
      "commodity",
      "parameters",
      "returns"
    ]
  },
  "crypto.ov.globe": {
    "title": "globe",
    "description": "This docusaurus page represents the 'globe' function of OpenBBTerminal\n  which retrieves a DataFrame with global cryptocurrency market data from a specified\n  source; default is CoinGecko.",
    "keywords": [
      "crypto market data",
      "globe function",
      "CoinGecko",
      "coinpaprika",
      "global crypto data"
    ]
  },
  "crypto.ov.hm": {
    "title": "hm",
    "description": "The page provides detailed documentation for OpenBB crypto functions\n  that interact with CoinGecko to retrieve and visualise cryptocurrency data. It includes\n  code examples, a list of parameters and their descriptions for each function, and\n  source code links.",
    "keywords": [
      "cryptocurrency",
      "CoinGecko",
      "heatmap",
      "docusaurus",
      "dataframe",
      "metadata"
    ]
  },
  "crypto.ov.hold": {
    "title": "hold",
    "description": "Comprehensive guides to holding Bitcoin and Ethereum by public companies.\n  Details on visualizing the hold data and exporting it to your preferred data format\n  (csv, json, xlsx). Source references to CoinGecko. Includes links to source codes.",
    "keywords": [
      "cryptocurrency",
      "bitcoin",
      "ethereum",
      "public companies",
      "data visualization",
      "CoinGecko",
      "bar graph",
      "dataframe",
      "openbb.crypto.ov.hold",
      "openbb.crypto.ov.hold_chart",
      "csv",
      "json",
      "xlsx"
    ]
  },
  "crypto.ov.indexes": {
    "title": "indexes",
    "description": "The documentation page covers the retrieval and visualization of crypto\n  indexes using the CoinGecko API in the OpenBB platform. It details parameters, source\n  code, and return values for related methods.",
    "keywords": [
      "CoinGecko API",
      "crypto indexes",
      "pycoingecko_model",
      "pycoingecko_view",
      "data sort",
      "crypto data visualization",
      "data export"
    ]
  },
  "crypto.ov.info": {
    "title": "info",
    "description": "This page provides detailed documentation on retrieving and visualizing\n  cryptocurrency data from the CoinPaprika API using methods from the OpenBB crypto\n  module. The page includes parameters and return values, data sorting, and export\n  options. Source codes are also linked for better understanding.",
    "keywords": [
      "CoinPaprika API",
      "crypto coin data",
      "cryptocurrency information",
      "openbb.crypto.ov.info",
      "data modeling",
      "data sorting",
      "ascending and descending sorting",
      "data visualization",
      "data export formats",
      "python coding",
      "coin market cap",
      "coin volume",
      "price chart"
    ]
  },
  "crypto.ov.markets": {
    "title": "markets",
    "description": "The markets page provides detailed information on how to use the OpenBB\n  crypto market API functions. The high-level cryptocurrency data from CoinPaprika\n  API allows the user to import and view detailed coin information, with the functionality\n  of sorting the data based on different parameters.",
    "keywords": [
      "cryptocurrency",
      "API",
      "CoinPaprika",
      "crypto market",
      "coin information",
      "data sorting"
    ]
  },
  "crypto.ov.news": {
    "title": "news",
    "description": "This documentation is for a news aggregator platform on the OpenBB Terminal\n  which fetches recent posts from CryptoPanic. It details available functions, parameters,\n  returns and the source code link.",
    "keywords": [
      "CryptoPanic",
      "news aggregator",
      "parameters",
      "returns",
      "crypto news",
      "filter options"
    ]
  },
  "crypto.ov.platforms": {
    "title": "platforms",
    "description": "This page contains a directory of all smart contract platforms such\n  as Ethereum, Solana, Cosmos, Polkadot, and Kusama. The page provides source codes\n  and instructs the use of functionalities in two formats model and chart.",
    "keywords": [
      "smart contract platforms",
      "Ethereum",
      "Solana",
      "Cosmos",
      "Polkadot",
      "Kusama",
      "model view",
      "chart view",
      "cryptocurrency",
      "openbb.crypto.ov.platforms()",
      "openbb.crypto.ov.platforms_chart()",
      "CoinPaprika",
      "dataframe export"
    ]
  },
  "crypto.ov.products": {
    "title": "products",
    "description": "Documentation for the functions related to the retrieval and visualization\n  of financial products using the OpenBBTerminal and CoinGecko API. Covers aspects\n  such as sorting of data, ascending and descending configuration, product charts\n  and exporting data.",
    "keywords": [
      "OpenBBTerminal financial products",
      "CoinGecko API",
      "openbb.crypto.ov.products",
      "Financial data sorting",
      "Data ascending and descending",
      "products_chart",
      "Financial products chart",
      "Data export"
    ]
  },
  "crypto.ov.stables": {
    "title": "stables",
    "description": "Documentation for the stable coins API provided by OpenBB, including\n  how to use the model endpoints for data extraction and the chart endpoints for data\n  visualization.",
    "keywords": [
      "OpenBB stable coins API",
      "cryptocurrency documentation",
      "data extraction",
      "data visualization",
      "metadata SEO",
      "python cryptocurrency API",
      "OpenBB documentation",
      "CoinGecko API",
      "programming examples",
      "SDK usage"
    ]
  },
  "crypto.ov.wf": {
    "title": "wf",
    "description": "This documentation page discusses two features of the software, focusing\n  on top coins withdrawal fees. The first tab details the 'Model' feature, which scrapes\n  data for top coins' withdrawal fees by employing specific python code. The code\n  parameters and return objects are clearly defined. The second tab is about 'Chart',\n  the feature to visualize top coins withdrawal fees. Also elaborates on how to limit\n  searches, export data, with the inclusion of python script.",
    "keywords": [
      "python code",
      "withdrawal fees",
      "crypto coins",
      "scraping data",
      "data visualization",
      "parameters",
      "data export",
      "coin search"
    ]
  },
  "crypto.ov.wfpe": {
    "title": "wfpe",
    "description": "This page explains how to use OpenBB's wfpe function, which scrapes coin\n  withdrawal fees per exchange and presents them visually or in data format. It provides\n  detailed parameters and returns information for both the model and view aspects\n  of the function.",
    "keywords": [
      "wfpe function",
      "coin withdrawal fees",
      "crypto exchange",
      "data scraping",
      "data visualization",
      "parameters",
      "returns",
      "Model",
      "View"
    ]
  },
  "crypto.tools.apy": {
    "title": "apy",
    "description": "This documentation page provides information about the apy and apr functions\n  in openbb.crypto.tools. It features source code links, parameter descriptions, return\n  values, and the option to view the chart or export data.",
    "keywords": [
      "apy",
      "apr",
      "compounding times",
      "cryptocurrency",
      "openbb.crypto.tools",
      "dataframe",
      "narrative version",
      "export data"
    ]
  },
  "crypto.tools.il": {
    "title": "il",
    "description": "'This page provides technical documentation for two imperative features\n  in OpenBB''s cryptocurrency tool suite: the Impermanent Loss calculation model and\n  its corresponding chart display. Learn about their parameters, return types, and\n  source code.'",
    "keywords": [
      "Cryptocurrency",
      "Impermanent Loss",
      "Impermanent Loss Model",
      "Impermanent Loss Chart Display",
      "Crypto Tool Suite",
      "Crypto A",
      "Crypto B",
      "Liquidity Pool"
    ]
  },
  "econometrics.bgod": {
    "title": "bgod",
    "description": "This page provides documentation for bgod and bgod_chart methods of OpenBB.\n  The bgod method calculates test statistics for autocorrelation in an OLS model,\n  and bgod_chart displays the Breusch-Godfrey autocorrelation test.",
    "keywords": [
      "bgod",
      "bgod_chart",
      "autocorrelation",
      "Breusch-Godfrey Test",
      "OLS model",
      "statistics",
      "data analysis",
      "econometrics"
    ]
  },
  "econometrics.bols": {
    "title": "bols",
    "description": "The page provides detailed instructions on how to use the 'Between estimator',\n  which is part of the openbb.econometrics.bols Python function. It covers parameters,\n  return values, and the code to be used.",
    "keywords": [
      "Between estimator",
      "OLS model",
      "Dependent variable",
      "Independent variable",
      "openbb.econometrics.bols"
    ]
  },
  "econometrics.bpag": {
    "title": "bpag",
    "description": "The 'bpag' page provides comprehensive information about the Breusch-Pagan\n  test calculation in econometrics. The page contains source code and models for heteroscedasticity\n  and regression, including parameters, return types, and export format for data.",
    "keywords": [
      "bpag",
      "heteroscedasticity",
      "Breusch-Pagan Test",
      "OLS Model",
      "econometrics",
      "regression model",
      "bpag_chart",
      "export data",
      "statsmodels"
    ]
  },
  "econometrics.clean": {
    "title": "clean",
    "description": "This documentation details how to use OpenBBTerminal's 'clean' function\n  to clean up NaNs in a pandas DataFrame. It outlines the parameters, return values,\n  and available methods for filling and dropping NaN values.",
    "keywords": [
      "econometrics",
      "clean data",
      "NaN handling",
      "machine learning",
      "dataset cleaning",
      "fill method",
      "drop method",
      "data pre-processing"
    ]
  },
  "econometrics.coint": {
    "title": "coint",
    "description": "This page is dedicated to the `coint` functionality of OpenBB Terminal.\n  Users can calculate cointegration tests between variable number of input series,\n  and get the results back as a Dataframe or a dictionary. This page provides the\n  source code and detailed description of parameters specific to the function.",
    "keywords": [
      "cointegration tests",
      "coint",
      "data analysis",
      "pd.Series",
      "dataframe",
      "Dict",
      "openbb.econometrics.coint",
      "openbb.econometrics.coint_chart",
      "parameters description"
    ]
  },
  "econometrics.comparison": {
    "title": "comparison",
    "description": "This page provides a comparison function for Panel Data regression results\n  in the openbb terminal. It allows exporting the comparison data and returns an overview\n  of the different regression results as a PanelModelComparison.",
    "keywords": [
      "Panel Data regression",
      "regression results comparison",
      "econometrics",
      "openbb terminal",
      "export data",
      "PanelModelComparison"
    ]
  },
  "econometrics.dwat": {
    "title": "dwat",
    "description": "Detailed explanation of Durbin Watson autocorrelation test calculations\n  and chart visualisation using OpenBBTerminal's econometrics functions.",
    "keywords": [
      "Docusaurus",
      "Econometrics",
      "Durbin Watson",
      "Autocorrelation",
      "Statistical modelling",
      "Regression",
      "Data visualisation"
    ]
  },
  "econometrics.fdols": {
    "title": "fdols",
    "description": "This documentation page provides information on First Differencing (fdols)\n  - an alternative to using fixed effects when there is possible correlation. It contains\n  the source code link, explanation of parameters and return details.",
    "keywords": [
      "First Differencing",
      "fdols",
      "Fixed effects",
      "Dependent variable",
      "Independent variable",
      "Regression variables",
      "OLS model"
    ]
  },
  "econometrics.fe": {
    "title": "fe",
    "description": "This page presents the fe function of the OpenBB Econometrics Module,\n  explaining its parameters and their functionality. Here, users can find about entity\n  effects, time effects, and regressors.",
    "keywords": [
      "OpenBB Econometrics",
      "fe function",
      "entity effects",
      "time effects",
      "regressors",
      "Fixed Effects",
      "PanelOLS model",
      "regression model"
    ]
  },
  "econometrics.get_regression_data": {
    "title": "get_regression_data",
    "description": "The 'get_regression_data' page offers a detailed overview of OpenBB finance's\n  function for regression data creation. It provides the source code link, describes\n  the parameters like regression variables and type, and explains the returned results,\n  such as the used dataset, dependent and independent variables, and the OLS model.",
    "keywords": [
      "get_regression_data",
      "OpenBB finance",
      "regression variables",
      "source code link",
      "regression type",
      "OLS model",
      "dependent variable",
      "independent variable",
      "econometrics"
    ]
  },
  "econometrics.granger": {
    "title": "granger",
    "description": "Documentation about Granger test functions to calculate and visualize\n  Econometrics models in OpenBB terminal. Covers usage, parameters and return types.",
    "keywords": [
      "Granger test",
      "Econometrics",
      "OpenBB terminal",
      "Source code",
      "Function parameters",
      "function return"
    ]
  },
  "econometrics.load": {
    "title": "load",
    "description": "The page provides information on loading custom files into a dataframe\n  in OpenBB. It offers the function definition, parameters, and returns",
    "keywords": [
      "dataframe",
      "load function",
      "custom files",
      "parameters",
      "returns",
      "Statsmodels examples",
      "Export folder"
    ]
  },
  "econometrics.norm": {
    "title": "norm",
    "description": "This page provides a detailed guide for testing normality in data series\n  using Python with a graphical representation of normal distribution. It also explains\n  how to export data and use external axes for plotting.",
    "keywords": [
      "Econometrics",
      "OpenBB-finance",
      "Data normality test",
      "Timeseries",
      "Histogram",
      "Data exporting",
      "Data plotting",
      "Data Science",
      "Statistics",
      "Normal distribution"
    ]
  },
  "econometrics.ols": {
    "title": "ols",
    "description": "Perform OLS regression on timeseries data using the 'ols' function from\n  OpenBB's econometrics module. The page includes parameters description, return type,\n  and a practical example with code.",
    "keywords": [
      "ols",
      "timeseries data",
      "statsmodels",
      "regression",
      "openbb.econometrics.ols",
      "Dependent variable series",
      "Independent variables series",
      "RegressionResultsWrapper",
      "OLS Regression Results",
      "R-squared",
      "Least Squares",
      "F-statistic",
      "Prob (F-statistic)",
      "Log-Likelihood",
      "AIC",
      "BIC",
      "Df Residuals",
      "Df Model",
      "Covariance Type"
    ]
  },
  "econometrics.options": {
    "title": "options",
    "description": "This page details two main functionalities of OpenBB-finance's model\n  and chart components - obtaining columns-dataset combinations from datasets for\n  use in commands and plotting custom data. Code snippets, links to source code, parameters\n  involved, and return types are provided.",
    "keywords": [
      "OpenBB finance",
      "data visualization",
      "data modelling",
      "datasets",
      "econometrics",
      "tabs",
      "chart",
      "options"
    ]
  },
  "econometrics.panel": {
    "title": "panel",
    "description": "Tutorial on how to use OpenBB Terminal's econometric functions with focus\n  on running panel regression models. This includes choosing the type of regression,\n  setting entity and time effects, and interacting with the Python SDK. Provides examples\n  using the 'openbb.econometrics.panel' function, which allows selection of OLS or\n  pooled OLS models, and demonstrates how to read and interpret the model summary.\n  Also explains the 'openbb.econometrics.panel_chart' function, which visualizes regression\n  outcomes.",
    "keywords": [
      "Docusaurus",
      "Econometrics",
      "Panel Regression",
      "Fixed Effects",
      "Python SDK",
      "OLS Regression",
      "Regression Model",
      "Pooled OLS",
      "Regression Chart"
    ]
  },
  "econometrics.pols": {
    "title": "pols",
    "description": "The page provides detailed information on using PooledOLS in OpenBB,\n  a plain OLS that can comprehend various panel data structures. It includes parameters\n  and return types for the 'openbb.econometrics.pols' function.",
    "keywords": [
      "pols",
      "PooledOLS",
      "OLS",
      "panel data structures",
      "openbb.econometrics.pols",
      "regression_variables",
      "data",
      "PooledOLS model",
      "Dependent variable",
      "Independent variable"
    ]
  },
  "econometrics.re": {
    "title": "re",
    "description": "This page provides a detailed look into the Random Effects Model developed\n  by OpenBB. It covers the parameters involved such as regression variables and data\n  sets, the return type, and a link is provided to access the source code, making\n  it a valuable resource for any data scientist interested in econometrics.",
    "keywords": [
      "random effects model",
      "regression variables",
      "data science",
      "Python code",
      "econometrics",
      "pooled OLS model",
      "independent variable",
      "dependent variable",
      "dataset",
      "github"
    ]
  },
  "econometrics.root": {
    "title": "root",
    "description": "Detailed explanation of OpenBB's econometrics Python library focusing\n  on the functionality of unit root tests including ADF and KPSS tests. The page features\n  instructions on how to conduct these tests with Python, making it beneficial for\n  data analysts and those interested in data series analysis.",
    "keywords": [
      "Docusaurus",
      "Econometrics",
      "ADF test",
      "KPSS test",
      "Data series"
    ]
  },
  "economy.available_indices": {
    "title": "available_indices",
    "description": "A documentation page for the available_indices function in the OpenBBTerminal\n  module. This function returns the available indices without requiring parameters.",
    "keywords": [
      "available_indices",
      "indices",
      "function",
      "no parameters",
      "dictionary"
    ]
  },
  "economy.bigmac": {
    "title": "bigmac",
    "description": "This page provides documentation for the Big Mac Index functionality\n  in OpenBB. It includes details on how to use the 'bigmac' function and its parameters,\n  along with source code links and return information. This information is useful\n  for individuals looking to utilize the OpenBB economic dataset for data analysis.",
    "keywords": [
      "bigmac",
      "docusaurus",
      "Big Mac Index",
      "economy",
      "country_codes",
      "dataframe",
      "matplotlib",
      "USD equivalent",
      "parameters",
      "returns"
    ]
  },
  "economy.country_codes": {
    "title": "country_codes",
    "description": "This is the Country Codes page for the Bigmac index in the OpenBBTerminal.\n  It provides available country codes, specified as ISO-3 letter country codes, and\n  requires no parameters.",
    "keywords": [
      "Country codes",
      "Bigmac index",
      "OpenBB finance",
      "Economy",
      "ISO-3 codes",
      "Source Code",
      "Parameters",
      "Returns",
      "Nasdaq model"
    ]
  },
  "economy.cpi": {
    "title": "cpi",
    "description": "This page provides documentation on the cpi command within the OpenBBTerminal.\n  It explains how to use the command to fetch Consumer Price Index data from Alpha\n  Vantage and to display the US Consumer Price Index as a chart. It lists all parameters\n  and returns for this command.",
    "keywords": [
      "cpi",
      "consumer price index",
      "Alpha Vantage",
      "dataframe",
      "matplotlib",
      "economy",
      "chart",
      "parameters",
      "returns"
    ]
  },
  "economy.currencies": {
    "title": "currencies",
    "description": "This page provides information about accessing global currencies data\n  through a Python function. The function returns a DataFrame with the name, price,\n  net change, and percent change of multiple currencies.",
    "keywords": [
      "global currencies data",
      "data scraping",
      "economy.currencies",
      "price",
      "net change",
      "percent change"
    ]
  },
  "economy.events": {
    "title": "events",
    "description": "Implement our economic calendar for selected countries and specific dates\n  functionality in your application using OpenBB. Use it to analyze global economic\n  trends or forecast market movements.",
    "keywords": [
      "economic calendar",
      "financial market events",
      "global economy",
      "market analysis",
      "economic forecast",
      "economic events",
      "countries economy",
      "economic data retrieval",
      "market trends",
      "predictive analytics",
      "economic indicators"
    ]
  },
  "economy.fred": {
    "title": "fred",
    "description": "The page includes detailed information on the 'fred' function in the\n  OpenBBTerminal software. With this function, users can acquire and visualize economic\n  series data from the Federal Reserve Economic Data (FRED) database. It also lists\n  out function parameters and return type.",
    "keywords": [
      "fred function",
      "Federal Reserve Economic Data",
      "FRED",
      "economy",
      "series data",
      "parameters",
      "return type",
      "visualization",
      "code",
      "metadata",
      "data retrieval",
      "data analysis"
    ]
  },
  "economy.fred_ids": {
    "title": "fred_ids",
    "description": "This page helps to understand the 'openbb.economy.fred_ids' function,\n  which is a text query method for getting series IDs on FRED via OpenBB-finance.\n  Includes parameters, return information and link to the source code.",
    "keywords": [
      "FRED",
      "OpenBB-finance",
      "Series ID",
      "Information retrieval",
      "FRED series notes database",
      "openbb.economy.fred_ids"
    ]
  },
  "economy.fred_notes": {
    "title": "fred_notes",
    "description": "Learn about OpenBB's FRED model and how it makes searching the series\n  notes database easier. This page also talks about the search and limit parameters\n  involved when querying the FRED database, and the DataFrame of matched series it\n  returns.",
    "keywords": [
      "FRED series notes",
      "OpenBB economy",
      "FRED model",
      "data searching",
      "text query",
      "series notes database"
    ]
  },
  "economy.future": {
    "title": "future",
    "description": "This page provides detailed documentation on how to use OpenBB's 'future'\n  function in Python script. It explains parameters and returns related to different\n  financial instruments.",
    "keywords": [
      "OpenBB future function",
      "Python script",
      "financial instruments",
      "Indices",
      "Energy",
      "Metals",
      "Meats",
      "Grains",
      "Softs",
      "Bonds",
      "Currencies",
      "Finviz"
    ]
  },
  "economy.futures": {
    "title": "futures",
    "description": "This page provides information on how to retrieve and manipulate futures\n  data using the OpenBB economy function. It includes examples and descriptions for\n  parameters such as data source and future type.",
    "keywords": [
      "economy",
      "futures data",
      "Finviz",
      "WSJ",
      "Indices",
      "Energy",
      "Metals",
      "Meats",
      "Grains",
      "Softs",
      "Bonds",
      "Currencies"
    ]
  },
  "economy.gdp": {
    "title": "gdp",
    "description": "This page provides in-depth documentation about the 'gdp' function in\n  the openbb economy package. It details how to retrieve real GDP data for the U.S.\n  on a yearly or quarterly basis, and how to produce a chart visualizing this data.",
    "keywords": [
      "economy",
      "gdp",
      "data retrieval",
      "visualization",
      "API documentation",
      "yearly data",
      "quarterly data",
      "AlphaVantage"
    ]
  },
  "economy.gdpc": {
    "title": "gdpc",
    "description": "The page provides details on using the 'gdpc' function of OpenBBTerminal.\n  It allows plotting and exporting United States' GDP per Capita data. The page also\n  gives link to the source code and gives examples of how to use the functions with\n  Python.",
    "keywords": [
      "GDP per Capita",
      "gdpc",
      "Real GDP",
      "United States Economy",
      "plotting tool",
      "economy model",
      "Data visualization",
      "Raw data",
      "Export data",
      "Source code"
    ]
  },
  "economy.get_groups": {
    "title": "get_groups",
    "description": "This page provides content about the openbb.economy.get_groups() function,\n  sourced from OpenBB-Finance. The function doesn't take any parameters nor returns\n  any output.",
    "keywords": [
      "openbb.economy.get_groups()",
      "OpenBB-Finance",
      "No-parameters",
      "No-return",
      "Source-code"
    ]
  },
  "economy.glbonds": {
    "title": "glbonds",
    "description": "Webpage on 'glbonds' function - a data scraping tool for global bonds\n  information. It returns name, coupon rate, yield and change in yield.",
    "keywords": [
      "glbonds",
      "data scraping",
      "global bonds",
      "yield",
      "rate",
      "change"
    ]
  },
  "economy.index_cmd": {
    "title": "index",
    "description": "This page provides documentation for the OpenBB Terminal SDK functions\n  for fetching and visualizing economic indices data from Yahoo Finance. It provides\n  Python code examples and explains parameters and returns in detail.",
    "keywords": [
      "Docusaurus documentation",
      "OpenBB Terminal SDK",
      "Economy indices",
      "Yahoo Finance data",
      "Data visualization",
      "Python code examples",
      "Data intervals",
      "Data start and end dates",
      "Adjusted Close",
      "Cumulative returns on index",
      "Export data"
    ]
  },
  "economy.indices": {
    "title": "indices",
    "description": "This documentation page provides detailed information about how to use\n  the openbb.economy.indices() function to get the top US indices. The function returns\n  a DataFrame containing the name, price, net change, and percent change.",
    "keywords": [
      "openbb.economy.indices()",
      "US indices",
      "Documentation",
      "Name",
      "Price",
      "Net change",
      "Percent change",
      "Source code"
    ]
  },
  "economy.inf": {
    "title": "inf",
    "description": "'This page discusses two main functions of the OpenBBTerminal: one for\n  gathering US inflation data and the other for displaying this data in a chart. The\n  model function retrieves historical inflation data from AlphaVantage and returns\n  a DataFrame, while the chart function presents this data using a customizable interface.'",
    "keywords": [
      "Inflation Data",
      "AlphaVantage",
      "Data Visualization"
    ]
  },
  "economy.macro": {
    "title": "macro",
    "description": "This Docusaurus page offers detailed resources related to the 'macro'\n  function within the OpenBBTerminal Python package. It presents function parameters,\n  provides source code links, and offers examples of two functions that handle querying\n  macroeconomic data from the EconDB database and visualizing the received macro data.",
    "keywords": [
      "docusaurus page",
      "metadata",
      "macro function",
      "EconDB database",
      "parameters",
      "countries",
      "transform",
      "start_date",
      "end_date",
      "symbol",
      "macro data",
      "macro chart",
      "raw",
      "econdb_model.py",
      "econdb_view.py",
      "economy",
      "macro parameters",
      "macro countries",
      "economical data visualization"
    ]
  },
  "economy.macro_countries": {
    "title": "macro_countries",
    "description": "Get a digest of the macro_countries function in OpenBB's economy module\n  that provides a dictionary of available countries with their respective currencies.\n  Includes details on function parameters and returns.",
    "keywords": [
      "economy module",
      "macro_countries function",
      "country currency",
      "dictionary",
      "function parameters",
      "function returns"
    ]
  },
  "economy.macro_parameters": {
    "title": "macro_parameters",
    "description": "The macro_parameters function in openbb economy section. It does not\n  take any parameters and returns a dictionary with the available macro parameters.\n  Find the source code here.",
    "keywords": [
      "macro parameters",
      "economy",
      "dictionary"
    ]
  },
  "economy.overview": {
    "title": "overview",
    "description": "This page provides documentation for the OpenBBTerminal's economy overview\n  feature. The function scrapes market data, returning a DataFrame with the name,\n  price, net change, and percentage change. No parameters needed.",
    "keywords": [
      "data scraping",
      "economy overview",
      "market data",
      "pandas DataFrame",
      "net change",
      "percent change"
    ]
  },
  "economy.perfmap": {
    "title": "perfmap",
    "description": "This is the documentation page of perfmap, a tool that opens Finviz performance\n  map in the browser. It supports various performance periods and map filters.",
    "keywords": [
      "Finviz",
      "performance map",
      "economy model",
      "SP500",
      "ETF",
      "world map",
      "perfmap",
      "period",
      "map filter"
    ]
  },
  "economy.performance": {
    "title": "performance",
    "description": "This page provides detailed information on retrieving group performance\n  data using OpenBB's economy module. It provides explanations on parameters and return\n  types along with a link to the source code.",
    "keywords": [
      "OpenBB economy module",
      "group performance data",
      "Finviz",
      "Performance data retrieval",
      "Source code",
      "Programming"
    ]
  },
  "economy.search_index": {
    "title": "search_index",
    "description": "This Docusaurus page provides information about how to use the 'search_index'\n  function from the OpenBB finance package. It explains the parameters and returns\n  of this function, which helps to search indices by keyword in the finance database.\n  Source code is also provided.",
    "keywords": [
      "search_index",
      "OpenBB finance package",
      "finance database",
      "keyword search",
      "parameters",
      "returns"
    ]
  },
  "economy.spectrum": {
    "title": "spectrum",
    "description": "Learn how to use the OpenBB economy spectrum function to display the\n  finviz spectrum in your system viewer. Understand parameters like group and export,\n  and learn how to customize them for your needs.",
    "keywords": [
      "spectrum",
      "finviz",
      "openbb.economy.spectrum",
      "group",
      "export",
      "get_groups()",
      "sector"
    ]
  },
  "economy.treasury": {
    "title": "treasury",
    "description": "The page provides comprehensive documentation and source code for fetching\n  and visualizing U.S. treasury rates data with different options for type of treasuries,\n  maturities, and data frequencies.",
    "keywords": [
      "U.S. treasury rates",
      "EconDB",
      "data frequency",
      "treasury maturities",
      "economy.treasury",
      "economy.treasury_chart",
      "Data Visualization",
      "Source Code",
      "Parameters",
      "Returns"
    ]
  },
  "economy.treasury_maturities": {
    "title": "treasury_maturities",
    "description": "This page covers the documentation of OpenBB finance's treasury_maturities\n  function, providing details on the source code and its returns. This function returns\n  a DataFrame containing the name of the financial instruments and a string containing\n  all options.",
    "keywords": [
      "OpenBB finance",
      "Documentation",
      "Treasury Maturities",
      "EconDB",
      "Source Code",
      "Python Code",
      "Economy",
      "Financial Instruments",
      "Data Frame"
    ]
  },
  "economy.tyld": {
    "title": "tyld",
    "description": "This page provides documentation for retrieving and displaying historical\n  yield data using the 'tyld' and 'tyld_chart' functions in the OpenBB finance module.\n  This data can be filtered based on various parameters including the interval, maturity\n  and start date. For more in-depth details and access to the source code, please\n  refer to the respective sections.",
    "keywords": [
      "OpenBB finance module",
      "historical yield",
      "tyld function",
      "tyld_chart function",
      "data retrieval",
      "data display"
    ]
  },
  "economy.unemp": {
    "title": "unemp",
    "description": "This page provides full documentation on using unemp functions in OpenBB\n  to get US unemployment historical data and visualize it using charts. Includes information\n  on function parameters and return types.",
    "keywords": [
      "OpenBB documentation",
      "unemp function",
      "US unemployment data",
      "historical unemployment data",
      "AlphaVantage",
      "data visualization"
    ]
  },
  "economy.usbonds": {
    "title": "usbonds",
    "description": "This page provides a comprehensive guide on how to use OpenBB-finance's\n  us bonds data scraping function from OpenBBTerminal's wsj_model python script. The\n  function returns a dataframe containing bond's name, its coupon rate, yield and\n  change in yield.",
    "keywords": [
      "us bonds",
      "data scraping",
      "OpenBB-finance",
      "economy",
      "wsj_model",
      "parameters",
      "dataframe",
      "name",
      "coupon rate",
      "yield",
      "change in yield"
    ]
  },
  "economy.valuation": {
    "title": "valuation",
    "description": "This is a documentation page about the openbb.economy.valuation function\n  from OpenBB that uses Finviz data to get group valuation data. It allows for sorting\n  by column and in ascending order, returning these results in a dataframe.",
    "keywords": [
      "group valuation data",
      "finance sector",
      "performance data",
      "sort by column",
      "ascending order",
      "Finviz",
      "GitHub",
      "dataframe"
    ]
  },
  "economy.ycrv": {
    "title": "ycrv",
    "description": "This documentation page guides users on how to use the 'ycrv' function\n  in OpenBB software to retrieve and display yield curve data.",
    "keywords": [
      "ycrv",
      "yield curve",
      "Treasury rates",
      "data retrieval",
      "data display",
      "frontend development",
      "FRED source code",
      "economic data visualization"
    ]
  },
  "etf.candle": {
    "title": "candle",
    "description": "This page provides a comprehensive guide on how to use the 'candle' function\n  in OpenBB Terminal. This function, primarily meant for stock evaluations, provides\n  a detailed candle plot of any given ticker. Features include adjustable parameters\n  for added customizability.",
    "keywords": [
      "stock evaluation",
      "candle function",
      "candle plot"
    ]
  },
  "etf.etf_by_category": {
    "title": "etf_by_category",
    "description": "This page provides information on how to retrieve a selection of ETFs\n  based on category filtered by total assets, using the OpenBB finance platform.",
    "keywords": [
      "OpenBB finance",
      "ETFs",
      "category filter",
      "total assets",
      "ETF selection",
      "financial data",
      "finance database model",
      "etf_by_category function"
    ]
  },
  "etf.etf_by_name": {
    "title": "etf_by_name",
    "description": "A detailed documentation page that explains how to get ETF symbol and\n  name based on a string to search. The page includes a link to the source code and\n  illustrates how the function 'etf_by_name' used in the StockAnalysis can be implemented\n  to fetch ETF names and their corresponding symbols. This function returns a data\n  frame with symbols and names.",
    "keywords": [
      "ETF",
      "Symbol",
      "Name Search",
      "StockAnalysis"
    ]
  },
  "etf.holdings": {
    "title": "holdings",
    "description": "The page provides functions to fetch ETF holdings with Python using a\n  specific symbol. It includes source code, parameter information, and return values\n  represented in a dataframe.",
    "keywords": [
      "ETF holdings",
      "Source Code",
      "Parameters",
      "Returns",
      "Symbol",
      "Dataframe of holdings"
    ]
  },
  "etf.ld": {
    "title": "ld",
    "description": "This page of the OpenBB Terminal documentation provides details on how\n  to return a selection of ETFs based on description filtered by total assets using\n  the 'ld' function. It includes source code links, input parameters, and their returns.",
    "keywords": [
      "ETF selection",
      "description filter",
      "total assets filter",
      "'''ld'' function'",
      "parameter description",
      "ETF return"
    ]
  },
  "etf.ln": {
    "title": "ln",
    "description": "An OpenBBTerminal documentation page describing how to use the openbb.etf.ln\n  Python function, which filters and retrieves ETFs from the Finance Database based\n  on names.",
    "keywords": [
      "ETF",
      "Finance Database",
      "name filter",
      "Information Retrieval"
    ]
  },
  "etf.load": {
    "title": "load",
    "description": "This page presents the 'load' function, used to perform analysis on a\n  symbol. The function details with parameters and returns are described in a comprehensive\n  manner.",
    "keywords": [
      "load function",
      "symbol analysis",
      "YahooFinance data extraction",
      "weekly and monthly data",
      "verbose information",
      "data analysis"
    ]
  },
  "etf.news": {
    "title": "news",
    "description": "The page provides documentation on how to get and display news for a\n  given term using OpenBB's Python functions. It also describes parameters used in\n  these functions and links to the related source codes.",
    "keywords": [
      "Documentation",
      "Python functions",
      "News retrieval",
      "NewsAPI",
      "Source code",
      "Parameters"
    ]
  },
  "etf.overview": {
    "title": "overview",
    "description": "This page provides an overview of how to get ETF data using OpenBB's\n  Python library. It includes detailed explanations on parameters and returns, and\n  even a link to the source code.",
    "keywords": [
      "ETF",
      "overview data",
      "stock overview data"
    ]
  },
  "etf.summary": {
    "title": "summary",
    "description": "An in-depth overview of ETF summaries using the OpenBB ETF module. This\n  tool fetches ETF data from Yahoo Finance, providing a comprehensive summary based\n  on specified ETF name.",
    "keywords": [
      "ETF",
      "OpenBB ETF module",
      "Yahoo Finance",
      "ETF Summary",
      "ETF data",
      "ETF name"
    ]
  },
  "etf.symbols": {
    "title": "symbols",
    "description": "This documentation page provides a detailed guide on how to get all ETF\n  names and symbols using the openbb.etf.symbols() function. It also includes a link\n  to the source code.",
    "keywords": [
      "ETF",
      "symbols",
      "names",
      "openbb.etf.symbols()"
    ]
  },
  "etf.weights": {
    "title": "weights",
    "description": "This page provides the function to return the sector weightings allocation\n  of any ETF using the OpenBB's yfinance model. It includes a link to the source code\n  on GitHub.",
    "keywords": [
      "ETF",
      "sector weightings allocation",
      "yfinance model"
    ]
  },
  "etf.disc.mover": {
    "title": "mover",
    "description": "This page provides details and source code documentation for a function\n  titled 'mover', used in scraping data for top etf movers. There's also a description\n  of its parameters and returned values.",
    "keywords": [
      "mover function",
      "scrape top etf movers",
      "source code documentation",
      "gainers",
      "decliners",
      "active",
      "etf volume",
      "etf price",
      "etf change"
    ]
  },
  "etf.scr.screen": {
    "title": "screen",
    "description": "'This page of the documentation is dedicated to the OpenBB''s etf screener;\n  it provides an overview of the functionality, parameters, and return types for two\n  core methods: the ETF ''screen'' and ''screen_chart'' functions. The website guides\n  the users through the use of these functions as well as their source code, helping\n  them better understand and utilize the ETF screener.'",
    "keywords": [
      "ETF screening",
      "Source code",
      "ETF scraping",
      "Data sorting",
      "Data visualization",
      "Financial data analysis",
      "Data export"
    ]
  },
  "forecast.atr": {
    "title": "atr",
    "description": "The page provides details on how to calculate the Average True Range\n  using a specific stock ticker with the help of the Python package, OpenBB.",
    "keywords": [
      "Average True Range",
      "stock ticker",
      "forecast"
    ]
  },
  "forecast.autoarima": {
    "title": "autoarima",
    "description": "This documentation page discusses the use of the automatic ARIMA (AutoARIMA)\n  model for forecasting. It provides a detailed insight into the parameters involved,\n  the return types, model structures, and links to the source code. This page is specifically\n  valuable for individuals seeking understanding of OpenBB's financial forecasting\n  abilities based on time series data using Python.",
    "keywords": [
      "ARIMA",
      "Forecasting",
      "AutoARIMA",
      "TimeSeries",
      "Source Code",
      "Parameters",
      "Returns",
      "Model",
      "Chart"
    ]
  },
  "forecast.autoces": {
    "title": "autoces",
    "description": "An in-depth look into OpenBB's autoces module that performs Automatic\n  Complex Exponential Smoothing on time series, particularly useful for stock market\n  prediction. It provides functionality for data forecasting and visualization.",
    "keywords": [
      "forecasting",
      "autoces",
      "exponential smoothing",
      "stock market prediction",
      "timeseries analysis",
      "data visualization"
    ]
  },
  "forecast.autoets": {
    "title": "autoets",
    "description": "This documentation page provides comprehensive information about OpenBB's\n  'autoets' model and view function for forecasting. The documentation contains source\n  code links, parameters definitions, and expected returns for financial data.",
    "keywords": [
      "autoets",
      "forecasting",
      "Error Trend Seasonality model",
      "financial data",
      "time series",
      "chart",
      "parameters",
      "returns",
      "StatsForecast"
    ]
  },
  "forecast.autoselect": {
    "title": "autoselect",
    "description": "This page provides detailed information about autoselect feature in OpenBB\n  Terminal with its source code. It outlines parameters and returns of statistical\n  forecasting model and autoselect chart module in python.",
    "keywords": [
      "autoselect",
      "statistical forecasting",
      "parameters",
      "returns",
      "forecasting model",
      "chart"
    ]
  },
  "forecast.brnn": {
    "title": "brnn",
    "description": "This page provides comprehensive information about the BRNN function\n  in the OpenBB finance library. It details how to perform Block RNN forecasting and\n  display the forecast with parameters and examples. The page is highly specific to\n  Python developers working in finance and forecasting.",
    "keywords": [
      "BRNN Forecast",
      "OpenBB Forecast",
      "Python forecasting",
      "Data series forecasting",
      "RNN",
      "LSTM",
      "GRU",
      "Chart Display",
      "Forecasting parameters"
    ]
  },
  "forecast.clean": {
    "title": "clean",
    "description": "The clean function in OpenBB's forecasting toolkit fills or drops NaN\n  values on a given dataset, improving data quality.",
    "keywords": [
      "clean function OpenBB",
      "forecasting toolkit",
      "data cleaning",
      "fill NaN values",
      "drop NaN values",
      "dataset",
      "data quality improvement"
    ]
  },
  "forecast.combine": {
    "title": "combine",
    "description": "Learn how to use the combine function in OpenBB programming library to\n  add columns to dataframes. This page provides details on parameters, returns, and\n  even source code.",
    "keywords": [
      "Combine function",
      "Data manipulation",
      "Dataframes",
      "Forecasting model",
      "Python library",
      "Programming",
      "Source code",
      "Add column",
      "Data analysis"
    ]
  },
  "forecast.corr": {
    "title": "corr",
    "description": "This page shares details on how to use 'corr' and 'corr_chart' functions\n  of OpenBB Terminal's forecast module. The 'corr' function returns correlation for\n  a given DataFrame, and 'corr_chart' function plots correlation coefficients for\n  dataset features.",
    "keywords": [
      "forecast module",
      "corr function",
      "correlation coefficients",
      "data analysis",
      "corr_chart function",
      "plot correlation coefficients"
    ]
  },
  "forecast.delete": {
    "title": "delete",
    "description": "OpenBB's delete function page. The function takes the data and column\n  parameters. There are no return values.",
    "keywords": [
      "openbb.forecast.delete",
      "delete function",
      "data parameter",
      "column parameter"
    ]
  },
  "forecast.delta": {
    "title": "delta",
    "description": "The page is a detailed guide on how to calculate the percent change of\n  a variable using the 'delta' function in the OpenBBTerminal's forecast model. It\n  demonstrates how to use the 'openbb.forecast.delta' function through Python code.",
    "keywords": [
      "delta",
      "'%change calculation'",
      "variable change",
      "forecast model",
      "openbb.forecast.delta",
      "target_column"
    ]
  },
  "forecast.desc": {
    "title": "desc",
    "description": "Detailed information on how to use the 'desc' function of the OpenBB\n  finance package in Python. The function returns statistics for a specified data\n  frame.",
    "keywords": [
      "OpenBB finance package",
      "data frame",
      "statistics",
      "forecasting",
      "parameters",
      "returns"
    ]
  },
  "forecast.ema": {
    "title": "ema",
    "description": "Documentation on how to use the EMA (Exponential Moving Average) function\n  with OpenBB Terminal. The function receives a dataset and returns a DataFrame with\n  an added EMA column, providing an indication of price trend movement.",
    "keywords": [
      "EMA",
      "Moving average",
      "Price trend",
      "Forecast",
      "Dataset",
      "Source code"
    ]
  },
  "forecast.expo": {
    "title": "expo",
    "description": "The page explores the functionalities and parameters of the 'expo' model\n  and 'chart' functions used in Probabilistic Exponential Smoothing forecasting. These\n  functions take data as input and perform operations like backtesting, retraining\n  historical and prediction. Source code links are also shared.",
    "keywords": [
      "Exponential Smoothing forecasting",
      "expo model function",
      "expo chart function",
      "Probabilistic forecasting",
      "data series operations",
      "parameters"
    ]
  },
  "forecast.export": {
    "title": "export",
    "description": "Enhance your grasp of the openbb.forecast.export function from the OpenBBTerminal,\n  which is employed to export forecasting data. This function takes no parameters\n  and does not return anything. Chances to learn more about Python source code.",
    "keywords": [
      "openbb.forecast.export",
      "forecasting",
      "data export"
    ]
  },
  "forecast.linregr": {
    "title": "linregr",
    "description": "Perform or display linear regression forecasting with OpenBB. The page\n  provides the function parameters and their explanations, as well as the return values.",
    "keywords": [
      "linear regression",
      "forecasting",
      "data analysis",
      "parameters",
      "returns",
      "prediction"
    ]
  },
  "forecast.load": {
    "title": "load",
    "description": "Documentation for the 'load' function from the OpenBB forecast library.\n  This function permits to load a custom file into a DataFrame within Python. It covers\n  instructions, source code, parameters, and returns.",
    "keywords": [
      "load",
      "custom file",
      "dataframe",
      "forecast",
      "parameters",
      "data_files",
      "data_examples"
    ]
  },
  "forecast.mom": {
    "title": "mom",
    "description": "This page provides information about the momentum oscillator 'mom' function\n  in the OpenBB forecast module. It explains the parameters and returns a DataFrame\n  with an added MOM column.",
    "keywords": [
      "momentum oscillator",
      "mom function",
      "OpenBB forecast module",
      "MOM column",
      "parameters"
    ]
  },
  "forecast.mstl": {
    "title": "mstl",
    "description": "MSTL model forecasting and charting documentation, including code and\n  parameter documentation. Details the use of OpenBB.forecast.mstl function in processing\n  time-series data for predictive analysis.",
    "keywords": [
      "MSTL",
      "forecasting",
      "OpenBB.forecast.mstl",
      "time-series data",
      "predictive analysis",
      "code",
      "model",
      "parameters"
    ]
  },
  "forecast.nbeats": {
    "title": "nbeats",
    "description": "Learn how to perform NBEATS Forecasting with OpenBB Finance. Explore\n  the parameters, their descriptions, and learn how to properly tune them for optimal\n  forecasting results.",
    "keywords": [
      "NBEATS Forecasting",
      "OpenBB Finance",
      "forecast parameters",
      "training models",
      "machine learning",
      "data science",
      "time series prediction"
    ]
  },
  "forecast.nhits": {
    "title": "nhits",
    "description": "This is a Docusaurus page that displays in-depth information on forecasting\n  using the OpenBB's NhitsModel. It provides details on parameters, returns and also\n  provides source code links to the OpenBB finance's Github repository.",
    "keywords": [
      "Docusaurus",
      "nhits",
      "forecasting",
      "NhitsModel",
      "nhits_chart",
      "pd.Series",
      "title",
      "description",
      "keywords",
      "metadata",
      "marketing",
      "analysis",
      "TimeSeries",
      "NHiTSModel"
    ]
  },
  "forecast.plot": {
    "title": "plot",
    "description": "Learn how to harness the power of OpenBB's financial forecasting functions\n  such as the plot and plot_chart to visualize data. These Python functions extract\n  dataframes and accept options for export format and external plot axes.",
    "keywords": [
      "plot data visualization",
      "OpenBB finance",
      "forecast",
      "dataframe",
      "export format",
      "docusaurus tabs",
      "optional axes"
    ]
  },
  "forecast.regr": {
    "title": "regr",
    "description": "'The page covers two main aspects of the OpenBB finance platform: Regression\n  Forecasting and Displaying Regression Forecasting. It provides source codes, defines\n  parameters and returns related to the regression model and data. Users can find\n  additional features like forecasting horizon, historical forecasting, and prediction\n  capabilities. The option of view-chart allows users to visualise the data forecast.'",
    "keywords": [
      "Regression Forecasting",
      "Source code",
      "OpenBB finance",
      "parameters",
      "returns",
      "charts",
      "perform analysis",
      "forecast horizon",
      "historical forecasting",
      "data series",
      "Regression Model",
      "mean average precision error",
      "RNN model",
      "Predictions",
      "Adjusted Data"
    ]
  },
  "forecast.rename": {
    "title": "rename",
    "description": "The rename function in openbb.forecast allows the renaming of a column\n  in a dataframe. Contains details on parameters, returns and a link to the source\n  code.",
    "keywords": [
      "rename column",
      "dataframe",
      "openbb forecast"
    ]
  },
  "forecast.rnn": {
    "title": "rnn",
    "description": "Learn about our Recurrent Neural Networks (RNN) forecasting models in\n  OpenBB Terminal's documentation. This includes instructions on how to perform RNN\n  forecasting, parameters used, returns and how to display an RNN forecast chart.",
    "keywords": [
      "RNN",
      "forecasting",
      "training model",
      "Parameters",
      "Returns",
      "chart",
      "machine learning",
      "predict",
      "AI",
      "Neural networks"
    ]
  },
  "forecast.roc": {
    "title": "roc",
    "description": "This documentation page provides information and implementation details\n  about the 'roc' (Rate of Change) function in OpenBB, used to calculate momentum\n  oscillations in a given dataset.",
    "keywords": [
      "roc function",
      "Rate of Change",
      "openbb.forecast.roc",
      "momentum oscillation",
      "Forecasting"
    ]
  },
  "forecast.rsi": {
    "title": "rsi",
    "description": "This document provides detailed information about the RSI (Relative Strength\n  Index) function in OpenBB.finance, including how to use this momentum indicator\n  to measure recent price changes. The function uses a Pandas DataFrame to calculate\n  the RSI and add it back to your dataset. The page also links to the function's source\n  code.",
    "keywords": [
      "RSI",
      "momentum indicator",
      "price changes",
      "OpenBB.finance",
      "forecast",
      "Pandas DataFrame",
      "RSI calculation"
    ]
  },
  "forecast.rwd": {
    "title": "rwd",
    "description": "This page represents the functions for Random Walk with Drift (RWD) forecasting\n  including the model and chart view. It provides parameters, their types, descriptions,\n  and default settings, and explains the purpose and results of each function.",
    "keywords": [
      "rwd",
      "Random Walk with Drift forecasting",
      "forecasting model",
      "parameter description",
      "OpenBB-finance",
      "model object",
      "rwd view",
      "chart display",
      "data series",
      "fcast values",
      "predict",
      "start window",
      "forecast horizon",
      "export",
      "residuals",
      "forecast only",
      "naive"
    ]
  },
  "forecast.season": {
    "title": "season",
    "description": "The page provides details on the 'openbb.forecast.season_chart' function.\n  This function is used to plot seasonality from a dataset. It includes information\n  about the parameters, the return value, and a link to the source code.",
    "keywords": [
      "openbb.forecast.season_chart",
      "season chart",
      "plot seasonality",
      "dataset",
      "dataframe",
      "time lag",
      "max lag",
      "confidence interval"
    ]
  },
  "forecast.seasonalnaive": {
    "title": "seasonalnaive",
    "description": "The Seasonal Naive forecasting page provides thorough documentation for\n  using and interpreting the results of the Seasonal Naive model and the Seasonal\n  Naive chart. It includes details on parameters, returns, and source code locations.\n  The page is enriched with appropriate examples aiding in easy understanding and\n  implementation of the functionalities.",
    "keywords": [
      "Seasonal Naive forecasting",
      "Source Code",
      "forecast.seasonalnaive",
      "forecast.seasonalnaive_chart",
      "Parameters",
      "Returns",
      "data series",
      "forecast values",
      "precision",
      "Display SeasonalNaive Model",
      "residuals",
      "forecast only",
      "naive"
    ]
  },
  "forecast.show": {
    "title": "show",
    "description": "Detailed documentation of OpenBB finance's 'show' and 'show_chart' functions.\n  Learn how to effectively use these functions in your data analysis with clear instructions\n  and direct source code links.",
    "keywords": [
      "OpenBB finance",
      "Documentation",
      "Programming",
      "show function",
      "show_chart function",
      "Source Code"
    ]
  },
  "forecast.signal": {
    "title": "signal",
    "description": "This documentation page provides detailed insight on 'signal', a price\n  signal based on short/long term price, with instructions on parameters to be entered\n  and returns received.",
    "keywords": [
      "price signal",
      "short/long term price",
      "openbb.forecast.signal",
      "parameters",
      "returns",
      "dataframe",
      "signal column",
      "dataset"
    ]
  },
  "forecast.sto": {
    "title": "sto",
    "description": "Page about the Stochastic Oscillator (STO) function in the OpenBB library.\n  It includes information about calculating momentum indicators, source code, parameters,\n  and what it returns.",
    "keywords": [
      "sto",
      "stochastic oscillator",
      "momentum indicator",
      "forecasting",
      "k & d columns",
      "dataset"
    ]
  },
  "forecast.tcn": {
    "title": "tcn",
    "description": "This documentation page provides information on how to use the 'tcn'\n  functionality of OpenBBTerminal. This enables you to perform Temporal Convolutional\n  Network (TCN) forecasting and display the forecast using OpenBB Platform's resources.",
    "keywords": [
      "Temporal Convolutional Network",
      "TCN forecasting",
      "OpenBB platform",
      "tcn_model.py",
      "tcn_view.py",
      "time series prediction",
      "Forecast visualization",
      "Source code",
      "Predictive analytics"
    ]
  },
  "forecast.tft": {
    "title": "tft",
    "description": "This Docusaurus page provides in-depth information on the use of Temporal\n  Fusion Transformer for forecasting purposes, as implemented through OpenBB finance.\n  It includes details on the model's parameters, usage, and output, along with the\n  source code and chart visualization capabilities. The page is of high relevance\n  for developers, data analysts, and professionals dealing with predictive modeling\n  and data analysis tasks.",
    "keywords": [
      "Temporal Fusion Transformer forecasting",
      "OpenBB finance",
      "Temporal Fusion Transformer chart",
      "Machine Learning",
      "Data analysis",
      "Predictive modeling",
      "Predictive analytics",
      "Data modeling"
    ]
  },
  "forecast.theta": {
    "title": "theta",
    "description": "This page provides detailed information on how to use the 'Theta' model\n  and 'Theta' chart for financial forecasting with OpenBB. It explains various parameters\n  for accurate prediction and chart display, alongside respective source code examples.",
    "keywords": [
      "Theta model",
      "Theta chart",
      "Forecasting",
      "Financial prediction",
      "Source code",
      "Model parameters",
      "Chart display"
    ]
  },
  "forecast.trans": {
    "title": "trans",
    "description": "This section emphasizes on Transformer forecasting method implementation\n  and visualization used in OpenBB Terminal. It explains functions like how to apply\n  the approach on data, various parameters to adjust for better forecasting and display\n  the results in chart.",
    "keywords": [
      "Transformer Forecasting",
      "Time-Series Prediction",
      "Forecasting Parameters",
      "Data Visualization",
      "pandas series",
      "pandas dataframe",
      "Machine Learning",
      "Activation Function",
      "Multi-head Attention Mechanism",
      "Encoder layers",
      "Decoder layers",
      "Feedforward Network"
    ]
  },
  "forex.candle": {
    "title": "candle",
    "description": "Discover how to implement candle plotting for forex data using the OpenBB\n  platform. The page includes necessary parameters for creating a candle plot and\n  source code for reference.",
    "keywords": [
      "forex",
      "candle",
      "fx data",
      "moving averages",
      "matplotlib",
      "OpenBB.finance"
    ]
  },
  "forex.fwd": {
    "title": "fwd",
    "description": "This documentation page provides the syntax and details for extracting\n  forward rates from fxempire using the OpenBB.finance OpenBBTerminal, including the\n  parameters required and the return type. The page is of significant utility to users\n  seeking to navigate the forex section of the OpenBBTerminal.",
    "keywords": [
      "fwd function",
      "fxempire",
      "Forward rates",
      "forex",
      "OpenBB.finance",
      "currency conversion",
      "USD",
      "EUR",
      "parameters",
      "returns"
    ]
  },
  "forex.get_currency_list": {
    "title": "get_currency_list",
    "description": "Documentation page for the get_currency_list function which loads currency\n  codes from a local file in the OpenBB finance platform.",
    "keywords": [
      "get_currency_list function",
      "OpenBB finance platform",
      "Currency codes",
      "Local file",
      "Forex",
      "Open source finance platform",
      "Finance",
      "Function Documentation"
    ]
  },
  "forex.load": {
    "title": "load",
    "description": "The page provides an explanation of the 'load' feature that is used to\n  load forex data for two given symbols. It includes the source code link and details\n  about the parameters including to_symbol, from_symbol, resolution, interval, start_date,\n  source, and verbose.",
    "keywords": [
      "forex data",
      "currency symbols",
      "forex parameters",
      "load forex data",
      "forex data source",
      "YahooFinance forex data",
      "data resolution",
      "data interval",
      "verbose data loading"
    ]
  },
  "forex.quote": {
    "title": "quote",
    "description": "Documentation on how to get forex quotes using the OpenBB Terminal. It\n  covers the different parameters that can be used, return types and also gives example\n  usage.",
    "keywords": [
      "OpenBB Terminal Documentation",
      "Forex Quotes",
      "Python SDK",
      "OpenBB forex.quote function",
      "Forex Quote Parameter Instructions",
      "YahooFinance Forex API",
      "AlphaVantage Forex API"
    ]
  },
  "forex.oanda.calendar": {
    "title": "calendar",
    "description": "Provides a comprehensive guide on the Oanda calendar functionality in\n  the OpenBB finance package. Details include how to request data of significant events,\n  parameters for currency pair and days, model and view interfaces, and corresponding\n  source code.",
    "keywords": [
      "oanda",
      "forex",
      "calendar",
      "events",
      "data",
      "currency pair",
      "advance",
      "model",
      "view",
      "chart",
      "OpenBB-finance"
    ]
  },
  "forex.oanda.cancel": {
    "title": "cancel",
    "description": "This page describes two methods to cancel a pending order in OpenBB's\n  forex trading system using Oanda. It includes Python functions to cancel an order\n  by ID from either the model or chart view.",
    "keywords": [
      "cancel pending order",
      "Oanda",
      "forex",
      "python function"
    ]
  },
  "forex.oanda.candle": {
    "title": "candle",
    "description": "The page provides detailed info on 'candle' functions within the OpenBB\n  forex category for Oanda. It covers methods to request candle chart data and display\n  the candle chart, along with their respective parameters and return types. Source\n  links for Python code are included.",
    "keywords": [
      "candle",
      "chart",
      "Forex",
      "granularity",
      "data points",
      "Oanda",
      "currency pair",
      "Source Code",
      "matplotlib",
      "additional charts"
    ]
  },
  "forex.oanda.close": {
    "title": "close",
    "description": "Documentation for methods used in closing trades and viewing charts in\n  the OpenBB fin-tech software. The page gives a detailed explanation about their\n  use, parameters, and return values.",
    "keywords": [
      "finance software",
      "trade",
      "chart",
      "Oanda",
      "forex",
      "function"
    ]
  },
  "forex.oanda.listorders": {
    "title": "listorders",
    "description": "Detailed documentation page explaining how to request the orders list\n  from Oanda using OpenBB's terminal. It covers both Model and Chart methods, each\n  with separate tabs explaining the parameters needed.",
    "keywords": [
      "Oanda",
      "orders list",
      "Forex",
      "API documentation",
      "order_state",
      "order_count",
      "accountID"
    ]
  },
  "forex.oanda.openpositions": {
    "title": "openpositions",
    "description": "This documentation page provides details about the OpenBB 'open positions'\n  function in forex trading with Oanda. Learn about the parameters including account\n  ID and review the source code in Python.",
    "keywords": [
      "open positions",
      "forex",
      "Oanda",
      "account ID",
      "function parameters",
      "python code"
    ]
  },
  "forex.oanda.opentrades": {
    "title": "opentrades",
    "description": "This page provides information on the 'opentrades' function in the OpenBB\n  Python library. It provides sections on how to request open trades data and view\n  open trades using the forex Oanda module, complete with source code for reference.",
    "keywords": [
      "opentrades",
      "forex",
      "Oanda",
      "trade data",
      "open trades chart"
    ]
  },
  "forex.oanda.order": {
    "title": "order",
    "description": "This page provides detailed documentation on how to create buy/sell trade\n  orders using OpenBB Terminal's 'forex.oanda' module. It includes source code, function\n  definitions, parameters, and return information to successfully place orders.",
    "keywords": [
      "Forex",
      "Oanda",
      "Order",
      "Buy Order",
      "Sell Order",
      "Account ID",
      "Currency Pair",
      "Price",
      "Units",
      "Order Chart"
    ]
  },
  "forex.oanda.orderbook": {
    "title": "orderbook",
    "description": "This documentation page hosts information on 'Orderbook' operations in\n  forex trading using the 'Oanda' platform, powered by 'OpenBB'. It includes Python\n  source code, various parameters, and return types. Also addressed is plotting an\n  'Orderbook' chart with 'matplotlib'.",
    "keywords": [
      "orderbook",
      "oanda",
      "forex",
      "currency pair",
      "accountID",
      "orderbook chart",
      "matplotlib",
      "pandas DataFrame"
    ]
  },
  "forex.oanda.pending": {
    "title": "pending",
    "description": "This page explains how to get information on pending orders using the\n  OpenBB Terminal. The documentation includes specific source code for the Forex market\n  with OANDA, detailing parameters and returns including the AccountID. The page also\n  provides a link to the relevant source code on GitHub.",
    "keywords": [
      "Forex",
      "OANDA",
      "AccountID",
      "Pending orders",
      "OpenBB Forex OANDA Pending",
      "Source Code",
      "Pending chart"
    ]
  },
  "forex.oanda.positionbook": {
    "title": "positionbook",
    "description": "Improve your understanding of the positionbook functionality on the OpenBBTerminal.\n  Discover how to request position book data and plot a position book for an instrument\n  if Oanda provides one. Detailed source codes and parameter descriptions are provided\n  to facilitate its usage.",
    "keywords": [
      "positionbook",
      "plotting",
      "Oanda",
      "forex",
      "data frame",
      "parameters",
      "currency pair",
      "matplotlib",
      "axes"
    ]
  },
  "forex.oanda.price": {
    "title": "price",
    "description": "This marketing page provides information on how to request and view forex\n  prices with the modules in OpenBB-finance. It outlines parameters and returns for\n  each featured function.",
    "keywords": [
      "OpenBB-finance",
      "forex prices",
      "oanda",
      "price request",
      "price view",
      "currency pair",
      "functions",
      "parameters",
      "returns"
    ]
  },
  "forex.oanda.summary": {
    "title": "summary",
    "description": "This is a comprehensive documentation on the functionality of creating\n  an Oanda account summary using OpenBB-Finance. Covers Python source codes, parameters\n  and returns on model and chart tabs for summary creation.",
    "keywords": [
      "Oanda account summary",
      "Source Code",
      "OpenBB finance",
      "forex",
      "oanda_model.py",
      "oanda_view.py",
      "account ID",
      "TabItem",
      "Tabs",
      "Union",
      "summary chart"
    ]
  },
  "futures.curve": {
    "title": "curve",
    "description": "The documentation page provides detailed instructions on how to retrieve\n  and display curve futures using the OpenBB Python library, with source code provided.\n  The API functions interact with data from Yahoo Finance and include customization\n  options for data representation and export format.",
    "keywords": [
      "curve futures",
      "Yahoo Finance",
      "futures data",
      "data visualization",
      "matplotlib",
      "API documentation"
    ]
  },
  "futures.historical": {
    "title": "historical",
    "description": "The documentation provides comprehensive details on sourcing historical\n  data from Yahoo Finance using the OpenBB Python library. It covers the use of future\n  timeseries symbols and the ways to display, format and export the data.",
    "keywords": [
      "historical data",
      "Yahoo Finance",
      "future timeseries",
      "futures",
      "expiry date",
      "matplotlib.axes._axes.Axes",
      "export data",
      "raw format"
    ]
  },
  "futures.search": {
    "title": "search",
    "description": "This documentation page provides details on the 'search' function related\n  to future investments as available on OpenBB-finance. It covers information on various\n  parameters like 'category', 'exchange', and 'description' to refine search.",
    "keywords": [
      "openbb.finance search function",
      "future investments search",
      "Yahoo finance",
      "finance function Source code",
      "search parameters"
    ]
  },
  "keys.av": {
    "title": "av",
    "description": "This documentation page provides detailed instructions on how to set\n  the Alpha Vantage key using OpenBB Terminal. It includes descriptions for parameters,\n  information on returns, and usage examples.",
    "keywords": [
      "Alpha Vantage key",
      "API key",
      "Functions",
      "Global settings",
      "Environment variables",
      "Jupyter notebook"
    ]
  },
  "keys.binance": {
    "title": "binance",
    "description": "This documentation page provides information on how to set Binance keys\n  using the openbb_terminal sdk, including a detailed overlook of the parameters and\n  returns.",
    "keywords": [
      "binance",
      "API key",
      "API secret",
      "openbb_terminal sdk",
      "Jupyter notebook session",
      "terminal environment variables"
    ]
  },
  "keys.bitquery": {
    "title": "bitquery",
    "description": "This documentation page is dedicated to the Bitquery key setting process\n  in the OpenBB Terminal application. Learn how to set API keys, understand the use\n  of environment variables, and follow practical examples using the Python language\n  in a Jupyter Notebook environment.",
    "keywords": [
      "Bitquery",
      "API Key",
      "Setting Key",
      "Environment Variables",
      "Jupyter Notebook",
      "Terminal"
    ]
  },
  "keys.cmc": {
    "title": "cmc",
    "description": "This page provides the process of setting the Coinmarketcap key, it explains\n  the parameters involved and gives an example of how it can be done. The topic is\n  important for users who want to integrate their projects with Coinmarketcap's API.",
    "keywords": [
      "Coinmarketcap",
      "API",
      "key setting",
      "Jupyter notebook",
      "openbb_terminal",
      "environment variables"
    ]
  },
  "keys.coinbase": {
    "title": "coinbase",
    "description": "This page provides a detailed guide on setting up a Coinbase key using\n  the OpenBBTerminal. Learn how to input your API key, secret, and passphrase. Understand\n  the functionality of persist and show_output parameters in the context of your Jupyter\n  notebook session and terminal environment variables.",
    "keywords": [
      "coinbase",
      "coinbase key setup",
      "API key set",
      "openbb_terminal",
      "terminal environment variables",
      "coinbase API",
      "API secret",
      "coinbase passphrase"
    ]
  },
  "keys.coinglass": {
    "title": "coinglass",
    "description": "The page provides instructions on how to set the Coinglass key using\n  the openbb module of the OpenBBTerminal. It gives details on the parameters used\n  and their functionality, return types, and examples.",
    "keywords": [
      "Coinglass key",
      "openbb module",
      "API key",
      "Jupyter notebook session",
      "terminal environment variables"
    ]
  },
  "keys.cpanic": {
    "title": "cpanic",
    "description": "This page contains detailed information regarding the cpanic function\n  of OpenBB Terminal. It explains how to set the Cpanic key including parameters,\n  results, and examples.",
    "keywords": [
      "Python SDK",
      "API key management",
      "cpanic function",
      "environment variables",
      "Jupyter notebook"
    ]
  },
  "keys.degiro": {
    "title": "degiro",
    "description": "This page provides information on how to set the Degiro key using the\n  OpenBB terminal. You'll learn about parameters like username, password, and optional\n  fields like secret, persist and show_output. It also includes code examples for\n  better understanding.",
    "keywords": [
      "Degiro key",
      "Set Degiro key",
      "username",
      "password",
      "persist",
      "show_output",
      "Jupyter notebook",
      "terminal environment variables",
      "api key change"
    ]
  },
  "keys.eodhd": {
    "title": "eodhd",
    "description": "This is a documentation page for the 'set Eodhd key' functionality of\n  the OpenBB software. It provides the Python code, parameters and their descriptions,\n  return values, and an example on how to use the function.",
    "keywords": [
      "eodhd",
      "api key",
      "parameters",
      "returns",
      "examples",
      "jupyter",
      "terminal environment variables"
    ]
  },
  "keys.ethplorer": {
    "title": "ethplorer",
    "description": "This page provides documentation on how to set the Ethplorer key in the\n  OpenBB finance terminal. It includes explanations of the parameters and gives examples\n  of how to use this function.",
    "keywords": [
      "Ethplorer",
      "API key",
      "Documentation",
      "Finance",
      "Example",
      "Source Code",
      "Parameters"
    ]
  },
  "keys.finnhub": {
    "title": "finnhub",
    "description": "This page provides information on setting up the Finnhub API key in the\n  OpenBB terminal environment, with code implementation examples.",
    "keywords": [
      "Finnhub",
      "API key",
      "OpenBB terminal",
      "Python SDK",
      "Jupyter notebook",
      "Environment variables"
    ]
  },
  "keys.fmp": {
    "title": "fmp",
    "description": "This page provides a guide for setting the Financial Modeling Prep API\n  key using the OpenBB Terminal. It covers parameters to set the key, adjusting the\n  persist and show_output options, and an example of usage.",
    "keywords": [
      "Financial Modeling Prep",
      "API key",
      "set api key",
      "openbb.keys.fmp",
      "persist",
      "show_output"
    ]
  },
  "keys.fred": {
    "title": "fred",
    "description": "This page provides thorough instructions for setting up a FRED key in\n  the OpenBB Terminal Python environment, including guidelines for its use within\n  a Jupyter notebook session or as a global terminal environment variable. Examples\n  of correct usage and behaviors are also provided.",
    "keywords": [
      "FRED Key",
      "OpenBB terminal",
      "API key",
      "Jupyter notebook session",
      "terminal environment variables",
      "Status of key set",
      "openbb_terminal.sdk"
    ]
  },
  "keys.get_keys_info": {
    "title": "get_keys_info",
    "description": "Understand more about the get_keys_info function in OpenBBTerminal, which\n  provides info on available APIs usable in set_keys. Find the source code link, how\n  to use the function, the parameter it takes, and what it returns.",
    "keywords": [
      "get_keys_info",
      "APIs",
      "set_keys",
      "openbb.keys",
      "parameters",
      "returns",
      "type",
      "description",
      "Dict[str, List[str]]",
      "Dictionary",
      "API keys",
      "arguments"
    ]
  },
  "keys.github": {
    "title": "github",
    "description": "The page guides users on how to set a GitHub API key using the OpenBBTerminal.\n  It provides explanations about the parameters involved and gives a brief glimpse\n  into the possible return values. The page also includes code examples as useful\n  guidance.",
    "keywords": [
      "github",
      "API key",
      "key set",
      "terminal environment variables",
      "Jupyter notebook session",
      "key persistence"
    ]
  },
  "keys.glassnode": {
    "title": "glassnode",
    "description": "This documentation page provides a detailed guide on how to set the Glassnode\n  API key using the openbb.keys.glassnode method in the OpenBB Python library. It\n  includes a breakdown of parameters, return values, and a code example for easy comprehension.",
    "keywords": [
      "Glassnode",
      "API key",
      "Environment variable",
      "Jupyter notebook"
    ]
  },
  "keys.iex": {
    "title": "iex",
    "description": "This documentation provides information about the 'iex' function for\n  setting the IEX Cloud key using the OpenBB terminal. The function helps users to\n  set their API key with optional parameters such as persist and show_output for additional\n  functionality. Use this function to easily integrate your application with the IEX\n  Cloud services.",
    "keywords": [
      "iex",
      "OpenBB terminal",
      "API key",
      "IEX Cloud",
      "api key setting",
      "openbb.keys.iex",
      "code documentation",
      "coding",
      "programming",
      "software development",
      "persist",
      "show_output"
    ]
  },
  "keys.messari": {
    "title": "messari",
    "description": "This page deals with details on setting the Messari key in the OpenBB\n  finance terminal. It highlights on parameters such as API key, the persist and show_output\n  options and also provides an example of how to use the openbb.keys.messari function.",
    "keywords": [
      "OpenBB terminal",
      "Messari key",
      "API key",
      "Parameters",
      "openbb.keys.messari function",
      "example usage",
      "persist",
      "show_output"
    ]
  },
  "keys.mykeys": {
    "title": "mykeys",
    "description": "This documentation page offers detailed instructions on how to get currently\n  set API keys using the OpenBB finance mykeys function. Includes parameter descriptions,\n  return types, and usage examples.",
    "keywords": [
      "API keys",
      "OpenBB finance",
      "mykeys function",
      "Parameters",
      "Return types",
      "Examples"
    ]
  },
  "keys.news": {
    "title": "news",
    "description": "This page provides information about the 'Set News key' feature in the\n  OpenBB Terminal. Learn how to use the function, understand the parameters and returns,\n  and see use-cases in Python code examples.",
    "keywords": [
      "OpenBB Terminal documentation",
      "Set News key function",
      "API keys",
      "Python code examples",
      "OpenBB SDK",
      "terminal environment variables",
      "Change API key",
      "Jupyter notebook sessions"
    ]
  },
  "keys.oanda": {
    "title": "oanda",
    "description": "This page explains how to set the Oanda key using the OpenBB Terminal.\n  It includes parameters and examples.",
    "keywords": [
      "oanda",
      "set key",
      "parameters",
      "examples",
      "account",
      "access token",
      "account type",
      "persist",
      "show output"
    ]
  },
  "keys.polygon": {
    "title": "polygon",
    "description": "This documentation is about the 'polygon' function in the OpenBB Terminal\n  Python SDK. It details how the function accepts a polygon API key, and settings\n  to persist or show output.",
    "keywords": [
      "OpenBB Terminal SDK",
      "Polygon API key",
      "openbb.keys.polygon function",
      "Python SDK",
      "API key management",
      "Environment variables"
    ]
  },
  "keys.quandl": {
    "title": "quandl",
    "description": "This documentation page describes how to set the Quandl Key in OpenBB\n  finance using Python. It provides parameters, return types, and code examples.",
    "keywords": [
      "Quandl Key",
      "OpenBB finance",
      "API key",
      "Jupyter notebook",
      "terminal environment variables",
      "parameters",
      "return types",
      "code examples"
    ]
  },
  "keys.reddit": {
    "title": "reddit",
    "description": "The documentation page provides information on how to set Reddit API\n  keys using openbb_terminal's Python SDK. It lays out detailed procedures to establish\n  Reddit's client id and client secret for authentication. The page also explains\n  defaults and optional parameters including user credentials and options for API\n  key persistence.",
    "keywords": [
      "Reddit API",
      "openbb keys",
      "Reddit client id",
      "Reddit client secret",
      "Reddit authentication",
      "openbb_terminal",
      "Python SDK",
      "API setting",
      "API key",
      "User credentials",
      "Jupyter notebook",
      "Environment variables",
      "Status string"
    ]
  },
  "keys.rh": {
    "title": "rh",
    "description": "This page provides detailed information on setting the Robinhood key\n  using the openbb keys function. It includes source code, parameters description,\n  return types, and usage examples. This Python SDK function allows users to handle\n  their Robinhood key in different environments including Jupyter notebook sessions\n  and terminal environment variables.",
    "keywords": [
      "Robinhood",
      "keys",
      "username and password",
      "API key",
      "Jupyter notebook session",
      "terminal environment variables"
    ]
  },
  "keys.santiment": {
    "title": "santiment",
    "description": "Detailed documentation on how to set the Santiment API key using the\n  OpenBB-Terminal SDK. Instructions and examples are provided, including parameters\n  for optional persistence and output display.",
    "keywords": [
      "Santiment key",
      "API key",
      "OpenBB-Terminal",
      "SEO for Documentation",
      "Document SEO",
      "Persist Key",
      "Show Output",
      "Jupyter Notebook"
    ]
  },
  "keys.set_keys": {
    "title": "set_keys",
    "description": "Guide on how to set API keys in bundle with OpenBB finance terminal,\n  including parameters, return values and examples. Contains source code link",
    "keywords": [
      "OpenBB terminal",
      "API keys",
      "Set keys",
      "Python code",
      "Source code",
      "Jupyter notebook",
      "Finance",
      "Environment variables",
      "Programming guide"
    ]
  },
  "keys.si": {
    "title": "si",
    "description": "This page provides a guide on how to set the Sentimentinvestor key using\n  OpenBB terminal. It explains the parameters and returns of the function, including\n  examples demonstrating its use.",
    "keywords": [
      "Sentimentinvestor",
      "API key",
      "OpenBB terminal",
      "terminal environment variables",
      "Jupyter notebook"
    ]
  },
  "keys.smartstake": {
    "title": "smartstake",
    "description": "The page provides detailed documentation on 'smartstake' function of\n  the OpenBB Python SDK. This function is used to set the SmartStake API key for the\n  current session or globally in terminal environment. Includes examples of usage\n  and link to source code.",
    "keywords": [
      "SmartStake API key",
      "API key setting",
      "Python function",
      "docusaurus documentation",
      "programming",
      "environment variables"
    ]
  },
  "keys.stocksera": {
    "title": "stocksera",
    "description": "'The OpenBB project: how to set your Stocksera API key using Python.\n  Documentation provides information about parameters, return types, and examples\n  for the stocksera method.'",
    "keywords": [
      "Stocksera",
      "API Key",
      "Jupyter Notebook",
      "Environment Variables"
    ]
  },
  "keys.tokenterminal": {
    "title": "tokenterminal",
    "description": "This documentation page deals with the 'tokenterminal' function of the\n  OpenBB finance terminal. It allows users to set a Token Terminal key, which, depending\n  on the parameters, can be limited to the current session or applied globally. A\n  use-case example is also included.",
    "keywords": [
      "Token Terminal Key",
      "API Key",
      "Finance Terminal",
      "tokenterminal Function",
      "Terminal Environment Variables",
      "Jupyter Notebook"
    ]
  },
  "keys.tradier": {
    "title": "tradier",
    "description": "Learn how to set a Tradier API key in the OpenBB terminal using the 'openbb.keys.tradier'\n  Python function. This documentation provides parameter info, function usage, and\n  examples.",
    "keywords": [
      "tradier",
      "api key",
      "openbb terminal",
      "sdk",
      "openbb keys tradier",
      "terminal environment variables",
      "function usage",
      "examples"
    ]
  },
  "keys.twitter": {
    "title": "twitter",
    "description": "This page explains how to set a Twitter API key in OpenBB Terminal, including\n  a detailed explanation of parameters and example code. Learn how to use OpenBB to\n  interact with Twitter's API.",
    "keywords": [
      "Twitter API",
      "API key",
      "Coding examples",
      "Jupyter notebook",
      "openbb keys twitter",
      "Environment variables",
      "API secret",
      "API token",
      "persist",
      "show_output"
    ]
  },
  "keys.walert": {
    "title": "walert",
    "description": "This documentation page describes how to set the Walert key in OpenBB\n  finance's Terminal. It details the parameters, return types and provides examples\n  for setting the API key.",
    "keywords": [
      "API key set",
      "Walert key",
      "Python code",
      "Source code",
      "terminal environment variables",
      "Jupyter notebook session",
      "financial software",
      "web development",
      "SEO optimization"
    ]
  },
  "portfolio.bench": {
    "title": "bench",
    "description": "This page discusses the 'bench' function, part of the OpenBB Terminal,\n  which allows users to load benchmarks into their portfolio. It provides details\n  on the parameters, method of application, and examples utilizing Python for portfolio\n  management.",
    "keywords": [
      "portfolio benchmark",
      "portfolio management",
      "portfolio load",
      "financial data",
      "portfolio operations"
    ]
  },
  "portfolio.distr": {
    "title": "distr",
    "description": "This page provides documentation on using the 'distr' and 'distr_chart'\n  functions in OpenBB Terminal's Portfolio module. Learn how to display daily returns\n  and configure parameters like the PortfolioEngine instance and return intervals.",
    "keywords": [
      "OpenBB Terminal documentation",
      "Portfolio Module",
      "Display Daily Returns",
      "PortfolioEngine instance",
      "Return intervals",
      "distr function",
      "distr_chart function",
      "Source Code"
    ]
  },
  "portfolio.dret": {
    "title": "dret",
    "description": "Detailed documentation for 'dret' function of OpenBB Terminal, allows\n  calculation of daily returns and visualization of these returns through charts.\n  This function manipulates and interprets portfolio data.",
    "keywords": [
      "dret",
      "portfolio",
      "returns",
      "PortfolioEngine",
      "visualization",
      "dret_chart",
      "daily returns",
      "data analysis"
    ]
  },
  "portfolio.es": {
    "title": "es",
    "description": "Learn how to use the openbb.portfolio.es function to calculate the portfolio\n  expected shortfall. It allows the use of different distributions and custom percentiles.",
    "keywords": [
      "openbb.portfolio.es",
      "Portfolio expected shortfall",
      "PortfolioEngine class",
      "Calculations on portfolio",
      "Portfolio distributions",
      "Portfolio percentiles",
      "openbb.portfolio.load",
      "Portfolio examples",
      "Python portfolio calculations"
    ]
  },
  "portfolio.holdp": {
    "title": "holdp",
    "description": "This page provides comprehensive details on 'holdp', a function of the\n  OpenBBTerminal. It includes information on how to get holdings of assets in percentage,\n  parameters for the function, and examples of its use.",
    "keywords": [
      "holdp function",
      "asset holding",
      "Percentage of assets",
      "PortfolioEngine",
      "Portfolio management",
      "Python functions",
      "openbb.portfolio",
      "Holdings calculation"
    ]
  },
  "portfolio.holdv": {
    "title": "holdv",
    "description": "Detailed documentation of the holdv function in portfolio module of OpenBB\n  finance dealing with getting and displaying holdings of assets. Learn how to use\n  and understand the parameters, source code and examples included.",
    "keywords": [
      "OpenBB finance documentation",
      "holdv function OpenBB",
      "portfolio module OpenBB",
      "portfolio engine",
      "get holdings value",
      "holdv chart display",
      "assets holdings",
      "Python finance tools",
      "portfolio management OpenBB",
      "OpenBB assets management"
    ]
  },
  "portfolio.load": {
    "title": "load",
    "description": "Docusaurus documentation for the load function from the openbb portfolio\n  module. Provides details about parameters and examples of how to use this function\n  to create a PortfolioEngine instance and perform portfolio calculations.",
    "keywords": [
      "PortfolioEngine object",
      "openbb portfolio",
      "transactions file path",
      "benchmark symbol",
      "full shares",
      "risk free rate",
      "portfolio calculations",
      "openbb_terminal sdk",
      "Portfolio management"
    ]
  },
  "portfolio.maxdd": {
    "title": "maxdd",
    "description": "Documentation page providing details about the maximum drawdown calculation\n  in historical series and how to display the drawdown curve. Contains examples, parameters,\n  returns, and source code links.",
    "keywords": [
      "maxdd",
      "PortfolioEngine",
      "maximum drawdown",
      "portfolio",
      "examples",
      "parameters"
    ]
  },
  "portfolio.mret": {
    "title": "mret",
    "description": "This page provides comprehensive guides and source codes on how to get\n  and display monthly returns using the functions 'mret' and 'mret_chart' respectively,\n  both under openbb.portfolio of the OpenBB Terminal.",
    "keywords": [
      "portfolio",
      "mret",
      "mret_chart",
      "Monthly returns",
      "PortfolioEngine",
      "portfolio.load",
      "openbb.portfolio.load"
    ]
  },
  "portfolio.om": {
    "title": "om",
    "description": "Learn how to use the omega ratio function to guide your portfolio management.\n  This page provides details about parameters, returns, and examples on how to apply\n  the omega ratio method in your transaction calculations using both model and chart\n  views.",
    "keywords": [
      "omega ratio",
      "portfolio management",
      "PortfolioEngine class",
      "financial transactions",
      "annualized target return",
      "portfolio load",
      "chart view"
    ]
  },
  "portfolio.perf": {
    "title": "perf",
    "description": "This page is a guide on how to get a portfolio's performance vs the benchmark\n  with the OpenBB Terminal's perf function. It includes function usage, parameters\n  explanation, return values, and examples.",
    "keywords": [
      "portfolio performance",
      "benchmark",
      "portfolio engine",
      "openbb portfolio perf",
      "performance calculations",
      "trades performance",
      "portfolio load"
    ]
  },
  "portfolio.rbeta": {
    "title": "rbeta",
    "description": "'The page provides a comprehensive guide to using the PortfolioEngine\n  for analyzing rolling beta. It discusses two key methods: calculating the rolling\n  beta using ''rbeta'' function and visualizing it using ''rbeta_chart'' function.\n  The page also provides detailed information about parameters for both methods, and\n  examples.'",
    "keywords": [
      "OpenBB portfolio",
      "PortfolioEngine",
      "rbeta",
      "rbeta_chart",
      "rolling beta",
      "SEO metadata",
      "metadata optimization",
      "code examples",
      "parameters",
      "function usage"
    ]
  },
  "portfolio.rsharpe": {
    "title": "rsharpe",
    "description": "This page talks about the rsharpe function of the OpenBB Finance. The\n  page describes two methods to get a rolling sharpe ratio and to display it. It includes\n  the source code, parameter descriptions, and usage examples.",
    "keywords": [
      "OpenBB Finance",
      "portfolio returns",
      "rsharpe function",
      "risk-free rate",
      "rolling sharpe ratio",
      "chart display",
      "plotting"
    ]
  },
  "portfolio.rsort": {
    "title": "rsort",
    "description": "This documentation page provides details about the rsort functions in\n  the OpenBB portfolio application. The rsort function calculates the rolling sortino\n  ratio for a portfolio and rsort_chart function displays this data graphically.",
    "keywords": [
      "Portfolio Management",
      "Rolling Sortino Ratio",
      "Portfolio Analysis",
      "Financial Data Visualization",
      "Python Financial Libraries",
      "Portfolio Optimization",
      "Risk Analysis",
      "Portfolio Risk Management"
    ]
  },
  "portfolio.rvol": {
    "title": "rvol",
    "description": "This page provides documentation for rvol, a feature of the OpenBB Terminal.\n  It includes details about how to get rolling volatility and display a chart of it,\n  including the use of the PortfolioEngine class and various window sizes.",
    "keywords": [
      "rolling volatility",
      "portfolio engine",
      "rvol",
      "charting",
      "volatility calculation",
      "portfolio risk analysis",
      "OpenBB SDK",
      "OpenBB rvol",
      "matplotlib",
      "rvol chart"
    ]
  },
  "portfolio.show": {
    "title": "show",
    "description": "The OpenBB Terminal's documentation page for the 'show' function, which\n  provides details on retrieving portfolio transactions using the 'PortfolioEngine'\n  class instance. It includes parameters, return types and example usage.",
    "keywords": [
      "Portfolio transactions",
      "PortfolioEngine class instance",
      "Portfolio engine",
      "pandas DataFrame",
      "openbb.portfolio.show",
      "portfolio load"
    ]
  },
  "portfolio.summary": {
    "title": "summary",
    "description": "OpenBB finance page detailing the functionality to gather portfolio and\n  benchmark return summaries. Documentation includes function parameters, return types\n  and examples. The core function openbb.portfolio.summary can perform complex calculations\n  and return a data frame of portfolio and benchmark returns summary.",
    "keywords": [
      "OpenBB finance",
      "portfolio summary",
      "benchmark returns",
      "portfolio transactions",
      "portfolio calculations",
      "cumulative returns",
      "risk free rate",
      "data frame",
      "openbb.portfolio",
      "portfolio engine"
    ]
  },
  "portfolio.var": {
    "title": "var",
    "description": "This documentation page describes the portfolio variance function in\n  OpenBB finance. It provides information on parameters, return values and usage examples\n  of the function.",
    "keywords": [
      "OpenBB finance",
      "Portfolio variance",
      "Python finance library",
      "Python code examples",
      "Financial data analysis",
      "Financial risk assessment"
    ]
  },
  "portfolio.yret": {
    "title": "yret",
    "description": "Website page provides in-depth guide on using yret, a module that delivers\n  yearly returns in quantitative finance. It includes complete procedures from loading\n  portfolio to displaying returns in graph.",
    "keywords": [
      "Yearly Returns",
      "Portfolio Management",
      "Quantitative Finance",
      "Data Visualization",
      "Open source",
      "Finance Library",
      "Benchmarking",
      "Portfolio Load",
      "yret Chart"
    ]
  },
  "portfolio.alloc.assets": {
    "title": "assets",
    "description": "This tutorial page provides information about the 'assets' function in\n  the OpenBB Terminal's Portfolio module, how to implement it and its parameters.\n  The 'assets' function is used to display a portfolio's asset allocation as compared\n  to the benchmark.",
    "keywords": [
      "Portfolio module",
      "assets function",
      "portfolio asset allocation",
      "benchmark comparison",
      "function parameters"
    ]
  },
  "portfolio.alloc.countries": {
    "title": "countries",
    "description": "This documentation page provides detailed information about the use of\n  the 'openbb.portfolio.alloc.countries' function from OpenBB Finance, which compares\n  portfolio country allocation with a benchmark.",
    "keywords": [
      "OpenBB Finance",
      "portfolio country allocation",
      "portfolio management",
      "financial modelling",
      "function documentation"
    ]
  },
  "portfolio.alloc.regions": {
    "title": "regions",
    "description": "This page provides details about the 'regions' function of the OpenBB\n  finance platform. The said function displays the portfolio region allocation in\n  comparison to the benchmark. It includes a brief overview, parameters, return values,\n  and an example usage.",
    "keywords": [
      "OpenBB finance platform",
      "portfolio region allocation",
      "benchmark comparison",
      "portfolio management",
      "portfolio allocation",
      "parameters",
      "example usage"
    ]
  },
  "portfolio.alloc.sectors": {
    "title": "sectors",
    "description": "SEO for the 'sectors' documentation page of the OpenBB finance that elaborates\n  about portfolio sector allocation compared to the benchmark.",
    "keywords": [
      "portfolio",
      "sector allocation",
      "benchmark",
      "parameters",
      "returns",
      "examples",
      "portfolio engine",
      "allocation tables",
      "recalculate allocation"
    ]
  },
  "portfolio.metric.calmar": {
    "title": "calmar",
    "description": "Documentation for the Calmar Ratio function in OpenBB Terminal, a Python\n  library. It includes parameters, type of return, and examples of use. This function\n  is a key tool for risk measurement in portfolio management, calculating the ratio\n  of the portfolio's performance to its downside risk.",
    "keywords": [
      "calmar ratio",
      "OpenBB finance",
      "portfolio metrics",
      "portfolio analysis",
      "portfolio management",
      "risk measurement",
      "Python library",
      "benchmark performance",
      "financial data analysis"
    ]
  },
  "portfolio.metric.commonsense": {
    "title": "commonsense",
    "description": "This documentation page includes details on how to get the commonsense\n  ratio for a portfolio within the OpenBB-framework using Python. It explains the\n  use of the PortfolioEngine class and provides examples using the openbb.portfolio.load\n  and openbb.portfolio.metric.commonsense functions.",
    "keywords": [
      "commonsense ratio",
      "PortfolioEngine",
      "openbb.portfolio.load",
      "openbb.portfolio.metric.commonsense"
    ]
  },
  "portfolio.metric.gaintopain": {
    "title": "gaintopain",
    "description": "On this page, learn how to use the gaintopain function from the openbb.portfolio.metric\n  package to compute a portfolio's gain-to-pain ratio based on historical data. Examples\n  and source code are provided.",
    "keywords": [
      "openbb.portfolio.metric.gaintopain function",
      "portfolio's gain-to-pain ratio",
      "PortfolioEngine class",
      "compute gain-to-pain ratio"
    ]
  },
  "portfolio.metric.information": {
    "title": "information",
    "description": "Documentation for the 'information' function of the OpenBB financial\n  library. It calculates the information ratio for different time periods based on\n  portfolio transactions.",
    "keywords": [
      "financial library",
      "information ratio",
      "portfolio transactions",
      "portfolio metrics",
      "PortfolioEngine"
    ]
  },
  "portfolio.metric.jensens": {
    "title": "jensens",
    "description": "The jensen's alpha function allows evaluation of portfolio performance,\n  taking into account a risk-free rate and an interval for rolling values. Supported\n  by OpenBB portfolio, a source for open source finance tools.",
    "keywords": [
      "jensen's alpha",
      "openbb portfolio",
      "portfolio evaluation",
      "portfolio metrics",
      "portfolio analysis",
      "portfolio performance",
      "risk free rate",
      "rolling values",
      "open source finance"
    ]
  },
  "portfolio.metric.kelly": {
    "title": "kelly",
    "description": "This page provides information on how to use the 'kelly' function from\n  the OpenBB portfolio management library. With detailed parameter explanations to\n  calculate the kelly criterion and examples of usage, it is a valuable reference\n  for portfolio management within the OpenBB environment.",
    "keywords": [
      "kelly criterion",
      "portfolio management",
      "openbb.portfolio.metric.kelly",
      "portfolio engine",
      "portfolio load"
    ]
  },
  "portfolio.metric.kurtosis": {
    "title": "kurtosis",
    "description": "This documentation page provides information on how to get the kurtosis\n  for portfolio and benchmark selected using the OpenBB finance portfolio engine.\n  The page contains source code, parameters, return types and examples.",
    "keywords": [
      "OpenBB finance portfolio engine",
      "portfolio metrics",
      "kurtosis",
      "portfolio and benchmark",
      "data analysis",
      "PortfolioEngine class instance",
      "portfolio load"
    ]
  },
  "portfolio.metric.maxdrawdown": {
    "title": "maxdrawdown",
    "description": "This page provides details on how to get the maximum drawdown ratio for\n  a selected portfolio and benchmark using the 'maxdrawdown' function in the OpenBB\n  application. Learn how to effectively use and apply this feature in your portfolio\n  management practice.",
    "keywords": [
      "Portfolio Management",
      "Benchmarking",
      "Maximum Drawdown",
      "Metrics",
      "PortfolioEngine",
      "Portfolio analysis",
      "Market analysis"
    ]
  },
  "portfolio.metric.payoff": {
    "title": "payoff",
    "description": "Documentation for openbb.portfolio.metric.payoff function. This function\n  allows to get the payoff ratio of a portfolio during different time periods. The\n  function does not take any parameters and returns a DataFrame with values.",
    "keywords": [
      "payoff ratio",
      "portfolio",
      "time periods",
      "portfolio metric",
      "no losing trades"
    ]
  },
  "portfolio.metric.profitfactor": {
    "title": "profitfactor",
    "description": "This page provides detailed information regarding the 'profitfactor'\n  function in the openbb.portfolio.metric package. It includes a brief description,\n  parameters details, returns types, and some examples of usage.",
    "keywords": [
      "openbb portfolio metric",
      "profitfactor function",
      "PortfolioEngine",
      "code example",
      "openbb.portfolio.load",
      "trading portfolio",
      "profit factor"
    ]
  },
  "portfolio.metric.rsquare": {
    "title": "rsquare",
    "description": "Detailed information about using the 'rsquare' function in the 'openbb'\n  portfolio metric, which calculates the R2 Score between a portfolio and a selected\n  benchmark. The page includes examples of usage.",
    "keywords": [
      "portfolio",
      "benchmark",
      "R2 Score",
      "PortfolioEngine",
      "openbb.portfolio.metric.rsquare",
      "openbb.portfolio.load"
    ]
  },
  "portfolio.metric.sharpe": {
    "title": "sharpe",
    "description": "Get sharpe ratio for a portfolio and benchmark using the OpenBB Terminal.\n  This page provides a detailed description of how to use the Sharpe ratio function\n  with code examples in Python.",
    "keywords": [
      "Sharpe ratio",
      "portfolio",
      "PortfolioEngine",
      "risk_free_rate",
      "openbb.portfolio.metric.sharpe",
      "financial metrics",
      "OpenBB finance",
      "portfolio analysis",
      "benchmark",
      "portfolio management",
      "risk analysis"
    ]
  },
  "portfolio.metric.skew": {
    "title": "skew",
    "description": "Understand how to calculate portfolio and benchmark skewness with the\n  OpenBBTerminal. Explore source code examples demonstrating how to harness Python\n  for financial metric calculations.",
    "keywords": [
      "portfolio skewness",
      "benchmark skewness",
      "OpenBB finance",
      "financial metrics",
      "portfolio metrics",
      "Python financial analysis",
      "skew function",
      "OpenBBTerminal examples"
    ]
  },
  "portfolio.metric.sortino": {
    "title": "sortino",
    "description": "This page includes a comprehensive coverage of how to determine the Sortino\n  ratio of a portfolio with reference to a selected benchmark using OpenBB. The page\n  contains the source code and specific examples to better illustrate the process.",
    "keywords": [
      "sortino ratio",
      "portfolio analysis",
      "risk free rate",
      "openbb.portfolio.metric.sortino",
      "portfolio",
      "benchmark"
    ]
  },
  "portfolio.metric.tail": {
    "title": "tail",
    "description": "Documentation about the OpenBB terminal's 'tail' function. The function\n  retrieves the tail ratio of portfolios, handling transactions and performing calculations.\n  Also gives details about its parameters, return types, and example usage.",
    "keywords": [
      "OpenBB terminal",
      "tail function",
      "PortfolioEngine class instance",
      "portfolio metrics",
      "transactions",
      "calculations",
      "tail ratio"
    ]
  },
  "portfolio.metric.trackerr": {
    "title": "trackerr",
    "description": "The 'trackerr' method in openbb.portfolio.metric provides tracking errors\n  over different time windows for a given portfolio. It uses the PortfolioEngine instance\n  and has an optional window parameter for rolling values. You need to call portfolio.load\n  to create a PortfolioEngine instance.",
    "keywords": [
      "trackerr",
      "PortfolioEngine",
      "tracking errors",
      "openbb portfolio",
      "portfolio metrics",
      "Portfolio calculation",
      "python portfolio",
      "openbb_terminal.sdk",
      "openbb portfolio load",
      "openbb portfolio metric",
      "Finance portfolio"
    ]
  },
  "portfolio.metric.volatility": {
    "title": "volatility",
    "description": "The volatility documentation page covers the important use of volatility\n  method for portfolio and benchmark selected using the Python module openbb. Key\n  concepts include usage of PortfolioEngine, DataFrame and function calls.",
    "keywords": [
      "volatility",
      "portfolio",
      "benchmark",
      "openbb.portfolio.metric.volatility",
      "portfolio_engine",
      "openbb.portfolio.load"
    ]
  },
  "portfolio.po.blacklitterman": {
    "title": "blacklitterman",
    "description": "The page describes the Python method for the Black Litterman model implemented\n  in the OpenBB library for optimizing portfolio weights. This method provides an\n  advanced approach in risk management and return estimation by taking into account\n  various parameters like risk-free rate, risk aversion factor, and objectives like\n  maximizing Sharpe ratio or minimizing risk.",
    "keywords": [
      "Black Litterman model",
      "Portfolio optimization",
      "Portfolio weights",
      "Risk management",
      "Return estimates",
      "Sharpe ratio",
      "Equilibrium portfolio"
    ]
  },
  "portfolio.po.dividend": {
    "title": "dividend",
    "description": "The 'dividend' feature of the OpenBB library allows optimized weight\n  allocation in portfolio based on dividend yield. The document offers detailed examples\n  and parameters of the implementation.",
    "keywords": [
      "dividend",
      "portfolio optimization",
      "po model",
      "portfolio engine",
      "weights allocation",
      "AAPL",
      "MSFT",
      "AMZN"
    ]
  },
  "portfolio.po.ef": {
    "title": "ef",
    "description": "The page highlights the use and functioning of the efficient frontier\n  model in portfolio optimization. It includes explanations about parameters used,\n  type of returns, and examples. Furthermore, it details the process for displaying\n  the efficient frontier chart.",
    "keywords": [
      "Efficient Frontier",
      "Portfolio Optimization",
      "Financial Models",
      "Risk Measure",
      "Portfolio Simulation",
      "Stock Portfolio",
      "Data Visualization",
      "Financial Software"
    ]
  },
  "portfolio.po.equal": {
    "title": "equal",
    "description": "The page provides detailed information about the equally weighted portfolio\n  (a type of portfolio optimization) in OpenBB Finance with parameters, returns and\n  python example codes.",
    "keywords": [
      "OpenBB Finance documentation",
      "Equally weighted portfolio",
      "Portfolio optimization",
      "OpenBB Portfolio po.equal function",
      "Portfolio symbols",
      "Interval, start date, end date in portfolio",
      "Returns in investment",
      "Python Finance library",
      "Portfolio performance"
    ]
  },
  "portfolio.po.file": {
    "title": "file",
    "description": "This page provides detailed information on the functionality and usage\n  of the 'Load portfolio optimization engine from file' method in the OpenBB Terminal\n  application. Examples and parameters are discussed extensively to ensure user familiarity\n  with the method.",
    "keywords": [
      "portfolio optimization",
      "load portfolio",
      "PoEngine",
      "parameters",
      "examples",
      "maxsharpe",
      "risk_free_rate"
    ]
  },
  "portfolio.po.get_properties": {
    "title": "get_properties",
    "description": "The get_properties function in OpenBB's portfolio optimization module\n  provides a list of available properties for property optimization purposes. No parameters\n  are required for this function.",
    "keywords": [
      "property optimization",
      "get_properties",
      "openbb_portfolio",
      "Python code",
      "optimizer_model"
    ]
  },
  "portfolio.po.hcp": {
    "title": "hcp",
    "description": "The page provides details on hierarchical clustering based portfolios\n  (HCP) in the OpenBBTerminal, a python tool for advanced investment strategies. It\n  describes parameters for portfolio optimization including risk measures, covariance\n  estimations, and clustering techniques. The return outcomes include portfolio weights\n  and stock returns.",
    "keywords": [
      "portfolio optimization",
      "hierarchical clustering",
      "stock returns",
      "Hierarchical Risk Parity",
      "Nested Clustered Optimization",
      "covariance matrix",
      "risk measures",
      "stocks",
      "portfolio management"
    ]
  },
  "portfolio.po.herc": {
    "title": "herc",
    "description": "The page provides detailed documentation for the Hierarchical Equal Risk\n  Contribution (HERC) method in the OpenBB Terminal's portfolio optimization module.\n  The method is used for the optimized allocation of resources in a portfolio to minimize\n  risk. The page includes a detailed explanation of input parameters, return types,\n  and code examples.",
    "keywords": [
      "HERC Method",
      "Portfolio Optimization",
      "Risk Management",
      "Hierarchical Equal Risk Contribution",
      "Financial Modelling"
    ]
  },
  "portfolio.po.hrp": {
    "title": "hrp",
    "description": "This page provides information about the Hierarchical Risk Parity (HRP)\n  function in the openbb.portfolio.po module. This function allows for portfolio optimization\n  using HRP. Detailed parameter explanations, return values, and usage examples are\n  provided.",
    "keywords": [
      "portfolio optimization",
      "Hierarchical Risk Parity",
      "openbb.portfolio.po",
      "risk management",
      "asset allocation",
      "portfolio management",
      "financial modeling"
    ]
  },
  "portfolio.po.load": {
    "title": "load",
    "description": "This page provides detailed documentation for the 'load' function of\n  the OpenBB portfolio optimization engine. It includes source code, parameters detail,\n  return type, and coding examples.",
    "keywords": [
      "portfolio optimization",
      "po.load function",
      "OpenBB portfolio",
      "PoEngine",
      "openbb_terminal.sdk",
      "coding examples",
      "software documentation",
      "parameters detail",
      "portfolio allocation",
      "AAPL",
      "MSFT",
      "AMZN",
      "Python code"
    ]
  },
  "portfolio.po.load_bl_views": {
    "title": "load_bl_views",
    "description": "This page documents the 'load_bl_views' function, part of the OpenBB's\n  portfolio optimization toolset which allows users to load an Excel file with views\n  for the Black Litterman model. Learn about inputs, outputs and usage.",
    "keywords": [
      "load_bl_views",
      "OpenBB portfolio optimization",
      "Black Litterman model",
      "Excel file loading",
      "p_views matrix"
    ]
  },
  "portfolio.po.maxdecorr": {
    "title": "maxdecorr",
    "description": "The page details the function openbb.portfolio.po.maxdecorr(), an optimization\n  tool for decorrelation weights in a portfolio. Explains parameters, returns, and\n  provides examples.",
    "keywords": [
      "maxdecorr",
      "portfolio optimization",
      "portfolio_engine",
      "log_returns",
      "covariance",
      "Ledoit and Wolf Shrinkage method",
      "Oracle Approximation Shrinkage method",
      "Shrunk Covariance method",
      "Graphical Lasso Covariance method",
      "j-LoGo Covariance method",
      "spectral method",
      "programming"
    ]
  },
  "portfolio.po.maxdiv": {
    "title": "maxdiv",
    "description": "This page is about the function 'maxdiv' of the openbb.portfolio.po.\n  It provides an overview, parameters, returns and examples of this function, which\n  is used to optimize diversification weights for portfolio. Use 'maxdiv' to maximize\n  diversity across various assets in your portfolio.",
    "keywords": [
      "maxdiv",
      "portfolio optimization",
      "diversification",
      "OpenBB portfolio",
      "OpenBB maxdiv",
      "maximize diversity",
      "portfolio weights",
      "portfolio performance",
      "portfolio examples",
      "Risk measures",
      "Portfolio risk",
      "Covariance estimation methods"
    ]
  },
  "portfolio.po.maxret": {
    "title": "maxret",
    "description": "This documentation page provides detailed information on the maxret function\n  of the OpenBB Terminal library. The function helps in optimizing maximum return\n  weights for a given stock portfolio based on several parameters.",
    "keywords": [
      "maxret function",
      "Stock portfolio optimization",
      "Maximum return weights",
      "Python library",
      "PoEngine",
      "Portfolio engine",
      "Pandas DataFrame",
      "Portfolio returns",
      "Performance dictionary",
      "Risk measures",
      "Sharpe ratio",
      "Risk free rate"
    ]
  },
  "portfolio.po.maxsharpe": {
    "title": "maxsharpe",
    "description": "This page provides comprehensive details about the openbb.portfolio.po.maxsharpe\n  function. It's a key part of OpenBB's portfolio optimization module, designed to\n  optimize the Sharpe ratio of portfolio weights. You'll also find information about\n  the parameters used by the function and examples of how to use it in portfolio management.",
    "keywords": [
      "openbb.portfolio.po.maxsharpe",
      "Portfolio Optimization",
      "Sharpe Ratio",
      "Portfolio Management",
      "Financial Risk Measure"
    ]
  },
  "portfolio.po.maxutil": {
    "title": "maxutil",
    "description": "Documentation page of the maxutil module in the OpenBB Terminal's portfolio\n  optimization tool. It includes the module's function signature with its parameters,\n  default values, and optional indicators. Specializations like risk measures and\n  return calculations are also detailed. Examples of use are provided for better understanding.",
    "keywords": [
      "Docusaurus SEO",
      "Portfolio Optimization",
      "maxutil function",
      "Portfolio Management Tools",
      "Python in Finance",
      "Algorithmic Trading",
      "Risk Measures",
      "OpenBB maxutil"
    ]
  },
  "portfolio.po.minrisk": {
    "title": "minrisk",
    "description": "This page provides a detailed explanation of the 'minrisk' function provided\n  by OpenBB, used in portfolio optimization to decrease risk. It includes information\n  about the function's parameters, return structure, and usage examples.",
    "keywords": [
      "portfolio optimization",
      "minrisk function",
      "risk minimization",
      "portfolio weights",
      "instructions",
      "parameters",
      "returns",
      "examples",
      "sharpe ratio",
      "return volatility",
      "financial portfolio"
    ]
  },
  "portfolio.po.mktcap": {
    "title": "mktcap",
    "description": "The page explains the 'mktcap' function of OpenBB Terminal's portfolio\n  optimization module. It includes detailed parametric descriptions and examples showing\n  how to use the function. The 'mktcap' function optimizes a specified portfolio according\n  to market capitalization.",
    "keywords": [
      "market capitalization",
      "portfolio optimization",
      "PoEngine",
      "portfolio engine",
      "frequency of returns",
      "arithmetic returns",
      "log returns",
      "outliers threshold",
      "nan values",
      "data interpolation",
      "allocation"
    ]
  },
  "portfolio.po.nco": {
    "title": "nco",
    "description": "This page is about the Non-Convex Optimization (NCO) model used for portfolio\n  optimization. It includes a detailed explanation of the function parameters, return\n  values, and examples of usage using the OpenBB financial software.",
    "keywords": [
      "Non-Convex Optimization",
      "portfolio optimization",
      "financial software",
      "financial modeling",
      "risk measures",
      "portfolio performance measures",
      "Sharpe ratio",
      "Value at Risk",
      "Maximum Drawdown"
    ]
  },
  "portfolio.po.plot": {
    "title": "plot",
    "description": "This documentation page outlines the functions related to plotting and\n  charting an investment portfolio using the OpenBB's po module. The page provides\n  examples of different chart types such as pie, hist, dd, and rc. It includes necessary\n  parameters for the functions and discusses the usage of a portfolio engine.",
    "keywords": [
      "plot",
      "tab",
      "po",
      "chart",
      "portfolio",
      "example",
      "pie",
      "hist",
      "dd",
      "rc",
      "engine",
      "type",
      "category",
      "parameters",
      "returns"
    ]
  },
  "portfolio.po.property": {
    "title": "property",
    "description": "This documentation discusses the use of 'property' function in OpenBB\n  Terminal's portfolio optimization module. It elaborates on how to call this function\n  with different parameters, its returns, and provides usage examples.",
    "keywords": [
      "Portfolio Optimization",
      "Financial Data",
      "OpenBB Portfolio",
      "Property Function"
    ]
  },
  "portfolio.po.relriskparity": {
    "title": "relriskparity",
    "description": "This page provides comprehensive details of the 'relriskparity' function\n  in OpenBB Terminal's portfolio optimization module. It contains a thorough explanation\n  of parameters and return value, along with Python code examples demonstrating its\n  usage.",
    "keywords": [
      "Relriskparity function",
      "Portfolio optimization",
      "Relaxed Risk Parity",
      "openbb.portfolio.po.relriskparity function",
      "Function parameters",
      "Python code example",
      "po_model.py"
    ]
  },
  "portfolio.po.riskparity": {
    "title": "riskparity",
    "description": "Documentation page on how to optimize portfolio with Risk Parity using\n  the risk budgeting approach in the OpenBB Terminal Python package. It includes parameters\n  specifications, return values, and usage examples.",
    "keywords": [
      "Risk Parity",
      "Portfolio Optimization",
      "Risk Budgeting Approach",
      "Portfolio Engine",
      "Investment Strategies"
    ]
  },
  "portfolio.po.show": {
    "title": "show",
    "description": "This documentation page talks about the 'show' function from OpenBB's\n  portfolio optimization module. It details how to display portfolio optimization\n  results using categories and portfolio engines.",
    "keywords": [
      "portfolio optimization",
      "portfolio engine",
      "show function",
      "investment categories",
      "usage examples",
      "weights",
      "performance",
      "get available categories",
      "set categories dict"
    ]
  },
  "qa.acf": {
    "title": "acf",
    "description": "This page provides a detailed description and source code of acf - an\n  OpenBB function used to plot Auto and Partial Auto Correlation of returns and change\n  in returns. One can understand how to use the function, its parameters, and view\n  examples of its use.",
    "keywords": [
      "auto correlation",
      "quantitive analysis",
      "quantitative_analysis.qa_view.py",
      "plots",
      "openbb.qa.acf",
      "codes",
      "parameters",
      "returns",
      "examples",
      "stocks.load",
      "GitHub source code"
    ]
  },
  "qa.bw": {
    "title": "bw",
    "description": "The documentation page depicts the usage and configuration options for\n  the 'bw' function in OpenBB Terminal. The function plots box and whisker graphs\n  for quantitative data analysis based on provided DataFrame and target. An example\n  using stock data for 'AAPL' is provided for a clearer understanding.",
    "keywords": [
      "Box and Whisker Plots",
      "Quantitative Analysis",
      "Yearly Accumulation",
      "External Axes",
      "AAPL",
      "Adjusted Close"
    ]
  },
  "qa.calculate_adjusted_var": {
    "title": "calculate_adjusted_var",
    "description": "This docusaurus page explains the calculation of adjusted VaR, which\n  takes into account skew and kurtosis. It includes the explanation of the source\n  code, parameters used, and what the function returns.",
    "keywords": [
      "Docusaurus page",
      "adjusted VaR calculation",
      "Cornish-Fischer-Expansion",
      "quantitative analysis",
      "Python code",
      "source code explanation",
      "kurtosis",
      "skew",
      "standard deviation",
      "mean",
      "normal distribution"
    ]
  },
  "qa.cdf": {
    "title": "cdf",
    "description": "The page provides details about the 'cdf' function in the OpenBB SDK,\n  which plots the Cumulative Distribution Function. It lists the function parameters,\n  return values, and provides a working example.",
    "keywords": [
      "Cumulative Distribution Function",
      "Quantitative Analysis",
      "OpenBB SDK",
      "clf function"
    ]
  },
  "qa.cusum": {
    "title": "cusum",
    "description": "Documentation page for the Cumulative Sum Algorithm (CUSUM) used in the\n  OpenBB Terminal for quantitative analysis. Contains a snippet of the source code,\n  parameters descriptions, and an example of usage.",
    "keywords": [
      "OpenBB Terminal documentation",
      "Cumulative Sum Algorithm",
      "CUSUM",
      "quantitative analysis",
      "parameters description",
      "OpenBB SDK"
    ]
  },
  "qa.decompose": {
    "title": "decompose",
    "description": "This documentation page provides details on the 'decompose' function\n  in OpenBB's quantitative analysis module. The function executes seasonal decomposition\n  on a specified DataFrame, returning decomposed results and filtered dataframes for\n  cycle and trend.",
    "keywords": [
      "decompose",
      "seasonal decomposition",
      "quantitative analysis",
      "multiplicative",
      "dataframe",
      "DecomposeResult",
      "statsmodels",
      "observed",
      "seasonal",
      "trend",
      "residual",
      "weights",
      "cycle DataFrame",
      "trend DataFrame"
    ]
  },
  "qa.es": {
    "title": "es",
    "description": "This is a comprehensive guide on how to use OpenBB's quantitative analysis\n  for Expected Shortfall (ES). The document explains how to get the Expected Shortfall\n  for a specific stock dataframe and how to print a table showing expected shortfall\n  using the ES chart. Both the Model and Chart have been clearly explained in the\n  context of their parameters and return types.",
    "keywords": [
      "Quantitative Analysis",
      "Expected Shortfall",
      "Percentile",
      "ES Chart",
      "Portfolio",
      "use_mean",
      "Distribution"
    ]
  },
  "qa.hist": {
    "title": "hist",
    "description": "This page provides a detailed guide on the usage of the 'openbb.qa.hist'\n  function from OpenBB. This function is utilized for plotting histograms of data,\n  particularly from a Pandas DataFrame. It also includes parameters, returns, and\n  examples for a better understanding.",
    "keywords": [
      "Histogram",
      "Quantitative Analysis",
      "Data Visualization",
      "Pandas DataFrame",
      "openbb.qa.hist function"
    ]
  },
  "qa.kurtosis": {
    "title": "kurtosis",
    "description": "This documentation page provides detailed information about Kurtosis\n  Indicator and how to plot rolling kurtosis with OpenBB-finance's tool. It includes\n  source code links and parameters needed for these python functions.",
    "keywords": [
      "OpenBB-finance",
      "Kurtosis Indicator",
      "Plotting Kurtosis",
      "Quantitative Analysis",
      "Python Functions"
    ]
  },
  "qa.line": {
    "title": "line",
    "description": "The page describes the 'line' function of the OpenBB library, used for\n  displaying line plots of data. It provides the source code link and details the\n  parameters, usage, and examples of the function within the domain of quantitative\n  analysis and data visualization using Python.",
    "keywords": [
      "line plot",
      "quantitative analysis",
      "data visualization",
      "pd.Series",
      "matplotlib",
      "datetime"
    ]
  },
  "qa.normality": {
    "title": "normality",
    "description": "This page provides detailed information on OpenBB's qa.normality and\n  qa.normality_chart functions used for quantitative analysis. These functions are\n  used to generate statistics on the relation to the normal curve, targeting specific\n  data in a dataframe.",
    "keywords": [
      "openbb.qa.normality",
      "quantitative analysis",
      "distribution returns",
      "normal curve",
      "openbb.qa.normality_chart",
      "dataframe",
      "statistics normality",
      "targeted data"
    ]
  },
  "qa.omega": {
    "title": "omega",
    "description": "Learn about the omega series and ratio in the OpenBB quantitative analysis\n  toolkit. The documentation provides information on how to generate the omega series\n  and plot the omega ratio from stock dataframes.",
    "keywords": [
      "omega series",
      "quantitative analysis",
      "numpy",
      "pandas",
      "dataframe",
      "stock data",
      "threshold range",
      "annualized target return",
      "omega ratio",
      "plotting",
      "chart"
    ]
  },
  "qa.qqplot": {
    "title": "qqplot",
    "description": "The 'qqplot' page provides information on how to use the 'qqplot' function\n  in the OpenBB library for quantitative data analysis. It explains the procedure,\n  the parameters required, and provides a practical example using the stock ticker\n  from Apple.",
    "keywords": [
      "qqplot",
      "quantitative analysis",
      "data analysis",
      "matplotlib",
      "Pandas Dataframe",
      "stock ticker",
      "AAPL"
    ]
  },
  "qa.quantile": {
    "title": "quantile",
    "description": "This page provides documentation and source code for OpenBB's Quantile\n  function. It includes info about parameters, return types, and how to generate and\n  plot rolling quantile data using Python.",
    "keywords": [
      "Docusaurus",
      "Quantile",
      "Source Code",
      "Quantitative Analysis",
      "Plotting Data",
      "Rolling Quantile",
      "Python DataFrame"
    ]
  },
  "qa.rolling": {
    "title": "rolling",
    "description": "A documentation page explaining the functionality of the OpenBB rolling\n  model and rolling chart. These tools deal with computing and plotting rolling means\n  and standard deviations in financial data, mapped by stock symbols or tickers. The\n  methods are implemented in Python and operate on dataframes.",
    "keywords": [
      "rolling",
      "quantitative analysis",
      "dataframe",
      "standard deviation",
      "mean",
      "Stock ticker",
      "window"
    ]
  },
  "qa.sharpe": {
    "title": "sharpe",
    "description": "Documentation page on the Sharpe Ratio - a financial measure calculated\n  in the OpenBB framework. Includes parameters, source code, and instructions for\n  plotting the Sharpe ratio in a chart. Relevant for quantitative finance, data analysis,\n  and Python programming.",
    "keywords": [
      "Sharpe Ratio",
      "Quantitative Analysis",
      "Risk-Free Rate",
      "Data Visualization",
      "Finance",
      "Financial Models",
      "Programming"
    ]
  },
  "qa.skew": {
    "title": "skew",
    "description": "This documentation page provides details on the function openbb.qa.skew,\n  used for rolling skewness indicator calculations and plotting. It includes parameters\n  description and links to the source code.",
    "keywords": [
      "Quantitative Analysis",
      "Skewness Indicator",
      "Python Coding",
      "Source Code",
      "Financial Data Analysis",
      "Rolling Skew",
      "Skew Chart",
      "Parameters",
      "Window Length",
      "Stock Ticker",
      "Data Export",
      "External Axes"
    ]
  },
  "qa.sortino": {
    "title": "sortino",
    "description": "Documentation on the use of the Sortino Ratio function within the OpenBB\n  Quantitative Analysis Code. It includes the Python source code along with details\n  of parameters for calculating and plotting the Sortino ratio.",
    "keywords": [
      "Sortino Ratio",
      "Source Code",
      "Quantitative Analysis",
      "Charts",
      "Python Dataframes",
      "Financial Metrics",
      "Risk-Adjusted Performance"
    ]
  },
  "qa.spread": {
    "title": "spread",
    "description": "'The page provides information about two central functions of the OpenBBTerminal:\n  ''spread'' and ''spread_chart''. These Python functions are part of the quantitative\n  analysis, analyzing standard deviation, variance and create spread charts. The descriptions\n  include source code, parameters, and return values.'",
    "keywords": [
      "Standard Deviation",
      "Variance",
      "Quantitative Analysis",
      "Rolling model",
      "Spread",
      "Spread chart"
    ]
  },
  "qa.summary": {
    "title": "summary",
    "description": "This page contains documentation for methods of calculating and displaying\n  summary statistics in the OpenBB Terminal. Tab sections divide the page into different\n  functionalities, including a model overview and a chart view of summary statistics.\n  Details for parameters, return values, and links to the original source code are\n  provided for each method.",
    "keywords": [
      "summary statistics",
      "quantitative analysis",
      "OpenBB.qa",
      "summary_chart",
      "export data"
    ]
  },
  "qa.unitroot": {
    "title": "unitroot",
    "description": "This documentation provides in-depth information on how to calculate\n  unit root test statistics, using the OpenBB software. This includes source code,\n  parameter details, and return values for both model and chart functions.",
    "keywords": [
      "quantitative analysis",
      "unit root test",
      "ADF test",
      "KPSS test",
      "regression"
    ]
  },
  "qa.var": {
    "title": "var",
    "description": "This Docusaurus page contains Python source code for 'var/model' and\n  'var chart' functions. Each section provides detailed explanations of parameters\n  and returns, and links to the respective source code. The functions are a part of\n  quantitative analysis of a specified stock dataframe.",
    "keywords": [
      "Docusaurus page",
      "tab items",
      "Python code",
      "quantitative analysis",
      "dataframe",
      "var/model",
      "var chart",
      "parameters",
      "returns"
    ]
  },
  "stocks.candle": {
    "title": "candle",
    "description": "This documentation page contains information about the 'candle' function\n  of OpenBB's SDK which plots the candlestick chart for a specific stock ticker. It\n  offers various parameters for data customization providing an interactive way to\n  visualize stock market data.",
    "keywords": [
      "Candle function",
      "Stocks visualization",
      "OpenBB terminal",
      "Candlestick chart",
      "Python stock market data",
      "Matplotlib",
      "Plotly",
      "Stock ticker data",
      "Intraday data",
      "Financial data",
      "SEO for technical documentation",
      "SEO for programming documentation"
    ]
  },
  "stocks.load": {
    "title": "load",
    "description": "Learn how to use the load function within OpenBBTerminal's stocks module\n  to retrieve and analyze data. Provide a symbol (ticker), define start and end dates,\n  interval, choose whether to include pre/post-hours data and the data source. Options\n  to retrieve weekly and monthly data are available. The gathered data is returned\n  as a pandas DataFrame.",
    "keywords": [
      "symbol analysis",
      "start_date",
      "interval",
      "end_date",
      "prepost",
      "source",
      "YahooFinance",
      "weekly data",
      "monthly data",
      "verbose",
      "data extraction",
      "dataframe"
    ]
  },
  "stocks.process_candle": {
    "title": "process_candle",
    "description": "Learn how to use OpenBB's process_candle function to manipulate stock\n  data into a candle style plot. Particularly useful tool for financial analysis.",
    "keywords": [
      "OpenBB stocks",
      "process_candle",
      "Stock DataFrame",
      "Panda's DataFrame",
      "Stock market",
      "Finance"
    ]
  },
  "stocks.quote": {
    "title": "quote",
    "description": "Documentation for 'Ticker quote', a function of OpenBB's Stock Model.\n  It retrieves information about a specific ticker from YahooFinance. This tool doesn't\n  return any values, it solely utilizes inputted symbols.",
    "keywords": [
      "Ticker quote",
      "YahooFinance",
      "Stock model",
      "symbol"
    ]
  },
  "stocks.search": {
    "title": "search",
    "description": "The documentation page details the 'search' function of the OpenBB python\n  library used for querying stocks information. The function allows queries based\n  on parameters like country, sector, industry and exchange country. The search results\n  are returned as a pandas DataFrame.",
    "keywords": [
      "search",
      "query",
      "tickers",
      "stocks",
      "country",
      "sector",
      "industry",
      "exchange_country",
      "limit"
    ]
  },
  "stocks.tob": {
    "title": "tob",
    "description": "Get top of book bid and ask for any ticker on the CBOE exchange using\n  the OpenBB Terminal. Default exchange is BZX, but can be changed to EDGX, BYX, or\n  EDGA. Returns a Dataframe of Bids.",
    "keywords": [
      "Top of Book bid",
      "Ask for ticker",
      "CBOE",
      "BZX",
      "EDGX",
      "BYX",
      "EDGA",
      "OpenBB Stocks",
      "Dataframe of Bids",
      "OpenBB finance"
    ]
  },
  "stocks.ba.bullbear": {
    "title": "bullbear",
    "description": "This page provides information on how to use OpenBB's bullbear function\n  that fetches sentiment for a ticker from stocktwits. Detailed info about parameters\n  and returns are included.",
    "keywords": [
      "bullbear function",
      "stocktwits",
      "sentiment analysis"
    ]
  },
  "stocks.ba.cnews": {
    "title": "cnews",
    "description": "This page provides details about the 'cnews' function of the OpenBB Terminal,\n  capable of fetching company news. The function uses the company ticker and optional\n  dates of search as parameters.",
    "keywords": [
      "cnews function",
      "company news",
      "Finnhub",
      "company ticker",
      "news articles",
      "search dates"
    ]
  },
  "stocks.ba.getdd": {
    "title": "getdd",
    "description": "This page explains the 'getdd' function. This function fetches due diligence\n  posts from a list of subreddits. The source code link, parameters including the\n  stock ticker, number of posts to fetch, and number of days back to fetch the posts,\n  along with the return type are described.",
    "keywords": [
      "getdd function",
      "stock ticker",
      "subreddits",
      "dataframe",
      "due diligence posts",
      "number of posts",
      "number of days"
    ]
  },
  "stocks.ba.headlines": {
    "title": "headlines",
    "description": "The website page provides detailed documentation on how to use sentiment\n  analysis with FinBrain's API on a company's stock. It offers instructions on extracting\n  sentiment from headlines and visualizing sentiment trends through charts.",
    "keywords": [
      "sentiment analysis",
      "FinBrain's API",
      "stock analysis",
      "data visualization",
      "OpenBBTerminal documentation",
      "behavioural analysis",
      "stock sentiment",
      "Stock market data",
      "Open-source software"
    ]
  },
  "stocks.ba.hist": {
    "title": "hist",
    "description": "This page provides coding tutorials on how to get hour-level sentiment\n  data for a chosen stock symbol and display the historical sentiment data of a ticker\n  using OpenBB tools. It also includes source codes, parameters, and return information.",
    "keywords": [
      "hour-level sentiment data",
      "stock symbol",
      "historical sentiment data",
      "coding tutorial",
      "parameters",
      "returns"
    ]
  },
  "stocks.ba.infer": {
    "title": "infer",
    "description": "This page is a detailed guide for using OpenBB's terminal to access and\n  analyze Twitter data, providing tips for inferring market sentiment from tweets\n  and visualizing data.",
    "keywords": [
      "terminal guidance",
      "Twitter data analysis",
      "market sentiment",
      "social media analytics",
      "VADER sentiment analysis",
      "data visualization",
      "programming code"
    ]
  },
  "stocks.ba.mentions": {
    "title": "mentions",
    "description": "Documentation page for OpenBB Terminal's modules 'mentions' and 'mentions_chart.'\n  These modules analyze and visualize the interest over time for a particular stock's\n  symbol using Google's API.",
    "keywords": [
      "Stock market analysis",
      "Google API",
      "Stock interest",
      "Data visualization",
      "Finance"
    ]
  },
  "stocks.ba.messages": {
    "title": "messages",
    "description": "This page provides information regarding the 'get last messages for a\n  given ticker' function in the OpenBB Terminal. It explains the usage and parameters\n  of the function.",
    "keywords": [
      "stock messages",
      "stock ticker",
      "Stocktwits messages",
      "data analysis",
      "behavioural analysis on stocks"
    ]
  },
  "stocks.ba.popular": {
    "title": "popular",
    "description": "This page contains a python function to get popular tickers from a list\n  of subreddits. The function leverages the OpenBB.Finance Terminal to analyze the\n  behavioral analysis of posts from Reddit.",
    "keywords": [
      "OpenBB.Finance Terminal",
      "Reddit ticker analysis",
      "Python function",
      "Behavioral analysis",
      "Popular tickers",
      "Subreddits",
      "Post analysis",
      "DataFrames"
    ]
  },
  "stocks.ba.queries": {
    "title": "queries",
    "description": "Learn how to get related queries from Google API using the `openbb.stocks.ba.queries`\n  function in the OpenBB Terminal. This page includes parameters, return types, and\n  source code.",
    "keywords": [
      "Google API",
      "Queries",
      "Behavioral analysis",
      "Stock ticker symbol",
      "Source code",
      "Marketing SEO"
    ]
  },
  "stocks.ba.redditsent": {
    "title": "redditsent",
    "description": "A documentation on redditsent function. It is used to find posts related\n  to a specific search term from Reddit. The function provides comprehensive search\n  and categorization of results based on user-preferences.",
    "keywords": [
      "redditsent",
      "Search function",
      "Reddit posts",
      "Behavioral analysis",
      "Python function",
      "Ticker symbol",
      "post categorization",
      "Comprehensive search",
      "subreddits",
      "dataframe",
      "polarity scores",
      "average polarity score"
    ]
  },
  "stocks.ba.regions": {
    "title": "regions",
    "description": "This page provides detailed instructions on how to utilize the regions\n  functions from OpenBB finance terminal to retrieve and visualize stock interests\n  by region using Google API. The documentation covers the parameters, return types,\n  and source code for the functionalities.",
    "keywords": [
      "Docusaurus",
      "SEO metadata",
      "regions",
      "google api",
      "stock's interest",
      "openbb.stocks.ba.regions",
      "openbb.stocks.ba.regions_chart",
      "ticker symbol",
      "dataframe"
    ]
  },
  "stocks.ba.rise": {
    "title": "rise",
    "description": "Discover top rising related queries for a stock's symbol with the OpenBB\n  rise tool. Analyze market behavior and spot trends.",
    "keywords": [
      "stock analysis",
      "market trends",
      "rising queries",
      "stock symbol use",
      "OpenBB rise tool",
      "behavioral analysis"
    ]
  },
  "stocks.ba.sentiment": {
    "title": "sentiment",
    "description": "This page provides documentation on extracting sentiment from a stock\n  ticker symbol, which includes the parameters for the number of tweets per hour,\n  number of days to extract tweets for, an optional comparison to the corresponding\n  change in stock price, and an optional export format. Plots sentiments can also\n  be visualized using the provided python codes.",
    "keywords": [
      "sentiment analysis",
      "stock ticker symbol",
      "tweets per hour",
      "extract tweets",
      "stock price",
      "dataframe",
      "python code",
      "plot sentiments",
      "export format"
    ]
  },
  "stocks.ba.snews": {
    "title": "snews",
    "description": "snews is an impactful tool from OpenBB's finance package employing VADER\n  sentiment model to analyze stock headline sentiments over time, leveraged from Finnhub\n  data. It also provides features to visualize these sentiments against the stock\n  price using Python's matplotlib library.",
    "keywords": [
      "snews",
      "VADER model",
      "Finnhub",
      "stock sentiment analysis",
      "OpenBB finance",
      "trading strategies",
      "data visualization",
      "matplotlib",
      "sentiment over time"
    ]
  },
  "stocks.ba.spac": {
    "title": "spac",
    "description": "A detailed documentation page on the SPAC function from OpenBB's financial\n  analysis tool suite. Learn how to extract SPAC-related posts from top subreddits\n  with OpenBB.",
    "keywords": [
      "SPAC",
      "Reddit Analysis",
      "subreddits",
      "Financial Analysis",
      "Data Extraction",
      "SPAC posts Extraction"
    ]
  },
  "stocks.ba.spacc": {
    "title": "spacc",
    "description": "Detailed documentation of the function openbb.stocks.ba.spacc, providing\n  insights into top trending SPACs on Reddit. The page includes the source code, parameters,\n  and returns for implementing the function.",
    "keywords": [
      "SPACs",
      "Reddit",
      "Source Code",
      "openbb.stocks.ba.spacc",
      "Parameters",
      "Returns",
      "dictionary",
      "Number of mentions"
    ]
  },
  "stocks.ba.stalker": {
    "title": "stalker",
    "description": "This documentation page provides information on how to use the 'stalker'\n  function from the OpenBB platform, which gathers messages from a specified user\n  on Stocktwits. The source code is also available for referencing.",
    "keywords": [
      "Stalker",
      "Messages",
      "User",
      "Posts",
      "Stocktwits",
      "Source code",
      "Post limit"
    ]
  },
  "stocks.ba.text_sent": {
    "title": "text_sent",
    "description": "Learn how to use the Text Sentiment Analysis function of OpenBB's Reddit\n  Model. Understand the sentiment of a post and related comments, providing valuable\n  insights into stock market trends.",
    "keywords": [
      "Text sentiment analysis",
      "Stock market sentiment",
      "Behavioural analysis",
      "Comment analysis",
      "Post analysis",
      "Reddit model"
    ]
  },
  "stocks.ba.trend": {
    "title": "trend",
    "description": "The page details functions related to behavioural analysis with OpenBB\n  Terminal, specifically focusing on trend analysis. The page explains how to generate\n  sentiment data on the most talked about stock tickers. Explained in detail with\n  source code and parameters.",
    "keywords": [
      "sentiment data",
      "tickers",
      "trend",
      "behavioural analysis",
      "trend chart",
      "API call",
      "dataframe",
      "hour",
      "number",
      "limit",
      "export data"
    ]
  },
  "stocks.ba.trending": {
    "title": "trending",
    "description": "Learn how to obtain trending tickers from Stocktwits using the OpenBB\n  Terminal. The page provides clear python code and explanation of the returned dataframe.\n  OpenBB Terminal is a powerful tool for financial data analysis.",
    "keywords": [
      "trending tickers",
      "stocktwits",
      "python code",
      "watchlist count",
      "financial data analysis"
    ]
  },
  "stocks.ba.watchlist": {
    "title": "watchlist",
    "description": "This page provides the syntax and details of the 'watchlist' function\n  which fetches reddit users watchlists. It includes source code details, usage, parameters\n  and return values.",
    "keywords": [
      "Watchlist",
      "Reddit",
      "Python function",
      "Behavioral Analysis",
      "Source Code",
      "Returns",
      "Parameters",
      "Usage"
    ]
  },
  "stocks.ba.wsb": {
    "title": "wsb",
    "description": "This page provides documentation for the OpenBB 'wsb' function, which\n  retrieves reddit posts from wsb. The page includes details about parameters and\n  returned data in the form of a pandas Dataframe.",
    "keywords": [
      "wsb",
      "OpenBB-finance",
      "reddit_model.py",
      "openbb.stocks.ba.wsb",
      "reddit submissions",
      "Parameters",
      "Limit",
      "New",
      "Returns"
    ]
  },
  "stocks.ca.balance": {
    "title": "balance",
    "description": "This page provides a detailed view on the balance data obtained through\n  OpenBB Terminal's stocks comparison analysis. Python source code, parameters\n  for the function and return type are conventionally presented.",
    "keywords": [
      "balance data",
      "stocks comparison analysis",
      "marketwatch model",
      "tickers comparison",
      "quarterly statements",
      "data export",
      "dataframe"
    ]
  },
  "stocks.ca.cashflow": {
    "title": "cashflow",
    "description": "This page discusses the cashflow data from Marketwatch. It explains how\n  to use the openbb.stocks.ca.cashflow function, its parameters, and outputs, emphasizing\n  on a dataframe of cashflow comparisons.",
    "keywords": [
      "cashflow data",
      "marketwatch source code",
      "openbb.stocks.ca.cashflow function",
      "parameters",
      "dataframe of cashflow comparisons",
      "timeframe",
      "quarter",
      "export"
    ]
  },
  "stocks.ca.hcorr": {
    "title": "hcorr",
    "description": "The page gives detailed guidelines on how to use the hcorr function in\n  OpenBB Terminal to gather historical price correlation data. It further explains\n  the process to create correlation heatmaps based on historical price comparison.",
    "keywords": [
      "historical price correlation",
      "chart",
      "finance tools",
      "correlation matrix",
      "finance source code"
    ]
  },
  "stocks.ca.hist": {
    "title": "hist",
    "description": "Python code examples using OpenBB Terminal to retrieve, visualize and\n  manipulate historical stock prices from Yahoo Finance for a list of comparison stocks.\n  The code covers data acquisition, charting of historical prices, and export functionalities.",
    "keywords": [
      "stock comparison",
      "historical stock prices",
      "data visualization",
      "Python code",
      "Yahoo Finance",
      "stock market analysis",
      "stock price chart",
      "stock data export",
      "data manipulation",
      "stock data normalization",
      "Comparable companies",
      "Finnhub peers",
      "Finnviz peers",
      "Polygon peers"
    ]
  },
  "stocks.ca.income": {
    "title": "income",
    "description": "This page provides detailed information on how to get income data from\n  different peer companies using OpenBB's financial functions. This includes the source\n  code and the parameters needed for these operations.",
    "keywords": [
      "income data",
      "financial functions",
      "parameters",
      "Marketwatch",
      "income statements",
      "quarterly statements",
      "dataframe",
      "income chart",
      "data export",
      "financial comparison",
      "ticker comparison",
      "financial data analysis"
    ]
  },
  "stocks.ca.scorr": {
    "title": "scorr",
    "description": "This page provides information on the 'scorr' function, a tool used to\n  get correlation sentiments across similar companies. It also displays information\n  on how to utilize the 'scorr_chart' function, designed to plot correlation sentiments\n  heatmap for a set of similar companies.",
    "keywords": [
      "scorr function",
      "scorr_chart function",
      "correlation sentiments",
      "similar companies",
      "FinBrain",
      "FinViz",
      "Finnhub",
      "Polygon",
      "heatmap plot",
      "sentiment analysis",
      "stock comparison",
      "matplotlib axes"
    ]
  },
  "stocks.ca.screener": {
    "title": "screener",
    "description": "This documentation page provides an overview of the Screener feature\n  in the OpenBB Terminal, demonstrating how to use it to compare similar companies.",
    "keywords": [
      "Stock Screener",
      "Comparison Analysis",
      "Similar Companies",
      "Finviz",
      "Finnhub",
      "Polygon",
      "Technical Analysis",
      "Financial Analysis"
    ]
  },
  "stocks.ca.sentiment": {
    "title": "sentiment",
    "description": "The page provides detailed information about Sentiment Analysis functions\n  provided by the OpenBB Finance Terminal. It guides users on how to retrieve sentiment\n  analysis for several symbols using FinBrain's API and how to display the sentiment\n  for all ticker.",
    "keywords": [
      "API",
      "Sentiment Analysis",
      "Finance",
      "Terminal",
      "FinBrain",
      "Ticker",
      "Symbols",
      "Finviz_peers",
      "Finnhub_peers",
      "Polygon_peers",
      "Data visualization",
      "matplotlib",
      "Data Export",
      "Sentiment chart"
    ]
  },
  "stocks.ca.similar": {
    "title": "similar",
    "description": "Documentation for the 'similar' functionality in the OpenBB-finance package.\n  Includes details about the function, parameters and returns, and examples.",
    "keywords": [
      "OpenBB-finance",
      "similar tickers",
      "stock comparison",
      "stock analysis",
      "python package",
      "Finviz",
      "Polygon",
      "Finnhub",
      "TSNE",
      "stock symbols"
    ]
  },
  "stocks.ca.volume": {
    "title": "volume",
    "description": "This documentation page details how to get and display stock volume using\n  openbb.stocks.ca volume function. Includes Python codes and parameter descriptions\n  for user guidance.",
    "keywords": [
      "openbb.stocks.ca",
      "stock volume",
      "Yahoo Finance",
      "docusaurus",
      "parameter description",
      "volume_chart",
      "volume function",
      "stock analysis",
      "finnhub_peers",
      "finviz_peers",
      "polygon_peers"
    ]
  },
  "stocks.dd.analyst": {
    "title": "analyst",
    "description": "This documentation page provides details on retrieving analyst data from\n  the OpenBB terminal. Get valuable information regarding stock ticker symbols and\n  analyst price targets for your due diligence.",
    "keywords": [
      "Analyst",
      "Finviz",
      "Analyst Data",
      "Stocks",
      "Price Targets",
      "Stock Ticker Symbol",
      "Due Diligence"
    ]
  },
  "stocks.dd.arktrades": {
    "title": "arktrades",
    "description": "Arktrades is a feature provided by OpenBB Stocks, a function in Python\n  facilitating due diligence for stock trading. This page contains the guide to access\n  ARK trades for a particular stock ticker, returning a dataframe of trades. Source\n  code included, hosted on GitHub.",
    "keywords": [
      "arktrades",
      "OpenBB Stocks",
      "Stocks Due Diligence",
      "trade dataframe",
      "ARK trades",
      "Stock Ticker",
      "Stock Trades",
      "GitHub Source Code"
    ]
  },
  "stocks.dd.customer": {
    "title": "customer",
    "description": "Documentation for the 'customer' function in the OpenBB Terminal. This\n  function allows you to print customers from a ticker, helping in stock analysis\n  and due diligence. Here, you'll find details about parameters, return values, and\n  the source code.",
    "keywords": [
      "customer",
      "stocks",
      "due diligence",
      "dataframe",
      "symbol",
      "limit"
    ]
  },
  "stocks.dd.est": {
    "title": "est",
    "description": "Access analysts' estimates for given ticker symbols utilizing OpenBB.\n  Understand the method in Python with accompanying source code and expected return\n  data types.",
    "keywords": [
      "analysts' estimates",
      "business insider",
      "stocks",
      "due diligence"
    ]
  },
  "stocks.dd.news": {
    "title": "news",
    "description": "This page provides details on how to use the Finviz News function integrated\n  into OpenBB. This function can be used to pull the latest news for a specific stock\n  ticker symbol.",
    "keywords": [
      "Finviz News",
      "OpenBB Finviz integration",
      "Python Finviz news function",
      "stock ticker symbol",
      "financial news",
      "website news API"
    ]
  },
  "stocks.dd.pt": {
    "title": "pt",
    "description": "This documentation pertains to OpenBB's APIs for retrieving and visualizing\n  analysts' price targets for stocks. Two key functions are discussed, one to retrieve\n  the data and the other to generate charts.",
    "keywords": [
      "API documentation",
      "stock price targets",
      "data retrieval",
      "data visualization",
      "analysts' price targets"
    ]
  },
  "stocks.dd.rating": {
    "title": "rating",
    "description": "The page provides detailed information about the OpenBBTerminal's functionality\n  to fetch ratings for a given stock ticker using the Financial Modeling Prep source.\n  The code is written in Python and returns data in pd.DataFrame format.",
    "keywords": [
      "Stock Ticker",
      "Ratings",
      "Financial Modeling Prep",
      "Source Code",
      "Stock Market",
      "Financial Data"
    ]
  },
  "stocks.dd.rot": {
    "title": "rot",
    "description": "This webpage contains detailed methods and code snippets to retrieve\n  and visualize rating over time data for any stock ticker. It includes functioning\n  code in Python, and links to the source code in GitHub.",
    "keywords": [
      "stock ratings",
      "Finnhub api",
      "data visualization",
      "open source",
      "stock market",
      "financial markets",
      "investment research",
      "due diligence"
    ]
  },
  "stocks.dd.sec": {
    "title": "sec",
    "description": "This page provides the source code and related information for using\n  OpenBB's SEC filings feature. Retrieve stock ticker information from platforms like\n  Market Watch. Written in Python, the feature returns SEC filings data in a pd.DataFrame\n  format.",
    "keywords": [
      "SEC filings",
      "stock ticker",
      "Market Watch",
      "stocks",
      "due diligence",
      "marketwatch model",
      "symbol"
    ]
  },
  "stocks.dd.supplier": {
    "title": "supplier",
    "description": "Detailed documentation on the supplier function of OpenBBTerminal. It\n  describes how to use the function to get suppliers using a certain ticker from CSIMarket,\n  the source code path, and the parameters involved.",
    "keywords": [
      "supplier",
      "CSIMarket",
      "Source Code",
      "stocks",
      "due diligence",
      "csimarket model.py",
      "stocks.dd.supplier function",
      "symbol parameter",
      "limit parameter",
      "dataframe",
      "suppliers data"
    ]
  },
  "stocks.disc.active": {
    "title": "active",
    "description": "This page provides documentation for the 'active' function of the OpenBB\n  Finance API. The function returns the most active stocks in descending order based\n  on intraday trade volume.",
    "keywords": [
      "OpenBB Finance API",
      "active function",
      "Stock trading",
      "Trading volume",
      "Most active stocks",
      "Finance",
      "API documentation",
      "Data Frame",
      "Yahoo Finance",
      "Intraday trading"
    ]
  },
  "stocks.disc.arkord": {
    "title": "arkord",
    "description": "This page contains details about the arkord function, which returns ARK\n  orders in a DataFrame. The function provides options to filter based on buys only,\n  sells only, or by a specific fund. This page also lists the various columns in the\n  returned DataFrame, which includes ticker, date, shares, weight, fund, and direction.",
    "keywords": [
      "ARK",
      "Orders",
      "filter",
      "buys only",
      "sells only",
      "fund",
      "ARK orders data frame",
      "shares",
      "weight",
      "direction"
    ]
  },
  "stocks.disc.asc": {
    "title": "asc",
    "description": "Documentation for OpenBB's function to get the most aggressive small\n  cap stocks from Yahoo Finance with high earnings growth rates. Includes python code\n  and parameters description.",
    "keywords": [
      "Yahoo Finance",
      "small cap stocks",
      "earnings growth rates",
      "stocks",
      "aggressive small cap stocks"
    ]
  },
  "stocks.disc.dividends": {
    "title": "dividends",
    "description": "This page provides documentation on how to access the dividend calendar\n  for a given date using our OpenBB Terminal. The date represents the Ex-Dividend\n  Date. Users are guided on how to use it and understand the returned DataFrame.",
    "keywords": [
      "dividends",
      "Ex-Dividend Date",
      "dividend calendar",
      "stock market"
    ]
  },
  "stocks.disc.fipo": {
    "title": "fipo",
    "description": "The 'fipo' page provides information on the future IPOs dates using the\n  Finnhub source. It includes an OpenBB python method to retrieve upcoming IPO dates\n  within a specified number of days. The result is displayed as a DataFrame.",
    "keywords": [
      "Future IPOs",
      "IPO dates",
      "Finnhub source",
      "Financial data",
      "Stocks discovery",
      "Fipo"
    ]
  },
  "stocks.disc.gainers": {
    "title": "gainers",
    "description": "This page provides information on how to use OpenBB Terminal Python source\n  code to get the top stock gainers from Yahoo Finance. It returns the data in a Pandas\n  DataFrame.",
    "keywords": [
      "Top gainers",
      "Stocks",
      "Yahoo Finance",
      "Source Code",
      "Stock Market"
    ]
  },
  "stocks.disc.gtech": {
    "title": "gtech",
    "description": "Gtech is a function used to get technology stocks with revenue and earnings\n  growth exceeding 25%. The page provides source code and details about parameters\n  and returns.",
    "keywords": [
      "gtech",
      "technology stocks",
      "revenue growth",
      "earnings growth",
      "Yahoo Finance",
      "stocks discovery",
      "python code"
    ]
  },
  "stocks.disc.hotpenny": {
    "title": "hotpenny",
    "description": "'The page provides documentation on how to use the hotpenny function\n  provided by OpenBB, which returns a DataFrame of today''s hot penny stocks with\n  different columns such as Ticker, Price, Change, $ Volume, Volume, # Trades.'",
    "keywords": [
      "hot penny stocks",
      "stocks DataFrame",
      "stock trading",
      "financial data"
    ]
  },
  "stocks.disc.ipo": {
    "title": "ipo",
    "description": "Navigate through the IPO calendar using OpenBB's Python toolkit. The\n  page provides source code and parameters for IPO through start and end dates, returning\n  all events in a convenient pd.DataFrame format.",
    "keywords": [
      "IPO",
      "IPO calendar",
      "Source code"
    ]
  },
  "stocks.disc.losers": {
    "title": "losers",
    "description": "This page provides information on how to get the top stock market losers\n  using the 'losers' function with OpenBB and Yahoo Finance. This function does not\n  require parameters and returns a pandas dataframe of stock losers.",
    "keywords": [
      "losers",
      "top losers",
      "Yahoo Finance",
      "Source Code",
      "stocks",
      "discovery",
      "stock market",
      "yahoofinance_model.py",
      "Stock Losers"
    ]
  },
  "stocks.disc.lowfloat": {
    "title": "lowfloat",
    "description": "This page explains the lowfloat function from the openbb.stocks.disc\n  Python library that returns a low float DataFrame. It provides details of the input\n  parameters and return types.",
    "keywords": [
      "lowfloat",
      "openbb.stocks.disc",
      "ShortInt",
      "Float",
      "Outstd",
      "Industry",
      "Stocks",
      "Exchange"
    ]
  },
  "stocks.disc.news": {
    "title": "news",
    "description": "This page provides information on the documentation for the 'news' functionality\n  in OpenBBTerminal. It enables users to customize their news type and limit the number\n  of news to be displayed.",
    "keywords": [
      "OpenBBTerminal documentation",
      "Customize News",
      "News types",
      "Limit News Display",
      "Stock News",
      "Python code for news customization"
    ]
  },
  "stocks.disc.pipo": {
    "title": "pipo",
    "description": "This page provides information about the 'pipo' open source code which\n  is used to find Past IPO dates. It includes details about the parameters used and\n  the output provided by the code.",
    "keywords": [
      "pipo",
      "past IPO dates",
      "open source code",
      "Finnhub",
      "dataframe",
      "num_days_behind",
      "start_date"
    ]
  },
  "stocks.disc.rtat": {
    "title": "rtat",
    "description": "The rtat function provides the top 10 retail stocks per day functionality.\n  It does not take any parameters and returns a DataFrame with tickers.",
    "keywords": [
      "Retail Stocks",
      "rtat function",
      "top 10 stocks",
      "Stock Tickers",
      "Dataframe of tickers",
      "Stock Discovery",
      "No parameters function"
    ]
  },
  "stocks.disc.trending": {
    "title": "trending",
    "description": "The Trending page provides a list of trending articles from OpenBB, it\n  allows customization of the quantity of articles displayed with a default value\n  set at 5.",
    "keywords": [
      "Trending articles",
      "Source code",
      "Stocks discovery",
      "Article limit customization"
    ]
  },
  "stocks.disc.ugs": {
    "title": "ugs",
    "description": "This page details the UGS function, which identifies stocks with excellent\n  earnings growth rates and relatively low PE and PEG ratios, thus helping to discover\n  undervalued stocks. Source code is also provided.",
    "keywords": [
      "ugs function",
      "stock discovery",
      "earnings growth rate",
      "PE ratio",
      "PEG ratio",
      "undervalued stocks",
      "yahoofinance model"
    ]
  },
  "stocks.disc.ulc": {
    "title": "ulc",
    "description": "This page provides information on the 'ulc' function which is used to\n  retrieve potentially undervalued large cap stocks from Yahoo Finance through the\n  OpenBB platform. No parameters are needed for this function. It returns the most\n  undervalued large cap stocks in a pd.DataFrame format.",
    "keywords": [
      "ulc",
      "Yahoo Finance",
      "undervalued large cap stocks",
      "stocks"
    ]
  },
  "stocks.disc.upcoming": {
    "title": "upcoming",
    "description": "This documentation page is related to the upcoming() function in OpenBB's\n  stocks discovery module which returns a DataFrame containing upcoming earnings.\n  The page includes source code, function parameters, and return types.",
    "keywords": [
      "OpenBB.stocks.disc.upcoming",
      "Upcoming earnings",
      "Source Code",
      "Number of pages"
    ]
  },
  "stocks.dps.ctb": {
    "title": "ctb",
    "description": "The page provides information about the function that returns the cost\n  to borrow of stocks using Interactive Broker. The source code of the function is\n  available. No parameters are needed for the function.",
    "keywords": [
      "stocks",
      "cost to borrow",
      "Interactive Broker",
      "Source Code",
      "openbb.stocks.dps.ctb()",
      "Parameters",
      "Return type",
      "OpenBB-finance"
    ]
  },
  "stocks.dps.dpotc": {
    "title": "dpotc",
    "description": "Documentation for dpotc and dpotc_chart, functions in the OpenBB Finance\n  library for retrieving and visualizing Dark Pools (ATS) and OTC (Non-ATS) data from\n  FINRA. Includes parameters and source code.",
    "keywords": [
      "dpotc",
      "FINRA data",
      "Dark Pools (ATS) Data",
      "OTC (Non-ATS) Data",
      "dpotc_chart",
      "barchart",
      "matplotlib",
      "Export dataframe data"
    ]
  },
  "stocks.dps.ftd": {
    "title": "ftd",
    "description": "Documentation related to 'ftd'- a feature that provides fails-to-deliver\n  data for a given ticker. Offers a model and chart view",
    "keywords": [
      "ftd",
      "fails-to-deliver",
      "stock data",
      "chart view",
      "model view"
    ]
  },
  "stocks.dps.hsi": {
    "title": "hsi",
    "description": "'The hsi function returns a high short interest DataFrame. This OpenBB\n  finance function doesn''t require any parameters and provides key financial data\n  including: Ticker, Company, Exchange, ShortInt, Float, Outstd, and Industry. Ideal\n  for those interested in dark pool shorts and stock market data.'",
    "keywords": [
      "hsi",
      "high short interest DataFrame",
      "OpenBB finance",
      "short interest",
      "dataframe",
      "dark pool shorts",
      "stock market",
      "financial data",
      "exchange",
      "company",
      "outstd",
      "industry"
    ]
  },
  "stocks.dps.pos": {
    "title": "pos",
    "description": "This documentation page is about getting dark pool short positions using\n  the 'pos' function in the openbb.stocks.dps python package. Details about parameters\n  such as 'sortby' and 'ascend', and the data returned, i.e., pd.DataFrame, are provided.",
    "keywords": [
      "pos",
      "dark pool short positions",
      "Stockgrid",
      "coding",
      "openbb.stocks.dps.pos",
      "parameters",
      "returns",
      "Data in ascending order"
    ]
  },
  "stocks.dps.prom": {
    "title": "prom",
    "description": "'This page provides a detailed explanation of two important functions\n  in FINRA ATS data analysis offered by our tool: ''prom'' and ''Chart''. ''prom''\n  fetches and processes the most promising stocks based on linear regression while\n  ''Chart'' aids in visualizing the dark pool data for improving trading decisions.'",
    "keywords": [
      "FINRA ATS data",
      "Trading tool",
      "Linear regression",
      "Dark pool data",
      "Dark pool trades activity",
      "Stocks analysis",
      "Data visualization",
      "Promising stocks"
    ]
  },
  "stocks.dps.psi_q": {
    "title": "psi_q",
    "description": "The psi_q documentation page explains the usage of the psi_q function,\n  which plots the short interest of a stock. It contains the source code, code snippets,\n  parameters, and return types of the function.",
    "keywords": [
      "psi_q",
      "short interest",
      "stock",
      "plot",
      "code",
      "function",
      "parameters",
      "returns",
      "NYSE",
      "NASDAQ"
    ]
  },
  "stocks.dps.psi_sg": {
    "title": "psi_sg",
    "description": "The psi_sg page provides Python code snippets for retrieving short interest\n  volume data and stock prices. Also available is the functionality to plot this data\n  or export it in various file formats. The data is sourced from Stockgrid.",
    "keywords": [
      "psi_sg",
      "Docusaurus",
      "Short interest volume",
      "Stock data",
      "Stockgrid",
      "Python code",
      "Data visualization",
      "Data export",
      "Market days",
      "Raw data"
    ]
  },
  "stocks.dps.shorted": {
    "title": "shorted",
    "description": "The page provides details about the 'shorted' function of OpenBBTerminal\n  which shows the most shorted stocks according to Yahoo Finance. Details include\n  the source code and parameters, if any.",
    "keywords": [
      "shorted",
      "stock screener",
      "Yahoo Finance",
      "OpenBB finance",
      "stocks",
      "dark pool shorts",
      "yahoofinance model"
    ]
  },
  "stocks.dps.sidtc": {
    "title": "sidtc",
    "description": "Documentation for sidtc, a tool command that retrieves and sorts short\n  interest and days-to-cover data.",
    "keywords": [
      "sidtc",
      "short interest",
      "days-to-cover",
      "stockgrid",
      "OpenBB-finance",
      "stock data",
      "floating short"
    ]
  },
  "stocks.dps.spos": {
    "title": "spos",
    "description": "This documentation page provides a detailed guide on spos function under\n  the OpenBB package. Learn how to get net short position and plot net short position\n  with source codes and parameters clearly listed.",
    "keywords": [
      "spos",
      "net short position",
      "plotting",
      "Source Code",
      "parameters",
      "chart",
      "Stockgrid",
      "Stock data",
      "Data Visualization",
      "Data Export"
    ]
  },
  "stocks.fa.analysis": {
    "title": "analysis",
    "description": "Documentation on OpenBB Terminal's feature for SEC filings analysis using\n  machine learning. The page contains information on how to perform the analysis,\n  parameters required, and default values.",
    "keywords": [
      "SEC filings analysis",
      "Machine learning",
      "Stocks",
      "Fundamental analysis",
      "Ticker symbol",
      "Eclect.us",
      "Source code"
    ]
  },
  "stocks.fa.balance": {
    "title": "balance",
    "description": "This page provides detailed information for retrieving balance sheet\n  data via the OpenBBTerminal's Python function. This includes the parameters and\n  return type of the function, as well as examples of its use for different data sources\n  specifically for the stock symbol 'AAPL'.",
    "keywords": [
      "balance sheet",
      "financial data",
      "YahooFinance",
      "AlphaVantage",
      "stock symbol",
      "AAPL"
    ]
  },
  "stocks.fa.cal": {
    "title": "cal",
    "description": "This page provides a python function for fetching calendar earnings of\n  a specific stock ticker symbol using the OpenBB Terminal library. The function returns\n  a pandas dataframe with the earnings data.",
    "keywords": [
      "calendar earnings",
      "ticker symbol",
      "openbb.stocks.fa.cal()",
      "stock fundamental analysis",
      "Python finance library"
    ]
  },
  "stocks.fa.cash": {
    "title": "cash",
    "description": "Improve financial analysis with OpenBB's Cash Flow feature. Retrieve\n  historical cash flow data for any stock symbol using various sources like YahooFinance\n  with options to get quarterly data and data as a percentage change.",
    "keywords": [
      "Cash Flow",
      "Financial Analysis",
      "Stock Symbol",
      "YahooFinance",
      "AlphaVantage",
      "' quarterly data'",
      "percentage change"
    ]
  },
  "stocks.fa.data": {
    "title": "data",
    "description": "Detailed instruction on how to get fundamental data from finviz using\n  'openbb' Python package. It explains the usage of 'stocks.fa.data' function, its\n  parameters and return type along with an example.",
    "keywords": [
      "fundamental data",
      "finviz",
      "stock ticker symbol",
      "dataframe",
      "openbb_terminal",
      "sdk",
      "IWV"
    ]
  },
  "stocks.fa.dcf": {
    "title": "dcf",
    "description": "This page covers how to use the 'dcf' function from FMP for stocks analysis\n  with the OpenBB tool. It indicates the parameters required and returns a dataframe\n  of dcf data.",
    "keywords": [
      "dcf",
      "stocks",
      "FMP",
      "fundamental analysis",
      "fmp model",
      "parameters",
      "returns",
      "stock ticker symbol",
      "limit",
      "quarterly",
      "dataframe",
      "dcf data"
    ]
  },
  "stocks.fa.divs": {
    "title": "divs",
    "description": "Improve your knowledge of OpenBB's fundamental analysis tools for stocks\n  with this comprehensive guide on retrieving and charting historical dividend data.\n  This page contains examples and source code in python focused on the use of the\n  'divs' and 'divs_chart' functions for tickers like 'AAPL'.",
    "keywords": [
      "docusaurus",
      "metadata",
      "dividends chart",
      "fundamental analysis",
      "historical data",
      "ticker symbol",
      "dividend history",
      "stocks",
      "AAPL",
      "matplotlib",
      "pandas DataFrame",
      "openbb_terminal.sdk"
    ]
  },
  "stocks.fa.dupont": {
    "title": "dupont",
    "description": "This page provides source code for the function openbb.stocks.fa.dupont\n  that returns the dupont ratio breakdown for a given stock ticker symbol.",
    "keywords": [
      "dupont ratios",
      "Stock ticker symbol",
      "openbb.stocks.fa.dupont",
      "dupont ratio breakdown"
    ]
  },
  "stocks.fa.earnings": {
    "title": "earnings",
    "description": "This site provides an extensive guide to retrieving earnings data of\n  any stock ticker using the OpenBB Terminal. The page includes detailed parameters\n  descriptions and practical examples.",
    "keywords": [
      "earnings data",
      "stock ticker",
      "AlphaVantage",
      "YahooFinance",
      "quarterly data"
    ]
  },
  "stocks.fa.enterprise": {
    "title": "enterprise",
    "description": "This page provides detailed information about the financial modeling\n  prep ticker enterprise, including python code, parameter descriptions, and returns.",
    "keywords": [
      "Financial Modeling Prep Ticker Enterprise",
      "Enterprise Parameters",
      "Enterprise Returns",
      "Python code for Financial Modeling",
      "Fundamental Analysis Ticker Symbol"
    ]
  },
  "stocks.fa.fama_coe": {
    "title": "fama_coe",
    "description": "Learn how to use Fama and French to determine the cost of equity for\n  a company with our Fama_Coe tool. Find the Python source code and understand its\n  parameters and returns.",
    "keywords": [
      "Fama and French",
      "cost of equity",
      "company financial analysis",
      "Python source code",
      "Fama_Coe tool",
      "OpenBB stocks",
      "ticker symbol analysis",
      "stock's Fama French coefficient"
    ]
  },
  "stocks.fa.fama_raw": {
    "title": "fama_raw",
    "description": "The page provides detailed information on retrieving Fama French data\n  through the openbb.stocks.fa.fama_raw() method in the OpenBB terminal. It serves\n  as a resource for financial analysis and coding in Python involving DCF models.",
    "keywords": [
      "Fama French data",
      "openbb stocks",
      "fa fama raw",
      "Data Frame",
      "coding in Python",
      "fundamental analysis",
      "DCF model",
      "OpenBB-finance"
    ]
  },
  "stocks.fa.fraud": {
    "title": "fraud",
    "description": "This is an informational page about Fetching fraud ratios based on fundamentals\n  using OpenBB's stocks.fa.fraud function in Python. This function accepts a stock\n  ticker symbol and returns fraud ratios in a pandas DataFrame format.",
    "keywords": [
      "fraud ratios",
      "fundamental analysis",
      "stock ticker symbol",
      "pandas DataFrame",
      "OpenBB.finance"
    ]
  },
  "stocks.fa.growth": {
    "title": "growth",
    "description": "This page provides information on how to get financial statement growth\n  using OpenBB's financial analysis function. Included are parameters required, return\n  types and the link to the source code.",
    "keywords": [
      "Financial Statement Growth",
      "OpenBB Finance",
      "OpenBBTerminal source code",
      "Get financial statement growth",
      "Stock ticker symbol",
      "Fundamental Analysis"
    ]
  },
  "stocks.fa.historical_5": {
    "title": "historical_5",
    "description": "Find how to get a 5 year monthly historical performance for a given ticker\n  with dividends filtered using OpenBB's Python library. By analyzing ticker symbols\n  with this method, get a detailed data analysis.",
    "keywords": [
      "Historical performance",
      "5 year monthly history",
      "Dividends",
      "Ticker symbol",
      "Data analysis",
      "Source code",
      "Fundamental analysis",
      "Pandas DataFrame"
    ]
  },
  "stocks.fa.hq": {
    "title": "hq",
    "description": "This documentation page provides source code for retrieving the Google\n  Map URL of a company's headquarters based on its stock ticker symbol, using the\n  OpenBB's function openbb.stocks.fa.hq. It includes the parameter details and return\n  type description.",
    "keywords": [
      "hq",
      "google map url",
      "headquarter",
      "stock",
      "ticker symbol",
      "openbb.stocks.fa.hq",
      "fundamental analysis",
      "yahoo finance model"
    ]
  },
  "stocks.fa.income": {
    "title": "income",
    "description": "This page is a detailed guide on how to use the 'income' function provided\n  by OpenBBTerminal. This function fetches income statements for a given stock symbol\n  from selected data sources like YahooFinance or AlphaVantage.",
    "keywords": [
      "income statement",
      "stock",
      "symbol",
      "source",
      "YahooFinance",
      "AlphaVantage",
      "OpenBBTerminal income",
      "Financial Analysis",
      "fundamental analysis"
    ]
  },
  "stocks.fa.info": {
    "title": "info",
    "description": "This page provides information on retrieving ticker symbol information\n  using OpenBB.fa.info method, leveraging yfinance data.",
    "keywords": [
      "fa.info method",
      "yfinance data",
      "stock ticker symbol",
      "Pandas DataFrame"
    ]
  },
  "stocks.fa.key": {
    "title": "key",
    "description": "This page provides the source code and explanation on how to get key\n  metrics from OpenBB's stocks fundamental analysis. Detailed parameters and return\n  value are provided.",
    "keywords": [
      "key metrics",
      "stocks",
      "fundamental analysis",
      "dataframe",
      "symbol",
      "stock ticker"
    ]
  },
  "stocks.fa.metrics": {
    "title": "metrics",
    "description": "This page details the process of getting key metrics in stock market\n  by using the metrics function with parameters symbol, limit, and quarterly. It includes\n  the Python code for this function.",
    "keywords": [
      "OpenBBTerminal Metrics",
      "Metrics Function",
      "Stock Market Metrics",
      "Python Stock Market Code",
      "Fundamental Analysis",
      "FMP model",
      "Stock ticker symbol",
      "Quarterly data",
      "Market Analysis",
      "Dataframe of Key Metrics"
    ]
  },
  "stocks.fa.mgmt": {
    "title": "mgmt",
    "description": "This page provides a guide on getting company managers' details from\n  Business Insider using the OpenBB library. Code snippet in Python is provided.",
    "keywords": [
      "company managers",
      "Business Insider",
      "OpenBB library",
      "Python code",
      "Stock ticker symbol",
      "Dataframe of managers"
    ]
  },
  "stocks.fa.mktcap": {
    "title": "mktcap",
    "description": "This page provides documentation about the mktcap function of OpenBB-finance's\n  Yahoo Finance Module. It explains the operation and usage of the functions for\n  market cap modeling and charting over a certain period.",
    "keywords": [
      "OpenBB-finance",
      "Yahoo Finance",
      "mktcap function",
      "market cap model",
      "market cap chart",
      "Stock ticker symbol",
      "Financial analysis",
      "Fundamental analysis",
      "Stock market data",
      "Source code"
    ]
  },
  "stocks.fa.overview": {
    "title": "overview",
    "description": "This page provides an API for getting an Alpha Vantage's company overview\n  with OpenBB Terminal. It is implemented with Python for stock fundamental analysis.\n  A stock's ticker symbol is used as the parameter, and it returns the fundamentals\n  in a pd.DataFrame.",
    "keywords": [
      "Alpha vantage company overview",
      "OpenBB finance",
      "OpenBB terminal",
      "Stocks fundamental analysis",
      "AV model",
      "Stock ticker symbol",
      "Dataframe of fundamentals"
    ]
  },
  "stocks.fa.profile": {
    "title": "profile",
    "description": "This page provides information on retrieving the ticker profile from\n  FMP using the 'openbb.stocks.fa.profile' function in OpenBBTerminal. Python's pd.DataFrame\n  is utilized to organize the stock ticker data.",
    "keywords": [
      "FMP",
      "ticker profile",
      "stock ticker symbol",
      "openbb.stocks.fa.profile",
      "fundamental analysis"
    ]
  },
  "stocks.fa.quote": {
    "title": "quote",
    "description": "The documentation page provides a brief explanation on how to use the\n  OpenBBTerminal to fetch stock ticker quotes from FMP. It also includes the source\n  code and instructions on its parameters and return type.",
    "keywords": [
      "FMP",
      "stocks",
      "fundamental analysis",
      "ticker quote",
      "symbol"
    ]
  },
  "stocks.fa.ratios": {
    "title": "ratios",
    "description": "This page provides important details about the 'ratios' function in 'OpenBB\n  Stocks' module which is used for fundamental analysis. Users can extract key ratios\n  by providing a stock's ticker symbol and specifying other optional parameters. The\n  function returns a DataFrame of key ratios.",
    "keywords": [
      "OpenBB Stocks",
      "Fundamental Analysis",
      "Key Ratios",
      "Stock Ticker Symbol",
      "Quarterly Data"
    ]
  },
  "stocks.fa.score": {
    "title": "score",
    "description": "Documentation of 'score' function in fmp, part of the fundamental analysis\n  of stocks, which retrieves the value score for a specified ticker symbol. Returns\n  a np.number type value score.",
    "keywords": [
      "score",
      "fmp",
      "stocks",
      "fundamental analysis",
      "value score",
      "ticker symbol",
      "np.number"
    ]
  },
  "stocks.fa.shrs": {
    "title": "shrs",
    "description": "This page provides information about a utility that fetches shareholder\n  data from Yahoo for a given stock. It includes a source code link and explains parameters\n  of the utility module. Uses Python language for coding.",
    "keywords": [
      "Shareholders",
      "Yahoo",
      "Stocks",
      "Source Code",
      "Parameters",
      "Python Coding",
      "Stock Ticker Symbol",
      "Institutional Holder",
      "Data frame",
      "Major Holders"
    ]
  },
  "stocks.fa.similar_dfs": {
    "title": "similar_dfs",
    "description": "The similar_dfs function in OpenBB is documented on this page. This function\n  is used for generating dataframes for similar companies by taking inputs such as\n  a ticker symbol, the output from the yfinance.info function and the number of similar\n  companies to produce. The option of filtering based on market cap is also provided.\n  Going through this documentation provides valuable information to understand the\n  use and functioning of the similar_dfs function.",
    "keywords": [
      "similar_dfs",
      "dataframes",
      "similar companies",
      "stocks",
      "fundamental analysis",
      "yfinance.info function",
      "ticker symbol",
      "market cap"
    ]
  },
  "stocks.fa.splits": {
    "title": "splits",
    "description": "This page pertains to the splits and reverse splits events details of\n  stocks, showcasing how to fetch them using the openbb.stocks.fa.splits() function\n  and display them with openbb.stocks.fa.splits_chart() function.",
    "keywords": [
      "Stock splits",
      "Reverse stock splits",
      "openbb.stocks.fa.splits",
      "openbb.stocks.fa.splits_chart",
      "Fundamental analysis",
      "Yahoo Finance"
    ]
  },
  "stocks.fa.sust": {
    "title": "sust",
    "description": "This page provides information on how to get sustainability metrics for\n  a stock, using the OpenBB platform which relies on Yahoo Finance. It includes necessary\n  parameters and return values.",
    "keywords": [
      "sustainability metrics",
      "Yahoo Finance",
      "stock",
      "ticker symbol",
      "dataframe",
      "fundamental analysis"
    ]
  },
  "stocks.fa.website": {
    "title": "website",
    "description": "This page provides documentation on how to fetch a company's website\n  from yfinance using a stock ticker symbol.",
    "keywords": [
      "yfinance",
      "website",
      "stock ticker symbol"
    ]
  },
  "stocks.gov.contracts": {
    "title": "contracts",
    "description": "This documentation contains the details of two functions, 'contracts'\n  and 'contracts_chart', that are used to retrieve trading data of U.S. government\n  contracts for specific ticker from 'quiverquant.com'. It explains the parameters\n  and return type of the functions, and provides links to the source code.",
    "keywords": [
      "contracts",
      "contracts_chart",
      "quiverquant.com",
      "government contracts",
      "trading data",
      "parameters"
    ]
  },
  "stocks.gov.government_trading": {
    "title": "government_trading",
    "description": "This page documents the government_trading function, which returns the\n  most recent transactions by members of government like congress, senate, house,\n  and others. The source code and parameters are provided for reference.",
    "keywords": [
      "government trading",
      "recent transactions",
      "congress trading",
      "senate trading",
      "house trades",
      "financial contracts",
      "quarter contracts",
      "corporate lobbying",
      "ticker symbol",
      "trade data",
      "Data Frame"
    ]
  },
  "stocks.gov.gtrades": {
    "title": "gtrades",
    "description": "This page provides the documentation for the 'gtrades' function in OpenBB's\n  terminal for stock traders. It contains two tabs - the 'model' tab explains how\n  to get the government trading data for a specific ticker, while the 'view' tab provides\n  instructions for displaying this data as a chart.",
    "keywords": [
      "stock trading",
      "government trading data",
      "quiverquant.com",
      "gtrades function",
      "model",
      "view",
      "congress",
      "senate",
      "house",
      "trades chart"
    ]
  },
  "stocks.gov.histcont": {
    "title": "histcont",
    "description": "This page provides documentation on OpenBBTerminal's histcont function.\n  The function allows users to get and visualize historical quarterly government contracts.",
    "keywords": [
      "histcont function",
      "historical quarterly government contracts",
      "quiverquant.com",
      "stock data",
      "financial data",
      "data visualization",
      "ticker symbol",
      "congress trading data"
    ]
  },
  "stocks.gov.lastcontracts": {
    "title": "lastcontracts",
    "description": "This documentation page provides information on using OpenBBTerminal's\n  Python code to obtain government contract data from QuiverQuant. It guides how to\n  use the lastcontracts model and view functions for data analysis and export.",
    "keywords": [
      "Government contracts",
      "QuiverQuant",
      "Data analysis",
      "Finance",
      "Source code",
      "Data export",
      "GitHub",
      "matplotlib"
    ]
  },
  "stocks.gov.lasttrades": {
    "title": "lasttrades",
    "description": "This page provides documentation for the 'lasttrades' function which\n  fetches last government trading data. It includes parameters such as 'gov_type',\n  'limit', and 'representative', and returns a pandas DataFrame.",
    "keywords": [
      "lasttrades",
      "government trading",
      "quiverquant.com source",
      "openbb.stocks.gov.lasttrades",
      "congress",
      "senate",
      "house",
      "representative"
    ]
  },
  "stocks.gov.lobbying": {
    "title": "lobbying",
    "description": "This page provides details on corporate lobbying, including parameters\n  for symbol and limit, and returns a dataframe with corporate lobbying data. It includes\n  a link to the source code on GitHub.",
    "keywords": [
      "Corporate lobbying details",
      "Source code",
      "openbb.stocks.gov.lobbying",
      "Parameters",
      "symbol",
      "Ticker symbol",
      "limit",
      "Returns",
      "corporate lobbying data"
    ]
  },
  "stocks.gov.qtrcontracts": {
    "title": "qtrcontracts",
    "description": "Documentation on the use of qtrcontracts function in Python for analyzing\n  quarterly contracts by ticker. Posts include parameter details for the model and\n  chart functions.",
    "keywords": [
      "qtrcontracts function",
      "quarterly contracts analytics",
      "OpenBB finance",
      "Model function",
      "Chart function",
      "Parameter settings",
      "Source code",
      "matplotlib.axes._axes.Axes",
      "Total analysis",
      "Momentum analysis"
    ]
  },
  "stocks.gov.topbuys": {
    "title": "topbuys",
    "description": "This documentation page covers the top buy government trading on OpenBB\n  Terminal, providing detailed information on relevant python functions and parameters.\n  It features source code and explanations for different data types and optional parameters.",
    "keywords": [
      "top buy government trading",
      "python functions",
      "parameters",
      "data types",
      "quiverquant.com",
      "congress",
      "senate",
      "house",
      "pandas DataFrame",
      "matplotlib",
      "trading data"
    ]
  },
  "stocks.gov.toplobbying": {
    "title": "toplobbying",
    "description": "This page provides details on the 'toplobbying' functionality of the\n  OpenBBTerminal software, including the Quiverquant model and view. The page offers\n  a guide on how to present top lobbying tickers based on total money spent and guides\n  on retrieving corporate lobbying details using Python.",
    "keywords": [
      "Corporate Lobbying",
      "Top Lobbying",
      "Lobbying Tickers",
      "Government",
      "Quiverquant model",
      "Quiverquant view",
      "Source Code",
      "Data frame",
      "Chart",
      "Raw data",
      "Export data",
      "External axes"
    ]
  },
  "stocks.gov.topsells": {
    "title": "topsells",
    "description": "Explore the topsells documentation page for detailed instructions on\n  how to use the openbb.stocks.gov.topsells function. This function is used to get\n  top sell government trading data from quiverquant.com. It covers different types\n  of government data including congress, senate, and house. The function allows for\n  customization such as defining the number of past transaction months. Samples of\n  source codes are also provided with relevant links for reference.",
    "keywords": [
      "topsells",
      "trading",
      "government data",
      "quiverquant.com",
      "openbb.stocks.gov",
      "congress",
      "senate",
      "house",
      "past transactions months",
      "matplotlib"
    ]
  },
  "stocks.ins.act": {
    "title": "act",
    "description": "OpenBBTerminal offers user-friendly, Python-based tools to gauge insider\n  activity data for a given stock ticker from Business Insider. The available functions\n  not only assemble the raw data but also provide you with an elaborate chart outlining\n  past insider activities.",
    "keywords": [
      "OpenBB Finance",
      "Stock Insider Activity",
      "Business Insider",
      "Financial Data",
      "Stock Market"
    ]
  },
  "stocks.ins.lins": {
    "title": "lins",
    "description": "'The webpage is a technical documentation section related to the usage\n  of the functions ''lins'' and ''lins_chart''. It involves extracting and displaying\n  last insider activity for a particular stock ticker from source: Finviz.'",
    "keywords": [
      "technical documentation",
      "stock ticker",
      "insider activity",
      "Finviz",
      "OpenBB.finance",
      "functions"
    ]
  },
  "stocks.ins.print_insider_data": {
    "title": "print_insider_data",
    "description": "Documentation page for OpenBB-finance's Print Insider Data feature. It\n  includes details about the parameters involved, such as the type of insider data\n  and the limit of data rows to display, as well as the option to export data in a\n  specific format. The page provides source code links for further information.",
    "keywords": [
      "Print insider data",
      "Open insider filtered data",
      "Type_insider",
      "Limit",
      "Export data format",
      "Docusaurus page metadata",
      "Source code",
      "OpenBB-finance",
      "Metadata SEO"
    ]
  },
  "stocks.options.chains": {
    "title": "chains",
    "description": "This page provides comprehensive instructions on how to get option chain\n  for a stock using openbb.stocks.options API. It provides examples including how\n  to retrieve data from 'Nasdaq' and fetch specific expiration dates.",
    "keywords": [
      "stock options",
      "option chain",
      "openbb.stocks.options.api",
      "Nasdaq",
      "expiration dates",
      "stock market API"
    ]
  },
  "stocks.options.dte": {
    "title": "dte",
    "description": "This documentation page provides detailed information on the 'dte' function.\n  Learn about the computation of days to expiration from yfinance option date using\n  the 'openbb.stocks.options' methods in Python.",
    "keywords": [
      "dte function",
      "yfinance option date",
      "openbb.stocks.options",
      "python coding",
      "finance model",
      "stock options",
      "days to expiration"
    ]
  },
  "stocks.options.expirations": {
    "title": "expirations",
    "description": "Find option chain expirations using the OpenBBTerminal. It allows to\n  fetch data from different sources like Nasdaq and Tradier. The result is a comprehensive\n  dataframe.",
    "keywords": [
      "option chain",
      "Nasdaq",
      "option expiration",
      "symbol",
      "data source",
      "Tradier",
      "dataframe",
      "SPX"
    ]
  },
  "stocks.options.generate_data": {
    "title": "generate_data",
    "description": "The generate_data function in openbb.stocks.options gets x values, and\n  y values before and after premiums. It doesn't take any parameters or return anything.",
    "keywords": [
      "generate_data",
      "x values",
      "y values",
      "premiums",
      "current_price",
      "options",
      "underlying",
      "openbb.stocks.options"
    ]
  },
  "stocks.options.grhist": {
    "title": "grhist",
    "description": "Learn about using the functions grhist, syncretism model, and syncretism\n  view in OpenBBTerminal to get historical greeks for options on stocks. These Python\n  functions are clearly explained and the source code is provided for in-depth understanding.\n  The page also delineates parameters and return values.",
    "keywords": [
      "stocks",
      "options",
      "grhist",
      "syncretism model",
      "historical greeks",
      "strike price",
      "put option",
      "OCC option symbol",
      "grhist chart",
      "Greek variable",
      "export data"
    ]
  },
  "stocks.options.hist": {
    "title": "hist",
    "description": "The page explains how to get historical option pricing using the OpenBB\n  SDK in Python. It provides a detailed guide for parameters and return types along\n  with examples. You may choose data source from ChartExchange or Tradier.",
    "keywords": [
      "Option Pricing",
      "Historical data",
      "ChartExchange",
      "Tradier"
    ]
  },
  "stocks.options.hist_ce": {
    "title": "hist_ce",
    "description": "'This page describes two main functionalities of the OpenBBFinance documentation:\n  ''hist_ce'' function for getting historical prices for a specific stock option and\n  ''hist_ce_chart'' function for displaying the same historical stock data in charts.\n  Both functions come with detailed explanations of their parameters and expected\n  returns.'",
    "keywords": [
      "OpenBBFinance documentation",
      "stock options",
      "historical prices",
      "chart visualization",
      "hist_ce function",
      "hist_ce_chart function",
      "stock data"
    ]
  },
  "stocks.options.info": {
    "title": "info",
    "description": "This documentation page provides information about the info and chart\n  models for options in OpenBB Terminal, explaining how to get ticker info and scrape\n  Barchart.com for options info.",
    "keywords": [
      "OpenBB Terminal documentation",
      "Stock options",
      "Ticker info",
      "Barchart.com scraping",
      "Python utilities"
    ]
  },
  "stocks.options.last_price": {
    "title": "last_price",
    "description": "The page provides documentation for the 'last_price' API call in the\n  OpenBBTerminal project of OpenBB.finance. It details how to request for the last\n  price of a specific stock option using the ticker symbol.",
    "keywords": [
      "last_price",
      "api request",
      "OpenBB.finance",
      "stocks",
      "options",
      "tradier_model.py",
      "ticker symbol"
    ]
  },
  "stocks.options.pcr": {
    "title": "pcr",
    "description": "Documentation for the 'pcr' function from the OpenBB Terminal platform.\n  Contains model and chart views to get and display the put call ratio of certain\n  stock options.",
    "keywords": [
      "pcr function",
      "put call ratio",
      "stock options",
      "AlphaQuery.com",
      "Python code",
      "function parameters",
      "function return",
      "docusaurus tabs"
    ]
  },
  "stocks.options.process_chains": {
    "title": "process_chains",
    "description": "A details documentation page about how to use process_chains function\n  of openbb.stocks.options in Python. This function takes API response from Tradier\n  and returns a DataFrame with available options.",
    "keywords": [
      "stocks",
      "options",
      "process chains",
      "API",
      "Tradier",
      "options trading"
    ]
  },
  "stocks.options.unu": {
    "title": "unu",
    "description": "The documentation page provides details about the 'unu' command from\n  openbb.stocks.options. It includes information on how to get unusual option activity\n  data from fdscanner.com and display the unusual options table. It lists parameters,\n  returns, and gives examples of usage.",
    "keywords": [
      "stocks",
      "options",
      "unu",
      "fdscanner.com",
      "unusual option activity",
      "dataframe",
      "python code",
      "parameters",
      "returns",
      "examples"
    ]
  },
  "stocks.options.vsurf": {
    "title": "vsurf",
    "description": "A documentation page that guides how to use vsurf method which gets the\n  IV surface for calls and puts for stock ticker symbol and how to utilize vsurf_chart\n  to display the vol surface. Includes source code, data types and defaults.",
    "keywords": [
      "Docusaurus",
      "vSurf",
      "vSurf_Chart",
      "IV Surface",
      "vol surface",
      "options",
      "ticker symbol"
    ]
  },
  "stocks.options.screen.check_presets": {
    "title": "check_presets",
    "description": "This page explains the check_presets function used in option screener\n  to check the preset values. The function takes a dictionary with presets from configparser\n  as argument and returns a string of accumulated errors.",
    "keywords": [
      "check_presets",
      "Option Screener",
      "Preset values",
      "openbb.stocks.options.screen",
      "configparser",
      "Error accumulation"
    ]
  },
  "stocks.options.screen.screener_output": {
    "title": "screener_output",
    "description": "This documentation page cover the usage of screener output for OpenBB\n  Terminal. It includes explanations for using preset filters, printing the output,\n  and parameters for sorting and export formatting. There are also links to the source\n  code and Python command line instructions.",
    "keywords": [
      "screener output",
      "preset filters",
      "export formatting",
      "command line instructions"
    ]
  },
  "stocks.qa.beta": {
    "title": "beta",
    "description": "Learn how to calculate beta for a ticker and a reference ticker, and\n  display it with a scatterplot and linear regression, using OpenBB - an open source\n  finance tool. The page includes source code and parameters to correctly perform\n  and visualize these actions.",
    "keywords": [
      "Docusaurus page optimization",
      "Beta calculation",
      "Ticker symbol",
      "Reference ticker symbol",
      "Stock market analysis",
      "Quantitative analysis",
      "Data visualization",
      "Scatterplot",
      "Linear regression",
      "Open source finance"
    ]
  },
  "stocks.qa.capm": {
    "title": "capm",
    "description": "This page offers an in-depth look at the CAPM model, providing information\n  about its parameters, returns, and the concept of systematic risk.",
    "keywords": [
      "CAPM model",
      "Stocks",
      "Quantitative analysis",
      "Symbol",
      "Beta for a stock",
      "Systematic risk for a stock"
    ]
  },
  "stocks.qa.fama_raw": {
    "title": "fama_raw",
    "description": "The doc page provides details on the fama_raw function for getting Fama\n  French data to calculate risk. It explains its usage in the OpenBB finance's quantitative\n  analysis and factors model.",
    "keywords": [
      "fama_raw",
      "Fama French data",
      "risk calculation",
      "OpenBB finance",
      "quantitative analysis",
      "factors model",
      "stocks",
      "Fama French Model"
    ]
  },
  "stocks.qa.historical_5": {
    "title": "historical_5",
    "description": "Historical_5 function from OpenBB provides 5 year monthly historical\n  performance for a given stock ticker symbol with dividends filtered. This page gives\n  a comprehensive view of the function's parameters and returns.",
    "keywords": [
      "stocks",
      "quantitative analysis",
      "historical_5",
      "performance",
      "dividends"
    ]
  },
  "stocks.screener.historical": {
    "title": "historical",
    "description": "'This webpage provides comprehensive documentation about the ''historical''\n  feature of OpenBB''s application: OpenBBTerminal. Users can view and access python\n  codes, parameters, returning values for two main functionalities: viewing historical\n  price of stocks and creating a chart for those stocks.'",
    "keywords": [
      "historical stock price",
      "stock chart",
      "python codes",
      "parameters",
      "dataframe",
      "preset loaded",
      "type candle",
      "MinMax normalization"
    ]
  },
  "stocks.screener.screener_data": {
    "title": "screener_data",
    "description": "This documentation outlines the functionality of the screener_data and\n  screener_data_chart modules in the OpenBB Terminal, a Python library for loading\n  and handling preset stock filters. It provides parameter descriptions and return\n  values, with links to the source code.",
    "keywords": [
      "Screener data",
      "Python library",
      "Source code",
      "Stocks",
      "Preset filters",
      "Data types",
      "Screener data chart",
      "Order of stocks",
      "Data export"
    ]
  },
  "stocks.sia.countries": {
    "title": "countries",
    "description": "This documentation page discusses how to retrieve all countries in Yahoo\n  Finance data based on sector or industry. It provides an analysis method using the\n  OpenBB stocks sia function with Python.",
    "keywords": [
      "Yahoo Finance data",
      "sector industry analysis",
      "finance database",
      "OpenBB stocks",
      "filter by industry",
      "filter by sector",
      "countries data"
    ]
  },
  "stocks.sia.cpci": {
    "title": "cpci",
    "description": "This docusaurus page provides comprehensive information on the 'cpci'\n  function of the OpenBB Terminal. It explains how to use the function to get the\n  number of companies per country in a specific industry based on market cap and whether\n  to exclude international exchanges. Detailed parameters and return values are provided,\n  along with source code links for those who require in-depth understanding.",
    "keywords": [
      "cpci function",
      "number of companies per country",
      "industry-based company distribution",
      "market cap",
      "finance database",
      "industry selection",
      "python code"
    ]
  },
  "stocks.sia.cpcs": {
    "title": "cpcs",
    "description": "This documentation page provides information on how to use cpcs, a feature\n  of OpenBB's finance software, to get and display the number of companies per country\n  in a specific sector. Multiple parameters are available to allow customised queries.\n  Source code links are also provided.",
    "keywords": [
      "CPCS feature",
      "number of companies per country",
      "specific sector",
      "market cap",
      "finance software",
      "customize queries",
      "parameters"
    ]
  },
  "stocks.sia.cpic": {
    "title": "cpic",
    "description": "The documentation page on cpic used in openbb_terminal provides detailed\n  information on how to use the 'cpic' and 'cpic_chart' to analyze and visualize the\n  number of companies per industry in a specific country, considering optional parameters\n  like market cap, excluding international exchanges, maximum industries to display\n  and more.",
    "keywords": [
      "cpic",
      "openbb_terminal documentation",
      "sector industry analysis",
      "Number of companies per industry",
      "Finance Database",
      "Market Cap",
      "Excluding international exchanges",
      "Data visualization",
      "Parameter description",
      "Returns"
    ]
  },
  "stocks.sia.cpis": {
    "title": "cpis",
    "description": "cpis and cpis_chart functions are powerful tools in the OpenBBTerminal\n  that inform about the number of companies per industry in a specific sector and\n  market cap, and visualise the data respectively.",
    "keywords": [
      "cpis",
      "cpis_chart",
      "sector analysis",
      "industry analysis",
      "company information",
      "data visualization",
      "market capitalization",
      "stock analysis",
      "technology industry"
    ]
  },
  "stocks.sia.cps": {
    "title": "cps",
    "description": "A docusaurus documentation page detailing the usage of the 'cps' and\n  'cps_chart' functions within the OpenBB marketing terminal. The functions pertain\n  to the analysis of companies per sector in a specific country and market cap",
    "keywords": [
      "docusaurus",
      "cps",
      "cps_chart",
      "OpenBB terminal",
      "sector industry analysis",
      "finance database",
      "stock market",
      "metadata",
      "market cap analysis",
      "company analysis"
    ]
  },
  "stocks.sia.filter_stocks": {
    "title": "filter_stocks",
    "description": "This page provides an in-depth look into the function 'filter_stocks'\n  used for filtering stocks based on various parameters like country, sector, industry,\n  and market cap, and excluding specific exchanges. Understand the usage and benefits\n  of this functionality in stock filtering.",
    "keywords": [
      "filter stocks",
      "stock filters",
      "stock filtering",
      "finance database",
      "sector stocks",
      "industry stocks",
      "market cap",
      "stock exchange",
      "filter by country"
    ]
  },
  "stocks.sia.industries": {
    "title": "industries",
    "description": "The documentation page provides information and source code on how to\n  get all industries in Yahoo Finance data based on country or sector. This is part\n  of the OpenBBTerminal project.",
    "keywords": [
      "Finance Database",
      "Yahoo Finance data",
      "openbb.stocks.sia.industries",
      "industries",
      "country filter",
      "sector filter",
      "sector analysis"
    ]
  },
  "stocks.sia.maketcap": {
    "title": "maketcap",
    "description": "Detailed documentation on the 'maketcap' function in the OpenBB finance\n  database model. The page provides information on the function, including its source\n  code, parameters (if any), and the values it returns.",
    "keywords": [
      "market cap",
      "Yahoo Finance",
      "Finance Database",
      "stocks",
      "finance data analysis",
      "function",
      "parameters",
      "returns"
    ]
  },
  "stocks.sia.sectors": {
    "title": "sectors",
    "description": "This documentation page offers details on how to retrieve all sectors\n  in Yahoo Finance data based on criteria such as country or industry. The source\n  code and the parameters for the function are provided.",
    "keywords": [
      "Yahoo Finance data",
      "Finance Database",
      "Sector analysis",
      "Industry filter",
      "Country filter",
      "Stocks"
    ]
  },
  "stocks.sia.stocks_data": {
    "title": "stocks_data",
    "description": "This page offers in-depth documentation on how to use the 'stocks_data'\n  function in the OpenBBTerminal's stock analysis tool, detailing parameters, returns\n  and source code.",
    "keywords": [
      "stock data",
      "finance key",
      "financial statement",
      "stock analysis",
      "programming",
      "code documentation"
    ]
  },
  "stocks.ta.recom": {
    "title": "recom",
    "description": "This page offers details on tradingview recommendations based on technical\n  indicators with an emphasis on Model and Chart tabs. This includes information on\n  parameters, returns, and source code.",
    "keywords": [
      "Tradingview recommendation",
      "Technical indicators",
      "Model",
      "Chart",
      "Parameters",
      "Returns",
      "Source code",
      "Stocks",
      "Tradingview TA"
    ]
  },
  "stocks.ta.summary": {
    "title": "summary",
    "description": "The page contains two essential open-source tools, FinBrain's model for\n  technical summary reports and a viewer for those reports. Learn how to populate\n  a technical summary and how to view a summary chart.",
    "keywords": [
      "Open-source tools",
      "FinBrain model",
      "Technical summary reports",
      "Summary chart",
      "OpenBB's API",
      "Stocks",
      "Ticker symbol",
      "Technical Analysis"
    ]
  },
  "stocks.ta.view": {
    "title": "view",
    "description": "Technical analysis with OpenBB - Learn how to use finviz model and view\n  chart using stock ticker. Detailed examples, parameters, and source code included.",
    "keywords": [
      "technical analysis",
      "finviz model",
      "view chart",
      "stock ticker",
      "matplotlib"
    ]
  },
  "stocks.th.all": {
    "title": "all",
    "description": "Documentation detail of OpenBB's all exchanges and chart display functions.\n  OpenBB provides functionalities to fetch all available exchanges and display them\n  in a chart format.",
    "keywords": [
      "OpenBB Documentation",
      "OpenBB Exchanges API",
      "OpenBB Chart Display",
      "Python scripts",
      "API Documentation",
      "Open source financial tools",
      "OpenBB Source Code",
      "Stock Exchange Data",
      "Extracting Exchange Data"
    ]
  },
  "stocks.th.check_if_open": {
    "title": "check_if_open",
    "description": "SEO metadata for a Python function 'check_if_open' within OpenBB-finance's\n  OpenBBTerminal. This function checks if a particular market (Bursa) is open for\n  trading.",
    "keywords": [
      "OpenBB-finance",
      "Stocks",
      "Trading hours",
      "Bursa",
      "Check market open",
      "Source code",
      "pandas",
      "Exchange"
    ]
  },
  "stocks.th.closed": {
    "title": "closed",
    "description": "The page provides information on the two functions `openbb.stocks.th.closed()`\n  and `openbb.stocks.th.closed_chart()`. The first function is for getting currently\n  closed exchanges which returns a pd.DataFrame. The second function is for displaying\n  closed exchanges but does not return anything.",
    "keywords": [
      "closed exchanges",
      "Stocks",
      "Trading hours",
      "openbb.stocks.th.closed()",
      "openbb.stocks.th.closed_chart()"
    ]
  },
  "stocks.th.exchange": {
    "title": "exchange",
    "description": "This documentation page provides details on the 'exchange' function of\n  the OpenBB platform. This includes the model function for acquiring current exchange\n  open hours, and the view function for displaying these hours. The page provides\n  information on source codes, parameters and return values.",
    "keywords": [
      "exchange",
      "trading hours",
      "model",
      "view",
      "chart",
      "parameters",
      "returns",
      "dataframe"
    ]
  },
  "stocks.th.open": {
    "title": "open",
    "description": "Documentation page offering extensive details on how 'open' feature functions\n  in OpenBB finance and their source code. This feature showcases open exchanges and\n  how to display them.",
    "keywords": [
      "Finance Software",
      "Open",
      "Exchanges",
      "Trading hours",
      "Documentation",
      "Source code"
    ]
  },
  "ta.ad": {
    "title": "ad",
    "description": "This page provides information about how to implement and plot the AD\n  (Accumulation/Distribution Line) technical indicator using OpenBB's Python module.\n  It includes the source code, required parameters, and the outputs from these functions.",
    "keywords": [
      "Docusaurus",
      "Metadata",
      "Technical Indicator",
      "AD indicator",
      "Pandas DataFrame",
      "Chart"
    ]
  },
  "ta.adosc": {
    "title": "adosc",
    "description": "Technical page discussing the calculation and plotting of the AD Oscillator\n  technical indicator. The page also includes links to source code and parameter descriptions.",
    "keywords": [
      "AD Oscillator",
      "technical indicator",
      "parameter description",
      "calculate",
      "plot",
      "technical analysis",
      "fast value",
      "slow value",
      "volume model",
      "TabItem",
      "docusaurus"
    ]
  },
  "ta.adx": {
    "title": "adx",
    "description": "This page provides extensive information about the ADX technical indicator,\n  including parameters, returns, and usage. It shares Python source codes for implementing\n  and visualising the ADX technical indicator on OHLC price data using OpenBBTerminal.",
    "keywords": [
      "ADX technical indicator",
      "Dataframe with OHLC price data",
      "Technical Analysis",
      "ADX chart",
      "Plot ADX Indicator"
    ]
  },
  "ta.aroon": {
    "title": "aroon",
    "description": "This documentation page provides an in-depth overview of the Aroon technical\n  indicator within the OpenBBTerminal. It covers the model and chart view of the Aroon\n  indicator, with detailed parameters and source code. It also provides the functionality\n  to plot the Aroon indicator and export data.",
    "keywords": [
      "aroon",
      "technical indicator",
      "openbb.ta",
      "openbb.ta.aroon",
      "openbb.ta.aroon_chart",
      "trend indicators",
      "OHLC price data",
      "plotting",
      "matplotlib",
      "axes",
      "scalar",
      "window",
      "symbol",
      "export"
    ]
  },
  "ta.atr": {
    "title": "atr",
    "description": "This page provides detailed documentation on the Average True Range (ATR)\n  feature in the OpenBB terminal. It includes descriptions and code examples for both\n  the volatility model and view, with an emphasis on working with OHLC price dataframes.\n  The page also hosts links to the source code on GitHub.",
    "keywords": [
      "ATR",
      "Average True Range",
      "Technical Analysis",
      "Volatility Model",
      "Volatility View",
      "OHLC Prices",
      "Documentation"
    ]
  },
  "ta.bbands": {
    "title": "bbands",
    "description": "This documentation is about the 'bbands' function in the OpenBB finance\n  library. It allows users to calculate and plot Bollinger Bands for financial data,\n  providing multiple parameters for customization.",
    "keywords": [
      "OpenBB finance library",
      "Bollinger Bands",
      "Financial data analysis",
      "Python financial tools",
      "Technical analysis",
      "Volatility models",
      "Financial chart plotting"
    ]
  },
  "ta.cci": {
    "title": "cci",
    "description": "This page provides information on the Commodity Channel Index (CCI) utility\n  as part of the OpenBB platform. It comprises details about the technical model,\n  related parameters, expected returns, and source code linked to Github. Also includes\n  instructions for plotting CCI Indicator.",
    "keywords": [
      "CCI",
      "Commodity channel index",
      "technical indicator",
      "dataframe",
      "Source code",
      "Parameters",
      "Returns"
    ]
  },
  "ta.cg": {
    "title": "cg",
    "description": "Documentation for Center of Gravity Indicator function 'cg' and its graphical\n  representation 'cg_chart' in the OpenBB Terminal. Explanation of their source code,\n  parameters, and returns are covered.",
    "keywords": [
      "Center of Gravity Indicator",
      "Technical Analysis",
      "Source Code",
      "Parameters",
      "Returns",
      "Charts",
      "pd.Series",
      "matplotlib"
    ]
  },
  "ta.clenow": {
    "title": "clenow",
    "description": "This page offers thorough knowledge of Clenow Volatility Adjusted Momentum\n  model in OpenBB. It describes the function, parameters, returns and provides examples\n  of the feature in python code for aspiring users.",
    "keywords": [
      "Clenow Volatility Adjusted Momentum",
      "Technical analysis",
      "Function description",
      "Parameters",
      "Python code example",
      "Data series",
      "Regression",
      "Momentum chart"
    ]
  },
  "ta.demark": {
    "title": "demark",
    "description": "This page provides comprehensive documentation on the demark sequential\n  indicator feature offered. It includes detailed source codes, parameters, returns,\n  and examples for users to understand how to get integer values for demark sequential\n  indicators, and also how to plot these indicators.",
    "keywords": [
      "demark sequential indicator",
      "technical analysis",
      "plot indicators",
      "OpenBB terminal",
      "OpenBB finance",
      "GitHub link",
      "OpenBB stocks",
      "matplotlib.axes"
    ]
  },
  "ta.donchian": {
    "title": "donchian",
    "description": "This page provides comprehensive documentation on how to calculate and\n  plot Donchian Channels using OpenBB's technical analysis tools. Learn about the\n  parameters and return types to leverage this method in your financial modelling\n  work.",
    "keywords": [
      "Donchian Channels",
      "Technical Analysis",
      "Financial Modelling",
      "FinTech",
      "Volatility Models",
      "Dataframes",
      "Data Visualization"
    ]
  },
  "ta.ema": {
    "title": "ema",
    "description": "This page provides information on OpenBB's EMA (Exponential Moving Average)\n  functionality, a method often used in technical analysis of stocks. The mathematical\n  model's source code, parameters, and returns are clearly outlined.",
    "keywords": [
      "ema",
      "exponential moving average",
      "technical analysis",
      "stock",
      "overlap model",
      "dataframe",
      "pd.Series"
    ]
  },
  "ta.fib": {
    "title": "fib",
    "description": "This page serves as documentation for the Fibonacci levels calculation\n  model and its plotting function. Learn how to set parameters, define retracement\n  periods, and generate charts.",
    "keywords": [
      "Fibonacci levels",
      "retracement periods",
      "Fibonacci documentation",
      "plotting function",
      "financial market analytics",
      "technical analysis",
      "data visualization",
      "Fibonacci levels chart"
    ]
  },
  "ta.fisher": {
    "title": "fisher",
    "description": "Documentation page about Fisher Transform, a technical analysis indicator\n  used in finance. Detailed explanation on how to implement and use the Fisher Transform\n  indicator using the OpenBB library, with guides on parameters and returns for function\n  calls.",
    "keywords": [
      "Fisher Transform",
      "technical analysis",
      "OpenBB library",
      "OHLC prices",
      "indicator window"
    ]
  },
  "ta.hma": {
    "title": "hma",
    "description": "This page provides documentation on the hma function from OpenBB. This\n  function calculates the hull moving average (HMA) of stock prices, using a pandas\n  dataframe as input and returning a dataframe with the prices and the HMA.",
    "keywords": [
      "hma",
      "hull moving average",
      "stock technical analysis",
      "pandas",
      "SMA window"
    ]
  },
  "ta.kc": {
    "title": "kc",
    "description": "This documentation page provides details on the Keltner Channels functionality\n  implemented in the OpenBB Terminal. It includes a guide for using the Keltner Channels\n  analytical model and the chart plotting function.",
    "keywords": [
      "Keltner Channels",
      "technical analysis",
      "volatility model",
      "chart plotting",
      "financial data analysis",
      "Data visualization",
      "ema filter"
    ]
  },
  "ta.ma": {
    "title": "ma",
    "description": "Comprehensive guide to the ma and ma_chart functions as part of the OpenBB\n  technical analysis python package. These functions focus on plotting the moving\n  average (MA) technical indicator of various types like EMA, ZLMA and SMA for a given\n  time-series data.",
    "keywords": [
      "Technical Analysis",
      "Moving Average",
      "EMA",
      "SMA",
      "ZLMA",
      "Pandas",
      "Financial Data",
      "Data Visualization",
      "FAANG stocks",
      "MA Chart"
    ]
  },
  "ta.macd": {
    "title": "macd",
    "description": "This page provides a comprehensive guide to MACD (Moving Average Convergence\n  Divergence) implementation in OpenBB terminal. It explains how to model and visualize\n  the MACD signal using Python as well as the parameters involved.",
    "keywords": [
      "macd",
      "OpenBB_terminal",
      "technical analysis",
      "moving average convergence divergence",
      "plotting macd",
      "macd signal",
      "data visualization",
      "momentum model",
      "momentum view"
    ]
  },
  "ta.obv": {
    "title": "obv",
    "description": "This page provides information on how to use the On Balance Volume (OBV)\n  technical indicator source code. It covers how to plot the OBV chart and list the\n  parameters and returns. This information is useful for stock market analysis.",
    "keywords": [
      "OBV",
      "On Balance Volume",
      "technical indicator source code",
      "plot OBV chart",
      "parameters",
      "returns",
      "stock market analysis"
    ]
  },
  "ta.rsi": {
    "title": "rsi",
    "description": "Implements relative strength index",
    "keywords": [
      "relative strength index",
      "technical analysis"
    ]
  },
  "ta.sma": {
    "title": "sma",
    "description": "This page provides a comprehensive guide on how to use the sma function\n  in OpenBB to get the Simple Moving Average (SMA) for stock. It also includes source\n  code, parameters, and returns descriptions.",
    "keywords": [
      "sma",
      "moving average",
      "stock",
      "financial technical analysis",
      "openbb.ta.sma function",
      "dataframe",
      "pricing",
      "programming"
    ]
  },
  "ta.stoch": {
    "title": "stoch",
    "description": "This page provides information on the Stochastic oscillator method used\n  in the OpenBB Terminal. Here, you can find details about the parameters and function\n  implementation for both the model and chart view. It presents a tutorial on how\n  to plot the Stochastic oscillator signal with various parameters.",
    "keywords": [
      "Stochastic oscillator",
      "Technical Analysis",
      "Python code",
      "Online documentation",
      "Model view",
      "Chart view",
      "OHLC prices",
      "Stock ticker symbol"
    ]
  },
  "ta.vwap": {
    "title": "vwap",
    "description": "This documentation page provides detailed information about the volume\n  weighted average price, or VWAP, a popular technical analysis indicator. It includes\n  Python code examples for calculating VWAP on a pandas DataFrame of stocks prices,\n  and creating a visual chart of VWAP data using matplotlib.",
    "keywords": [
      "vwap",
      "technical analysis",
      "volume weighted average price",
      "data visualization",
      "pandas dataframe",
      "stock prices",
      "trading indicators",
      "OHLC prices",
      "matplotlib"
    ]
  },
  "ta.wma": {
    "title": "wma",
    "description": "This page provides a comprehensive guide on how to get the Weighted Moving\n  Average (WMA) for stock using OpenBB's wma function. This includes relevant parameters\n  and return values.",
    "keywords": [
      "Weighted Moving Average",
      "WMA",
      "Stock Analysis",
      "Python Function",
      "Technical Analysis"
    ]
  },
  "ta.zlma": {
    "title": "zlma",
    "description": "This page provides an in-depth view of the zlma function, which is used\n  to calculate zero-lagged exponential moving average (ZLEMA) for stocks. The page\n  includes the source code and details of parameters and returns.",
    "keywords": [
      "ZLEMA",
      "stock analysis",
      "technical analysis",
      "openbb.ta.zlma function",
      "exponential moving average",
      "OpenBB finance",
      "overlap_model.py",
      "dataframe",
      "EMA"
    ]
  }
}
