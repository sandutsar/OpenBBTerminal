{
  "alt.covid.cases": {
    "title": "cases",
    "description": "A detailed guide on how to use the 'cases' command to show historical\n  cases for any country. This command is simple to use as it doesn't need any parameters,\n  offering a straightforward solution for data visualization.",
    "keywords": [
      "historical cases",
      "country cases",
      "cases command",
      "no parameters",
      "data visualization"
    ]
  },
  "alt.covid.country": {
    "title": "country",
    "description": "This page provides information on how to select a country to look at\n  its data. It displays detailed analysis and parameters for each country.",
    "keywords": [
      "Country Data",
      "Parameters",
      "Country Selection",
      "Data Selection"
    ]
  },
  "alt.covid.deaths": {
    "title": "deaths",
    "description": "This page provides access to historical deaths data per country. It explains\n  the usage of the 'deaths' command, which requires no parameters and presents the\n  data in a visual format.",
    "keywords": [
      "Death statistics",
      "Historical deaths",
      "Country wise death rate",
      "Death data visualization",
      "Countries death data"
    ]
  },
  "alt.covid.ov": {
    "title": "ov",
    "description": "This ov page includes historical cases and deaths by country, along with\n  usage instructions and on-page parameters.",
    "keywords": [
      "ov",
      "historical cases",
      "deaths by country",
      "usage",
      "parameters"
    ]
  },
  "alt.covid.rates": {
    "title": "rates",
    "description": "The 'rates' page in our documentation provides insights on how to access\n  historical death and case rates for a given country using our data visualization\n  tool. No parameters are required.",
    "keywords": [
      "Rates documentation",
      "Historical death rates",
      "Country cases rates",
      "Data visualization"
    ]
  },
  "alt.covid.slopes": {
    "title": "slopes",
    "description": "This page offers information on the 'slopes' Python function, which displays\n  the countries with the highest slope values. You can customize the data displayed\n  with parameters such as 'days back', 'reverse' for sorting options, and 'threshold'\n  for total cases.",
    "keywords": [
      "slope",
      "data sorting",
      "data analysis",
      "cases threshold",
      "ascending",
      "descending",
      "reverse",
      "days back"
    ]
  },
  "alt.oss.rossidx": {
    "title": "rossidx",
    "description": "This page provides detailed instructions on how to use the rossidx command\n  in Python to sort and display information about startups from the Ross Index. Users\n  can sort by various criteria (e.g. GitHub Stars, Company, Country), display charts,\n  and set the chart type to 'stars' or 'forks'.",
    "keywords": [
      "rossidx",
      "startups",
      "chart",
      "stars",
      "forks",
      "sorting",
      "growth chart",
      "GitHub",
      "company",
      "country",
      "city",
      "founded",
      "raised money"
    ]
  },
  "alt.oss.rs": {
    "title": "rs",
    "description": "Learn how to display a repository summary by using the rs command. A\n  simple guide to understanding the rs usage and its parameters. Source code is available\n  on Github.",
    "keywords": [
      "repo summary",
      "repository",
      "rs command",
      "Github",
      "openbb-finance/openbbterminal"
    ]
  },
  "alt.oss.sh": {
    "title": "sh",
    "description": "The page provides instructions on using the 'sh' command to view a repository's\n  star history on GitHub. The usage and parameters are clearly detailed.",
    "keywords": [
      "repo star history",
      "sh command usage",
      "GitHub",
      "repository search",
      "openbb-finance/openbbterminal"
    ]
  },
  "alt.oss.tr": {
    "title": "tr",
    "description": "Documentation on how to display top repositories using the GitHub API.\n  Instructions include usage, parameters details, and examples. The user can sort\n  the repos by stars or forks, and can filter by repo categories.",
    "keywords": [
      "top repositories",
      "github api",
      "parameters",
      "stars",
      "forks",
      "repo categories",
      "filter",
      "sort",
      "usage"
    ]
  },
  "crypto.candle": {
    "title": "candle",
    "description": "This page provides documentation on using the 'candle' feature for displaying\n  charts for loaded coins in the chosen currency and date range. It includes usage\n  instructions and details about parameters.",
    "keywords": [
      "candle feature",
      "coin chart",
      "currency chart",
      "date range chart",
      "logy parameter",
      "log scale chart",
      "docusaurus page SEO"
    ]
  },
  "crypto.find": {
    "title": "find",
    "description": "'Use our coin search tool to find similar coins by name, symbol, or id\n  across different platforms like CoinGecko, Binance, Coinbase and CoinPaprika. If\n  you don''t remember the exact name or id of a crypto coin, you can use this tool\n  for your search. Provide your search query and choose the searching key: symbol,\n  id or name of coin. You can limit the number of records displayed and move over\n  coins using pagination.'",
    "keywords": [
      "coin search",
      "cryptocurrency",
      "crypto search tool",
      "find coin by symbol",
      "find coin by id",
      "Bitcoin",
      "CoinGecko",
      "Binance",
      "CoinPaprika",
      "Coinbase",
      "search query",
      "pagination mechanism"
    ]
  },
  "crypto.headlines": {
    "title": "headlines",
    "description": "This page provides comprehensive details on how to use 'headlines' to\n  display sentiment analysis from FinBrain for specific cryptocurrencies. It includes\n  the usage commands, parameters, and several examples for better understanding.",
    "keywords": [
      "headlines",
      "sentiment analysis",
      "FinBrain",
      "cryptocurrencies",
      "command usage",
      "parameters",
      "examples",
      "cryptocurrency symbols"
    ]
  },
  "crypto.load": {
    "title": "load",
    "description": "This page provides instructions on how to load and analyze cryptocurrency\n  data from various sources with custom intervals using Python. Ideal for Bitcoin,\n  Ethereum, and other cryptocurrency investors and analysts.",
    "keywords": [
      "cryptocurrency analysis",
      "crypto trading",
      "Yahoo Finance",
      "ccxt",
      "cg",
      "crypto exchange",
      "Python cryptocurrency",
      "coin symbol",
      "Bitcoin",
      "Ethereum",
      "Binance",
      "crypto intervals",
      "USD trading"
    ]
  },
  "crypto.price": {
    "title": "price",
    "description": "This documentation page contains information on how to display the price\n  and confidence interval of various crypto coins in real-time using Pyth. It features\n  a table of ~100 available symbols for different coins. Use the provided command\n  options to load data.",
    "keywords": [
      "Price display",
      "Real-time data",
      "Confidence interval",
      "Pyth",
      "Usage",
      "Parameters",
      "Symbols",
      "Crypto coins"
    ]
  },
  "crypto.prt": {
    "title": "prt",
    "description": "The Potential Returns Tool page provides detailed usage and parameter\n  information for the tool which helps users estimate returns from various cryptocurrencies\n  if they reach a certain price or market cap. The tool utilizes data from CoinGecko.",
    "keywords": [
      "Potential Returns Tool",
      "cryptocurrency",
      "market cap",
      "coin data",
      "CoinGecko",
      "compare crypto",
      "crypto price",
      "top N coins"
    ]
  },
  "crypto.dd.active": {
    "title": "active",
    "description": "This page provides information on how to display active blockchain addresses\n  over time including usage, parameters and visualization. The data source is Glassnode.",
    "keywords": [
      "Blockchain",
      "Addresses",
      "Active",
      "Glassnode",
      "Data visualization",
      "Frequency Interval",
      "Initial Date",
      "Final Date"
    ]
  },
  "crypto.dd.ath": {
    "title": "ath",
    "description": "This documentation is about the All Time High (ATH) function for a crypto\n  coin or token. A user can load coin data and see the highest price (in USD or BTC)\n  that coin has ever reached.",
    "keywords": [
      "all time high",
      "crypto coin",
      "load coin data",
      "highest price",
      "price in USD",
      "price in BTC"
    ]
  },
  "crypto.dd.atl": {
    "title": "atl",
    "description": "The 'atl' command page provides information on how to retrieve all time\n  low data for a specific cryptocurrency coin. The page includes instructions, parameters,\n  and examples of usage.",
    "keywords": [
      "Cryptocurrency",
      "Coin data",
      "All time low",
      "ATL command",
      "cryptocurrency data retrieval",
      "crypto lows",
      "data commands",
      "crypto commands",
      "bitcoin",
      "ethereum",
      "crypto market data"
    ]
  },
  "crypto.dd.balance": {
    "title": "balance",
    "description": "This page provides a detailed guide on how to display balance using a\n  Python script. It features usage instructions, parameter descriptions, and particularities\n  with the 'vs' parameter representing the quote currency.",
    "keywords": [
      "balance",
      "coin",
      "currency",
      "USDT",
      "python script",
      "quote currency"
    ]
  },
  "crypto.dd.basic": {
    "title": "basic",
    "description": "The page provides extensive information on how to use the 'basic' function\n  in the cryptocurrency realm to extract key details of a coin such as its name, symbol,\n  rank, type, description, platform, proof_type, tags, contract and parent. Contains\n  usage instructions and examples.",
    "keywords": [
      "crypto",
      "coin information",
      "python crypto commands",
      "cryptocurrency",
      "bitcoin",
      "function usage",
      "crypto function",
      "basic"
    ]
  },
  "crypto.dd.bc": {
    "title": "bc",
    "description": "Documentation for the 'bc' command in a blockchain context - provides\n  URLs for loaded coins on various blockchain explorer sites like etherscan.io or\n  polkascan.io for analysing blockchain data.",
    "keywords": [
      "blockchain",
      "blockchain explorers",
      "blockchain URLs",
      "etherescan.io",
      "polkascan.io",
      "blockchain data",
      "crypto",
      "btc.com",
      "tokenview.com",
      "blockchair.com"
    ]
  },
  "crypto.dd.change": {
    "title": "change",
    "description": "A detailed guide on how to use the 'change' command for tracking active\n  blockchain addresses over time in various exchanges. It also provides instructions\n  on setting input parameters and explains their usage for more precise data.",
    "keywords": [
      "blockchain",
      "active blockchain addresses",
      "tracking blockchain",
      "change command",
      "exchange platform",
      "blockchain data tracking",
      "data fetching",
      "data commands",
      "coinex",
      "bittrex",
      "binance",
      "poloniex",
      "blockchain analytics",
      "glassnode source",
      "command parameters",
      "bitfinex",
      "kraken",
      "okex",
      "bithumb",
      "coinbase",
      "luno"
    ]
  },
  "crypto.dd.desc": {
    "title": "desc",
    "description": "Informative project description utility for numerous blockchain projects\n  with parameters such as 'project of interest'. The page informs about the metadata\n  and application of the tool across different use cases.",
    "keywords": [
      "docusaurus",
      "project description",
      "blockchain",
      "crypto projects",
      "metadata",
      "usage"
    ]
  },
  "crypto.dd.dev": {
    "title": "dev",
    "description": "This page provides a comprehensive guide to our dev command, which gives\n  insights into the development data of a specific loaded coin. The command includes\n  useful statistics like the number of forks, stars, subscribers, pull requests, merges,\n  etc. on Github.",
    "keywords": [
      "developers data",
      "loaded coin",
      "github statistics",
      "crypto command",
      "crypto tool",
      "software development",
      "code development",
      "pull request",
      "commits",
      "forks",
      "merges",
      "contributors",
      "subscribers",
      "stars"
    ]
  },
  "crypto.dd.eb": {
    "title": "eb",
    "description": "The eb page provides information on how to display active blockchain\n  addresses over time using different exchanges. It also includes details on parameters\n  such as the initial and final dates for fetching data.",
    "keywords": [
      "blockchain addresses",
      "data fetching",
      "api keys",
      "exchanges",
      "parameters"
    ]
  },
  "crypto.dd.events": {
    "title": "events",
    "description": "This is a docusaurus page dedicated to the events tool which displays\n  the most important events of cryptocurrency coins. It presents multiple functionalities\n  such as sorting and limiting the amount of events displayed, with additional features\n  like displaying urls for each event.",
    "keywords": [
      "cryptocurrency",
      "events",
      "coins",
      "limit",
      "sort",
      "ascending order",
      "descending order",
      "urls",
      "docusaurus",
      "crypto tool",
      "crypto events"
    ]
  },
  "crypto.dd.ex": {
    "title": "ex",
    "description": "An in-depth guide to using the 'ex' command to retrieve and manipulate\n  data from various crypto exchanges. Learn how to limit query results, sort data\n  by important parameters such as id and volume, and switch between ascending and\n  descending order.",
    "keywords": [
      "exchanges",
      "coin",
      "crypto",
      "parameters",
      "sorted data",
      "ascend",
      "descend",
      "limit",
      "fiats",
      "id",
      "name",
      "adjusted_volume_24h_share"
    ]
  },
  "crypto.dd.fr": {
    "title": "fr",
    "description": "This documentation page explains how to use the 'fr' command to display\n  an asset's fundraising details on Messari.io. The command requires no parameters.",
    "keywords": [
      "fundraising",
      "details",
      "asset",
      "Messari.io",
      "parameters"
    ]
  },
  "crypto.dd.fundrate": {
    "title": "fundrate",
    "description": "The fundrate page discusses how to display the funding rate by exchange\n  for a certain asset using the fundrate command. It presents a detailed explanation\n  of the command usage, source, and implies that no parameters are needed. This is\n  ideal for those seeking in-depth information about coinglass's API reference.",
    "keywords": [
      "fundrate",
      "funding rate",
      "exchange",
      "asset",
      "API-Reference",
      "Coinglass"
    ]
  },
  "crypto.dd.funot": {
    "title": "funot",
    "description": "This page covers the 'funot' function, which displays fundamental metrics\n  such as market cap, revenue, and TVL (Total Value Locked) for a wide array of digital\n  asset projects, as sourced from Token Terminal.",
    "keywords": [
      "funot",
      "Token Terminal",
      "digital asset metrics",
      "cryptocurrency analysis",
      "cryptocurrency projects",
      "market cap",
      "revenue",
      "TVL",
      "python function",
      "Total Value Locked",
      "cryptocurrency metrics",
      "fundamental metrics",
      "SEO for docusaurus"
    ]
  },
  "crypto.dd.gh": {
    "title": "gh",
    "description": "Learn how to utilize the GH command line tool to track GitHub activity\n  for a given crypto coin. Discover how to filter by development activity, set frequency\n  intervals, and define start and end dates with this powerful Python-based\n  tool.",
    "keywords": [
      "Github activity",
      "Pull Request",
      "Issue",
      "command line tool",
      "development activity",
      "frequency intervals",
      "start and end dates",
      "Santiment",
      "tracking tool"
    ]
  },
  "crypto.dd.gov": {
    "title": "gov",
    "description": "This page provides information on the 'gov' command, enabling the display\n  of an asset's governance. The command is easy to use and requires no parameters.",
    "keywords": [
      "gov",
      "asset governance",
      "no parameters",
      "usage",
      "messari.io source"
    ]
  },
  "crypto.dd.info": {
    "title": "info",
    "description": "This page provides commands to retrieve basic information about any loaded\n  cryptocurrency like Bitcoin. It shows data like Name, Symbol, Description, Market\n  Cap, Public Interest, Supply, and Price related metrics. This feature can be very\n  useful for those tracking specific cryptocurrencies and their performance.",
    "keywords": [
      "crypto",
      "bitcoin",
      "cryptocurrency information",
      "bitcoin stats",
      "market cap",
      "public interest score",
      "supply",
      "price metrics",
      "crypto commands",
      "btc",
      "digital currency"
    ]
  },
  "crypto.dd.inv": {
    "title": "inv",
    "description": "Documentation page for the 'inv' command - displaying asset's investors.\n  This command runs without parameters and is a part of financial data analysis tools.",
    "keywords": [
      "asset investors",
      "financial data",
      "data analysis",
      "Python commands",
      "parameters",
      "docusaurus page",
      "messari.io"
    ]
  },
  "crypto.dd.links": {
    "title": "links",
    "description": "The 'links' command is utilized to display an asset's links. This command\n  doesn't require any parameters and is beneficial for those handling asset information.",
    "keywords": [
      "links",
      "asset's links",
      "parameters",
      "asset information"
    ]
  },
  "crypto.dd.liquidations": {
    "title": "liquidations",
    "description": "The Liquidations page provides detailed data about crypto asset liquidations.\n  It's an easy-to-use feature of the Coinglass API with no parameters required. Enhance\n  your understanding of cryptocurrency liquidations.",
    "keywords": [
      "liquidations",
      "crypto asset data",
      "coinglass API",
      "cryptocurrency",
      "blockchain technology"
    ]
  },
  "crypto.dd.load": {
    "title": "load",
    "description": "Experienced in loading crypto currency data for analysis from Yahoo Finance\n  by default or other sources such as 'ccxt' or 'cg'. Ability to select specific interval,\n  start and end dates, and exchange currencies",
    "keywords": [
      "Load crypto currency",
      "Yahoo Finance",
      "ccxt",
      "cg",
      "specific interval",
      "crypto analysis",
      "exchange selection",
      "coin symbol",
      "quote currency"
    ]
  },
  "crypto.dd.market": {
    "title": "market",
    "description": "This page provides a command to fetch market data for a loaded coin,\n  offering detailed metrics like Market Cap, Supply, Circulating Supply, Price, Volume,\n  Price Change Percentage and more. Examples are provided for a better understanding.",
    "keywords": [
      "Market Data",
      "Coin Metrics",
      "Market Cap",
      "Supply",
      "Circulating Supply",
      "Price",
      "Volume",
      "Price Change Percentage",
      "Fully Diluted Valuation",
      "Total Volume",
      "High/Low 24h"
    ]
  },
  "crypto.dd.mcapdom": {
    "title": "mcapdom",
    "description": "The mcapdom documentation page presents an outline of how to display\n  an asset's percentage share of the total crypto circulating market cap. It includes\n  usage and parameters specifically for frequency interval, initial date, and end\n  date.",
    "keywords": [
      "mcapdom",
      "crypto circulating market cap",
      "asset's percentage share",
      "frequency interval",
      "initial date"
    ]
  },
  "crypto.dd.mkt": {
    "title": "mkt",
    "description": "The 'mkt' page allows for viewing of market data for a given coin based\n  on different parameters such as trust_score, volume, and price. The page accepts\n  different parameters to further sort, limit, and display the data effectively.",
    "keywords": [
      "mkt",
      "coin",
      "market data",
      "trust_score",
      "volume",
      "price data",
      "cryptocurrency",
      "data sort",
      "url display",
      "data limit"
    ]
  },
  "crypto.dd.mt": {
    "title": "mt",
    "description": "This page provides detailed information about how to display Messari\n  timeseries data, explaining the use of key parameters, available data frequency\n  intervals, and how to query the timeseries. It is a resource for understanding and\n  extracting meaningful insights from Messari data.",
    "keywords": [
      "messari timeseries",
      "timeseries parameters",
      "data frequency intervals",
      "messari data sources",
      "timeseries query",
      "messari usage"
    ]
  },
  "crypto.dd.news": {
    "title": "news",
    "description": "The News Page aggregates the latest crypto news from the CryptoPanic\n  platform, allowing extensive filter and sort options to customize your feed. The\n  page is interactive and easy-to-use for those who want to stay updated with the\n  cryptocurrency market news.",
    "keywords": [
      "news",
      "cryptopanic",
      "cryptocurrency",
      "aggregator platform",
      "coin",
      "filter options",
      "crypto news",
      "crypto media",
      "parameters"
    ]
  },
  "crypto.dd.nonzero": {
    "title": "nonzero",
    "description": "The 'nonzero' page provides documentation on how to display addresses\n  with nonzero assets in a specific blockchain using the Glassnode API. The page details\n  the usage of the command and parameters, along with providing a visual representation.",
    "keywords": [
      "nonzero",
      "blockchain",
      "glassnode",
      "addresses",
      "assets",
      "data fetching",
      "api",
      "parameters"
    ]
  },
  "crypto.dd.ob": {
    "title": "ob",
    "description": "This page explains how to retrieve the order book for any selected cryptocurrency\n  coin across numerous exchanges. It specifically instructs the use of the 'ob' command\n  in python.",
    "keywords": [
      "order book",
      "cryptocurrency",
      "exchange",
      "quote currency",
      "cryptocurrency pairs",
      "binance",
      "bitfinex",
      "coinbase",
      "poloniex",
      "crypto trading",
      "trading parameters"
    ]
  },
  "crypto.dd.oi": {
    "title": "oi",
    "description": "The documentation page 'oi' provides information about open interest\n  by exchange for certain assets. It includes parameters, usage and an illustrative\n  image.",
    "keywords": [
      "oi",
      "API-Reference",
      "open interest",
      "exchange",
      "assets",
      "parameters",
      "usage",
      "illustrative image"
    ]
  },
  "crypto.dd.pi": {
    "title": "pi",
    "description": "This page provides a command that displays detailed project information\n  of crypto assets. The command showcases project details, technology details, public\n  repositories and disclosed vulnerabilities with examples in Python.",
    "keywords": [
      "crypto assets",
      "project information",
      "technology details",
      "public repositories",
      "disclosed vulnerabilities",
      "Bitcoin",
      "BTC"
    ]
  },
  "crypto.dd.ps": {
    "title": "ps",
    "description": "Detailed documentation on ps metric, a tool used to fetch price and supply\n  related metrics for a given coin. Includes usage, parameters, examples, and more\n  for crypto analysis and data aggregation.",
    "keywords": [
      "ps metric",
      "coin pricing",
      "coin supply metrics",
      "crypto analytics",
      "crypto metrics",
      "coin info"
    ]
  },
  "crypto.dd.rm": {
    "title": "rm",
    "description": "A documentation page for the 'rm' command showcasing how to display an\n  asset's roadmap sourced from Messari. It contains sections on how to use this command,\n  and parameters to modify data presentation.",
    "keywords": [
      "rm",
      "asset's roadmap",
      "messari",
      "usage",
      "parameters",
      "reverse",
      "sorting data",
      "raw data",
      "ascending order",
      "descending order"
    ]
  },
  "crypto.dd.score": {
    "title": "score",
    "description": "This page provides access to cryptocurrency scores including CoinGecko,\n  Developer, Community and Sentiment scores. Learn how to access these scores for\n  any loaded coin.",
    "keywords": [
      "cryptocurrency scores",
      "CoinGecko scores",
      "Developer scores",
      "Community scores",
      "Sentiment scores",
      "Reddit scores",
      "crypto metrics",
      "crypto ranking",
      "crypto sentiment",
      "crypto statistics"
    ]
  },
  "crypto.dd.social": {
    "title": "social",
    "description": "This Docusaurus page provides guidelines on using the 'social' command\n  to fetch relevant social media information for any loaded cryptocurrency.",
    "keywords": [
      "social media for cryptocurrencies",
      "information about crypto coins",
      "Telegram channels for cryptos",
      "Reddit groups for cryptos",
      "Twitter for cryptos",
      "Bitcointalk for cryptos",
      "Facebook for cryptos",
      "Discord for cryptos"
    ]
  },
  "crypto.dd.stats": {
    "title": "stats",
    "description": "The 'stats' page provides 24 hour statistical data on cryptocurrencies\n  with options to view data in various quote currencies. It displays metrics such\n  as open value, high, low, volume, and last known value.",
    "keywords": [
      "coin stats",
      "crypto stats",
      "quote currency",
      "24 hr Product Stats",
      "USD",
      "USDC",
      "USDT",
      "EUR",
      "GBP",
      "volume",
      "open",
      "high",
      "low",
      "last",
      "volume_30day"
    ]
  },
  "crypto.dd.team": {
    "title": "team",
    "description": "'Information about functions related to displaying an asset''s team,\n  with usage instructions and noting that there are no parameters required. Source:\n  Messari.io'",
    "keywords": [
      "team",
      "display asset's team",
      "messari.io",
      "no parameters"
    ]
  },
  "crypto.dd.tk": {
    "title": "tk",
    "description": "Learn about usage and parameters of the tk command which displays asset's\n  tokenomics. Access source and detailed guidance here.",
    "keywords": [
      "tk",
      "asset's tokenomics",
      "no parameters",
      "messari.io source"
    ]
  },
  "crypto.dd.trades": {
    "title": "trades",
    "description": "This page provides a comprehensive guide on how to get the latest trades\n  for a selected coin, demonstrating usage in Python. It explains the parameters required\n  and supports a variety of exchanges, including Binance and Bitfinex.",
    "keywords": [
      "trades",
      "cryptocurrency",
      "coin",
      "exchange",
      "parameters",
      "quote currency",
      "bitfinex",
      "binance",
      "usage"
    ]
  },
  "crypto.dd.twitter": {
    "title": "twitter",
    "description": "This page provides information on how to use the twitter function to\n  display the last 10 tweets for a given coin. The function includes parameters such\n  as limit and sortby which can be used to customize the output. The tweets are displayed\n  with their date, user_name, status, retweet_count, and like_count.",
    "keywords": [
      "twitter",
      "tweets",
      "sorting",
      "limit parameter",
      "ascending sort",
      "descending sort",
      "date",
      "user_name",
      "status",
      "retweet_count",
      "like_count"
    ]
  },
  "crypto.dd.web": {
    "title": "web",
    "description": "This page offers information on how to find websites for a given Coin,\n  including homepages, forums, and announcement sites. It also provides a guide on\n  how to use the web command with no parameters.",
    "keywords": [
      "crypto",
      "coin",
      "websites",
      "homepages",
      "forums",
      "announcement sites",
      "web command"
    ]
  },
  "crypto.defi.anchor": {
    "title": "anchor",
    "description": "This documentation covers the usage of anchor which displays earnings\n  data of a specific terra address. It also provides the option to view the history\n  of past transactions. The page provides code examples for better understanding.",
    "keywords": [
      "anchor",
      "terra",
      "cryptocurrency",
      "crypto",
      "Blockchain",
      "earnings data",
      "transactions history"
    ]
  },
  "crypto.defi.dtvl": {
    "title": "dtvl",
    "description": "dtvl is a tool designed for tracking the historical Total Value Locked\n  (TVL) of different decentralized applications (dApps). It offers users commands\n  to search and display historical TVL data for specific crypto dApps, providing valuable\n  insights for crypto investors and enthusiasts.",
    "keywords": [
      "docusaurus SEO",
      "website marketing",
      "dApps TVL",
      "historical TVL",
      "TVL tracking",
      "crypto Dapps",
      "crypto TVL",
      "TVL analytics",
      "TVL data",
      "crypto data"
    ]
  },
  "crypto.defi.gacc": {
    "title": "gacc",
    "description": "This page provides information on how to display the terra blockchain\n  account growth history using the 'gacc' function. It includes usage instructions,\n  parameters description, and an explanatory diagram.",
    "keywords": [
      "terra blockchain",
      "account growth history",
      "gacc function",
      "parameters description"
    ]
  },
  "crypto.defi.gdapps": {
    "title": "gdapps",
    "description": "This is a detailed guide on using the gdapps function. It helps to display\n  top dApps based on TVL grouped by chain, including usage and parameters information.",
    "keywords": [
      "gdapps",
      "dApps",
      "TVL",
      "chain",
      "display",
      "parameters",
      "limit",
      "usage"
    ]
  },
  "crypto.defi.lcsc": {
    "title": "lcsc",
    "description": "This is a documentation page for the 'lcsc' function which displays Luna\n  circulating supply changes. The function sources its data from Smartstake.io. Instructions\n  are provided on obtaining the required key token from Smartstake.io alongside usage\n  and parameters information.",
    "keywords": [
      "lcsc",
      "Luna circulating supply",
      "Smartstake.io",
      "key token",
      "Inspect tool",
      "Fetch/XHR tab",
      "listData",
      "history",
      "dayCount",
      "URL extraction",
      "parameters",
      "range"
    ]
  },
  "crypto.defi.ldapps": {
    "title": "ldapps",
    "description": "This documentation page provides detailed information on how to display\n  and interpret data on Decentralized Applications (dApps) listed on DeFi Llama including\n  parameters, usage and examples.",
    "keywords": [
      "DeFi Llama",
      "dApps",
      "Decentralized Applications",
      "ldapps command",
      "Usage",
      "Parameters",
      "Examples",
      "Crypto",
      "Crypto Sorting",
      "Crypto Commands",
      "Blockchain",
      "Decentralized Finance"
    ]
  },
  "crypto.defi.newsletter": {
    "title": "newsletter",
    "description": "This page outlines the usage, parameters, choices, and examples of the\n  newsletter command, which displays DeFi related substack newsletters. It is part\n  of a larger toolkit aimed at simplifying tasks within the crypto and DeFi space.",
    "keywords": [
      "decentralized finance",
      "DeFi",
      "newsletter",
      "substack newsletters",
      "crypto",
      "python script",
      "parameters"
    ]
  },
  "crypto.defi.pairs": {
    "title": "pairs",
    "description": "This page provides a detailed guide on how to use recently added pairs\n  on Uniswap DEX using a command line tool. It includes instructions on usage, parameters,\n  and examples, providing a comprehensive understanding of sorting and filtering commands\n  related to trading volume and transaction counts.",
    "keywords": [
      "Uniswap DEX",
      "pairs",
      "trading volume",
      "transactions",
      "sort",
      "reverse",
      "command line tool",
      "parameters",
      "examples",
      "crypto currencies"
    ]
  },
  "crypto.defi.pools": {
    "title": "pools",
    "description": "This page is a Python script documentation to display and sort Uniswap\n  Pools by volume, token name symbol, and transaction count using dataset from thegraph.com.\n  It provides clear instructions and examples on usage and parameters.",
    "keywords": [
      "Uniswap Pools",
      "Volume",
      "Token Name",
      "Token Symbol",
      "Volume USD",
      "Transaction Count",
      "Sorting",
      "Python Script",
      "Cryptocurrency",
      "TheGraph Source",
      "Data Display"
    ]
  },
  "crypto.defi.sinfo": {
    "title": "sinfo",
    "description": "Learn how to use sinfo tool to display staking info of a Terra address.\n  Provides usage information and parameter details.",
    "keywords": [
      "sinfo tool",
      "Terra address",
      "staking info",
      "parameters",
      "usage"
    ]
  },
  "crypto.defi.sratio": {
    "title": "sratio",
    "description": "This page provides a guide on how to use sratio tool for displaying terra\n  blockchain staking ratio history. It includes parameters, usage and source link.",
    "keywords": [
      "sratio",
      "terra blockchain",
      "staking ratio history",
      "fcd.terra.dev",
      "parameters",
      "limit"
    ]
  },
  "crypto.defi.sreturn": {
    "title": "sreturn",
    "description": "The sreturn page provides information about the terra blockchain staking\n  returns history. It contains usage details, parameters, and illustrative diagrams.",
    "keywords": [
      "sreturn",
      "terra blockchain",
      "staking returns history",
      "usage details",
      "parameters",
      "diagrams",
      "blockchain technology"
    ]
  },
  "crypto.defi.stats": {
    "title": "stats",
    "description": "Documentation for 'stats' query, providing base statistics about Uniswap,\n  a decentralized exchange (DEX). The page includes usage instructions and examples\n  of results including metrics like totalVolumeUSD, totalLiquidityUSD, pairCount,\n  txCount, and totalLiquidityETH.",
    "keywords": [
      "Uniswap DEX",
      "DEX statistics",
      "crypto defi stats",
      "volumeUSD",
      "liquidityUSD",
      "pairCount",
      "txCount",
      "liquidityETH",
      "base statistics",
      "theGraph.com",
      "usage query",
      "Uniswap metrics"
    ]
  },
  "crypto.defi.stvl": {
    "title": "stvl",
    "description": "The page provides detailed information about the stvl function. This\n  includes its usage, parameters like 'limit' and how to display TVLs for listed dApps\n  using llama.fi API.",
    "keywords": [
      "stvl",
      "TVLs",
      "dApps",
      "llama.fi",
      "API",
      "parameters",
      "limit"
    ]
  },
  "crypto.defi.swaps": {
    "title": "swaps",
    "description": "This webpage displays the latest swaps done on Uniswap DEX. It allows\n  users to sort crypto transactions in different ways as per their needs. It's useful\n  for observing and analyzing recent cryptocurrency transactions.",
    "keywords": [
      "Uniswap DEX",
      "crypto swaps",
      "cryptocurrency transactions",
      "defi data",
      "last crypto swaps",
      "uniswap transactions",
      "sort uniswap dex",
      "track uniswap swaps",
      "token exchange",
      "decoding uniswap",
      "uniswap analysis"
    ]
  },
  "crypto.defi.tokens": {
    "title": "tokens",
    "description": "Detailed guidance on displaying trade-able tokens on Uniswap DEX including\n  parameters, usage, and examples. Useful for those interested in DeFi and cryptocurrency\n  trading.",
    "keywords": [
      "Uniswap DEX",
      "tokens",
      "cryptocurrency",
      "trading",
      "blockchain",
      "DeFi",
      "crypto trading",
      "tradeVolumeUSD",
      "totalLiquidity",
      "txCount"
    ]
  },
  "crypto.defi.validators": {
    "title": "validators",
    "description": "The 'validators' documentation page provides detailed insights into Terra\n  validators, including how to sort and display data related to each validator. The\n  information includes Validator Name, Tokens Amount, Voting Power, Commission Rate,\n  Status, and Uptime.",
    "keywords": [
      "validators",
      "Terra validators",
      "crypto",
      "tokens amount",
      "voting power",
      "commission rate",
      "validator status",
      "uptime",
      "Terra",
      "Defi"
    ]
  },
  "crypto.defi.vaults": {
    "title": "vaults",
    "description": "This page provides a detailed description on how to use and interact\n  with DeFi Vaults using various blockchains and DeFi protocols. It provides useful\n  commands, parameters, and examples.",
    "keywords": [
      "defi",
      "blockchain",
      "protocol",
      "vaults",
      "cryptocurrency",
      "ethereum",
      "terra",
      "beefy",
      "apy",
      "tvl",
      "parameters",
      "examples",
      "osmosis"
    ]
  },
  "crypto.disc.dapps": {
    "title": "dapps",
    "description": "A comprehensive guide to understanding and using 'dapps' command for\n  listing and sorting the top Decentralized Applications (DApps) from various categories\n  and protocols as per users' choice.",
    "keywords": [
      "DApp",
      "Decentralized Applications",
      "Crypto",
      "Blockchain",
      "PancakeSwap",
      "Splinterlands",
      "Alien Worlds",
      "Farmers World",
      "AtomicAssets",
      "Axie Infinity",
      "Upland",
      "OpenSea",
      "Katana",
      "Magic Eden"
    ]
  },
  "crypto.disc.dex": {
    "title": "dex",
    "description": "The dex page displays information about top decentralized exchanges.\n  It provides usage, parameters, and examples of how to fetch and sort the data.",
    "keywords": [
      "Decentralized Exchanges",
      "Dex command",
      "Crypto Data Sorting",
      "Crypto Trading Volume",
      "Dex Parameters",
      "Dex Examples",
      "DappRadar",
      "Cryptocurrency"
    ]
  },
  "crypto.disc.gainers": {
    "title": "gainers",
    "description": "This page provides details on the 'gainers' functionality, including\n  descriptions, parameters, usage, and examples. The gainers functionality displays\n  the coins that have gained the most in a selected time period.",
    "keywords": [
      "gainers",
      "crypto",
      "coins",
      "market cap",
      "volume",
      "time intervals",
      "parameters",
      "defaults"
    ]
  },
  "crypto.disc.games": {
    "title": "games",
    "description": "This page provides a list of top blockchain games with sorting options\n  by Name, Daily Users, and Daily Volume. Use this command to discover the most popular\n  and lucrative blockchain games.",
    "keywords": [
      "blockchain",
      "blockchain games",
      "crypto games",
      "daily volume",
      "daily users",
      "sorting",
      "top games",
      "Splinterlands",
      "PancakeSwap",
      "Alien Worlds",
      "Axie Infinity",
      "OpenSea"
    ]
  },
  "crypto.disc.losers": {
    "title": "losers",
    "description": "The 'losers' documentation page provides a Python based solution for\n  identifying cryptocurrencies with the largest drop in value over a given time period.\n  Control the analysis with options for the time interval, record limits, and sorting.\n  This tool is essential for in-depth market analysis and monitoring market trends.",
    "keywords": [
      "Market Analysis",
      "Cryptocurrency",
      "Crypto Losers",
      "Market Trends",
      "Price Drop",
      "Time Interval",
      "Record Limit",
      "Sort Options",
      "Python Script",
      "Crypto Coin Symbol",
      "Market Cap Rank",
      "Volume"
    ]
  },
  "crypto.disc.nft": {
    "title": "nft",
    "description": "Page covers usage and parameters of an NFT command for Dappradar. Allows\n  sorting NFTs by name, protocols, floor price, average price, market cap, and volume.",
    "keywords": [
      "NFT",
      "Dappradar",
      "Sort",
      "Market Cap",
      "Volume",
      "Floor Price",
      "Avg Price",
      "Protocols"
    ]
  },
  "crypto.disc.search": {
    "title": "search",
    "description": "This docusaurus page provides detail on how to use the Search function\n  within the CoinPaprika API, including specific parameters such as limit, sort, and\n  category.",
    "keywords": [
      "CoinPaprika",
      "API",
      "Search function",
      "Data sorting",
      "Data categories",
      "metadata",
      "docusaurus",
      "bitcoin"
    ]
  },
  "crypto.disc.top": {
    "title": "top",
    "description": "The page provides detailed usage patterns and instructions for the 'top'\n  function that displays N coins from data sources like CoinGecko, allowing users\n  to sort and filter the displayed data. The page includes details about various parameters,\n  their description, usage, and examples.",
    "keywords": [
      "crypto",
      "CoinGecko",
      "data filtering",
      "data sorting",
      "parameters",
      "usage",
      "examples"
    ]
  },
  "crypto.disc.trending": {
    "title": "trending",
    "description": "Discover top trending coins on CoinGecko in the last 24 hours. Our expert\n  tool provides market rankings based on the latest data for efficient crypto tracking.",
    "keywords": [
      "trending coins",
      "CoinGecko",
      "market ranking",
      "crypto tracking",
      "cryptocurrency"
    ]
  },
  "crypto.nft.collections": {
    "title": "collections",
    "description": "Understand how to use Python code for tracking NFT collections. The guide\n  includes scripts and examples showcasing how to display the floor price and sales\n  over time for top collections including CryptoPunks, Bored Ape Yacht Club, and others.",
    "keywords": [
      "NFT Collections",
      "floor price",
      "sales over time",
      "top collections",
      "CryptoPunks",
      "Bored Ape Yacht Club",
      "Mutant Ape Yacht Club",
      "Otherdeed for Otherside",
      "Moonbirds",
      "ethereum",
      "python code for NFTs"
    ]
  },
  "crypto.nft.fp": {
    "title": "fp",
    "description": "This content provides a comprehensive guide on utilizing the 'fp' command\n  in retrieving the floor price of a specific NFT collection. Examples of collections\n  include Bored Ape Yacht Club, CryptoPunks, and Cool Cats.",
    "keywords": [
      "NFT",
      "floor price",
      "collection",
      "SLUG",
      "fp",
      "bored-ape-yacht-club",
      "cryptopunks",
      "meebits",
      "veefriends",
      "cool-cats",
      "bored-ape-kennel-club",
      "mekaverse",
      "cryptoblots-art-blocks-curated",
      "loot",
      "uninterested-unicorns",
      "doodles"
    ]
  },
  "crypto.nft.stats": {
    "title": "stats",
    "description": "A guide to displaying statistics of an OpenSea NFT collection such as\n  market cap, floor price, volume, and sales using a slug parameter. This includes\n  an example using the Mutant Ape Yacht Club collection.",
    "keywords": [
      "OpenSea",
      "NFT",
      "Collection",
      "Stats",
      "Market Cap",
      "Floor Price",
      "Average Price",
      "Volume",
      "Sales",
      "Slug",
      "Crypto"
    ]
  },
  "crypto.onchain.address": {
    "title": "address",
    "description": "This page provides a guide to loading and analyzing account addresses,\n  token addresses and transaction hashes on Ethplorer with Python. Learn how to use\n  parameters for efficient analysis.",
    "keywords": [
      "ethplorer",
      "address",
      "account address",
      "token address",
      "transaction hash",
      "erc20",
      "ethereum",
      "analysis"
    ]
  },
  "crypto.onchain.baas": {
    "title": "baas",
    "description": "This documentation is related to the 'baas' function which displays the\n  average bid, ask prices, and spread for a chosen crypto pair over a specified time\n  period. The function can work with various cryptocurrencies and ERC 20 tokens.",
    "keywords": [
      "baas",
      "crypto pair",
      "average bid",
      "average ask prices",
      "spread",
      "time period",
      "ERC20 token",
      "crypto currency",
      "ETH",
      "USD",
      "BTC",
      "USDT"
    ]
  },
  "crypto.onchain.balance": {
    "title": "balance",
    "description": "Metadata for the page discussing about the 'balance' function to display\n  information about tokens on given Ethereum blockchain balance. The page outlines\n  how to use this function, its parameters, and their possible values.",
    "keywords": [
      "ethplorer",
      "ethereum",
      "balance",
      "tokens",
      "python script",
      "blockchain balance",
      "sortby function",
      "ascending order",
      "descending order"
    ]
  },
  "crypto.onchain.btccp": {
    "title": "btccp",
    "description": "btccp displays the Bitcoin (BTC) circulating supply with ranging parameters.\n  It uses data sourced from blockchain's API while offering a customizable date range.",
    "keywords": [
      "Bitcoin",
      "BTC",
      "circulating supply",
      "blockchain API",
      "cryptocurrency",
      "data visualization",
      "btccp",
      "data extraction",
      "date parameters"
    ]
  },
  "crypto.onchain.btcct": {
    "title": "btcct",
    "description": "The btcct page provides details on how to monitor Bitcoin confirmed transactions\n  using the Blockchain API with adjustable date parameters.",
    "keywords": [
      "btcct",
      "Bitcoin transactions",
      "Blockchain API",
      "Confirmed transactions",
      "BTC",
      "Cryptocurrency",
      "Crypto transactions monitoring"
    ]
  },
  "crypto.onchain.ds": {
    "title": "ds",
    "description": "DS provides daily transactions of certain symbols in Ethereum blockchain,\n  it supports platforms such as uniswap-v3, uniswap-v2, sushiswap, and curve. It primarily\n  helps in checking fees and the number of users over time.",
    "keywords": [
      "ds",
      "daily transactions",
      "ethereum blockchain",
      "platforms",
      "uniswap-v3",
      "uniswap-v2",
      "sushiswap",
      "curve",
      "fees",
      "number of users over time"
    ]
  },
  "crypto.onchain.dt": {
    "title": "dt",
    "description": "This page provides info on how to get daily transactions for certain\n  symbols in ethereum blockchain using the 'dt' command.",
    "keywords": [
      "dt",
      "transactions",
      "symbols",
      "ethereum",
      "blockchain",
      "flipsidecrypto",
      "crypto"
    ]
  },
  "crypto.onchain.dvcp": {
    "title": "dvcp",
    "description": "dvcp helps you to analyze the daily trading volume for any given cryptocurrency\n  pair. It includes features for sorting and displaying the data based on different\n  parameters including coin type, quote currency, and range of days.",
    "keywords": [
      "crypto",
      "dvcp",
      "crypto pair volume",
      "ERC20 token",
      "Sort data",
      "Bitcoin",
      "Ethereum",
      "USDT",
      "crypto trading",
      "trade volume"
    ]
  },
  "crypto.onchain.gwei": {
    "title": "gwei",
    "description": "This page provides in-depth information on gwei, ETH gas fees, and their\n  usage with the onchain command. It's a valuable resource for those involved in the\n  crypto transaction process on the Ethereum platform.",
    "keywords": [
      "gwei",
      "ETH gas fees",
      "onchain",
      "ethereum",
      "ethgasstation.info",
      "crypto transaction"
    ]
  },
  "crypto.onchain.hist": {
    "title": "hist",
    "description": "Learn how to us the 'hist' function to display history for any given\n  Ethereum Blockchain balance using Ethplorer. Understand the usage, parameters and\n  their defaults, for an optimized user experience.",
    "keywords": [
      "crypto",
      "ethereum",
      "hist",
      "blockchain",
      "ethereum blockchain",
      "transaction history",
      "ethplorer"
    ]
  },
  "crypto.onchain.holders": {
    "title": "holders",
    "description": "Detailed guide on how to display top ERC20 token holders using python,\n  with the option of sorting the data in various ways.",
    "keywords": [
      "ERC20 token holders",
      "Ethplorer",
      "parameters",
      "sortby",
      "limit",
      "reverse",
      "data sorting"
    ]
  },
  "crypto.onchain.hr": {
    "title": "hr",
    "description": "Documentation on the 'hr' function to view the mean hashrate of BTC or\n  ETH over a specific frequency interval. Contains information on command usage and\n  the parameters involved.",
    "keywords": [
      "blockchain",
      "hashrate",
      "BTC",
      "ETH",
      "coin",
      "cryptocurrency",
      "frequency interval",
      "Glassnode"
    ]
  },
  "crypto.onchain.info": {
    "title": "info",
    "description": "This page provides information about ERC20 tokens using Ethplorer as\n  a source. Learn how to use our tool to display info about ERC20 tokens, including\n  how to show social media links.",
    "keywords": [
      "ERC20 token",
      "Ethplorer",
      "Token info",
      "Social media links",
      "Python usage"
    ]
  },
  "crypto.onchain.lt": {
    "title": "lt",
    "description": "Description and usage guide for the lt command, that displays trades\n  on decentralized exchanges including the ability to aggregate trades by DEX or time,\n  display trade amount in different currencies, and sort data. The command uses Python\n  language.",
    "keywords": [
      "Display Trades",
      "Decentralized Exchanges",
      "Aggregated",
      "DEX",
      "Trade Amount",
      "Currency",
      "USD",
      "ETH",
      "BTC",
      "USDT"
    ]
  },
  "crypto.onchain.prices": {
    "title": "prices",
    "description": "This page provides information about displaying historical token prices.\n  It includes parameters to sort data by date, cap, volumeConverted, open, high, close,\n  and low values. The source of data is Ethplorer.",
    "keywords": [
      "token prices",
      "historical prices",
      "Ethplorer",
      "date",
      "cap",
      "volumeConverted",
      "open",
      "high",
      "close",
      "low",
      "data sort",
      "ascending order",
      "descending order"
    ]
  },
  "crypto.onchain.th": {
    "title": "th",
    "description": "This page provides comprehensive documentation for the 'th' function\n  which displays information about token history. It explains the usage of the function,\n  along with descriptions of parameters like limit, sortby, reverse and hash. Useful\n  for anyone needing to navigate token history using Ethplorer.",
    "keywords": [
      "token history",
      "Ethplorer",
      "command parameters",
      "sortby",
      "reverse",
      "hash",
      "transaction hash"
    ]
  },
  "crypto.onchain.top": {
    "title": "top",
    "description": "This documentation page provides information on how to display the top\n  ERC20 tokens. It explains command usage, command parameters and provides examples.",
    "keywords": [
      "ERC20 tokens",
      "Ethplorer",
      "Command usage",
      "Command parameters",
      "Crypto",
      "Token price",
      "Token holders",
      "Token transfers",
      "Token transactions"
    ]
  },
  "crypto.onchain.ttcp": {
    "title": "ttcp",
    "description": "This documentation page provides details on the usage of the ttcp tool\n  used for displaying the most traded crypto pairs on a chosen decentralized exchange\n  over a selected time period. It includes the description and options for each parameter.",
    "keywords": [
      "ttcp",
      "traded crypto pairs",
      "decentralized exchange",
      "crypto trading",
      "trading",
      "blockchain",
      "1inch",
      "Uniswap",
      "trade parameters",
      "tradeAmount"
    ]
  },
  "crypto.onchain.tv": {
    "title": "tv",
    "description": "This section of the page is a guide on using the function to display\n  token volume on different Decentralized Exchanges. It includes parameters such as\n  the currency of the displayed trade amount and options to sort data.",
    "keywords": [
      "decentralized exchanges",
      "token volume",
      "ERC20 token",
      "trade amount",
      "sort by column",
      "data sorting"
    ]
  },
  "crypto.onchain.tvl": {
    "title": "tvl",
    "description": "This page discusses the Total Value Locked (TVL) metric, a key concept\n  in cryptocurrency. Learn how to utilize this metric through different parameters\n  and understand its significance in evaluating Ethereum ERC20 contract balances.",
    "keywords": [
      "Total Value Locked",
      "TVL",
      "Cryptocurrency",
      "Ethereum ERC20",
      "Contract balance",
      "User address",
      "Address name",
      "Contract symbol",
      "Interval"
    ]
  },
  "crypto.onchain.tx": {
    "title": "tx",
    "description": "The page provides a detailed guide on displaying information about ERC20\n  token transactions on the Ethereum blockchain using tx command.",
    "keywords": [
      "ERC20 token",
      "Ethereum blockchain",
      "tx command",
      "Ethplorer",
      "blockchain transactions",
      "cryptocurrency",
      "blockchain technology",
      "command usage",
      "token transaction"
    ]
  },
  "crypto.onchain.ueat": {
    "title": "ueat",
    "description": "The ueat page provides a means to display the number of unique ethereum\n  addresses which made a transaction in a given time interval. It provides options\n  to limit or sort data and to set time intervals. Statistics such as average, medium,\n  and maximum gas prices are available and data can be displayed in reverse or sorted\n  order.",
    "keywords": [
      "ueat",
      "ethereum",
      "transaction",
      "time interval",
      "unique addresses",
      "bitquery",
      "sort",
      "average gas price",
      "medium gas price",
      "maximum gas price",
      "raw data",
      "reverse flag"
    ]
  },
  "crypto.onchain.whales": {
    "title": "whales",
    "description": "A page that provides information on the use of the 'whales' feature to\n  display significant cryptocurrency transactions. It explains parameters for customization\n  like minimum value, record limit, sort order, etc.",
    "keywords": [
      "Crypto whales transactions",
      "Cryptocurrency",
      "Docusaurus",
      "Crypto transaction tracking",
      "Crypto address details",
      "Sort crypto transactions",
      "Crypto trade parameters",
      "Display major crypto transactions",
      "Sort by date, amount, blockchain",
      "Limit number of crypto records"
    ]
  },
  "crypto.ov.altindex": {
    "title": "altindex",
    "description": "The altindex documentation page provides information on how to display\n  altcoin index over time, compare altcoins performance to Bitcoin, and interpret\n  if it's an Altcoin Season.",
    "keywords": [
      "altindex",
      "altcoin index",
      "Bitcoin",
      "Altcoin Season",
      "stablecoins",
      "asset backed tokens",
      "cryptocurrency",
      "blockchain",
      "crypto tools",
      "crypto comparison"
    ]
  },
  "crypto.ov.btcrb": {
    "title": "btcrb",
    "description": "btcrb is a Python-based tool offering visualization of Bitcoin Rainbow\n  chart over time which includes halvings. Its primary data source is Glassnode and\n  it's inspired by Blockchaincenter.net.",
    "keywords": [
      "btcrb",
      "bitcoin",
      "rainbow chart",
      "glassnode",
      "blockchaincenter.net",
      "BTC",
      "cryptocurrency",
      "halvings",
      "price data"
    ]
  },
  "crypto.ov.categories": {
    "title": "categories",
    "description": "Docusaurus page that provides details on top cryptocurrency categories\n  by market capitalization. It includes categories such as stablecoins, defi, solana\n  ecosystem, and polkadot ecosystem, among others. This page also provides ways to\n  sort and display data.",
    "keywords": [
      "cryptocurrency categories",
      "market capitalization",
      "stablecoins",
      "defi",
      "solana ecosystem",
      "polkadot ecosystem",
      "sort parameter",
      "pie chart",
      "smart contract platform",
      "binance smart chain",
      "polygon ecosystem",
      "avalanche ecosystem",
      "moonriver ecosystem",
      "fantom ecosystem",
      "stablecoins",
      "arbitrum ecosystem",
      "near protocol ecosystem",
      "exchange-based tokens",
      "decentralized finance",
      "centralized exchange token",
      "gnosis chain ecosystem",
      "cosmos ecosystem",
      "market cap change 24h",
      "top 3 coins",
      "volume 24h"
    ]
  },
  "crypto.ov.ch": {
    "title": "ch",
    "description": "This documentation outlines the usage of the 'ch' command to display\n  a list of major crypto-related hacks. It details the different parameters available\n  to sort and display the data. Included are specific examples, and the expected output.",
    "keywords": [
      "crypto-related hacks",
      "crypto hack",
      "hack display",
      "sort by parameters",
      "crypto platform",
      "hack amount",
      "hack date",
      "hack audit",
      "hack slug",
      "hack URL",
      "reverse display order",
      "individual crypto hack"
    ]
  },
  "crypto.ov.contracts": {
    "title": "contracts",
    "description": "This page details how to effectively fetch all contract addresses for\n  a specific blockchain platform with customizable parameters for limitations and\n  sorting. Various platforms such as Ethereum and Bitcoin are discussed, along with\n  illustration on detailed sets of commands.",
    "keywords": [
      "contracts",
      "blockchain platform",
      "smart contracts",
      "ethereum",
      "bitcoin",
      "parameters",
      "sort data",
      "display",
      "crypto"
    ]
  },
  "crypto.ov.cr": {
    "title": "cr",
    "description": "A content focused on the 'cr' command line tool usage and its parameters,\n  which provides crypto interest rates from numerous platforms, for various cryptocurrencies.\n  Core parameters include selection of interest rate type, specific cryptocurrencies,\n  and platforms.",
    "keywords": [
      "cryptocurrency",
      "crypto interest rates",
      "cryptocurrency platforms",
      "borrow interest rate",
      "supply interest rate",
      "crypto supply and borrow rates",
      "cr command line",
      "cryptocurrency parameters"
    ]
  },
  "crypto.ov.defi": {
    "title": "defi",
    "description": "The 'defi' page provides global decentralized finance (DeFi) statistics\n  such as market cap, trading volume, DeFi dominance, and top coins. It plainly outlines\n  how to use the function, its lack of parameters and showcases an example of the\n  function being used.",
    "keywords": [
      "DeFi",
      "Decentralized Finance",
      "distributed networks",
      "financial services",
      "Market Cap",
      "Trading Volume",
      "Defi Dominance",
      "Top Coins"
    ]
  },
  "crypto.ov.derivatives": {
    "title": "derivatives",
    "description": "This page provides a comprehensive list and details on crypto derivatives.\n  Understand and sort crypto financial tools such as futures, options, and perpetual\n  contracts based on different parameters including Rank, Market, Symbol, Price, and\n  more.",
    "keywords": [
      "crypto derivatives",
      "cryptocurrency",
      "Bitcoin",
      "crypto futures",
      "crypto options",
      "perpetual contracts",
      "sort by Rank",
      "sort by Market",
      "sort by Symbol",
      "sort by Price",
      "sort by Pct_Change_24h",
      "sort by Contract_Type",
      "sort by Basis",
      "sort by Spread",
      "sort by Funding_Rate",
      "sort by Volume_24h"
    ]
  },
  "crypto.ov.ewf": {
    "title": "ewf",
    "description": "Detailed documentation on the usage of 'ewf', a command that displays\n  exchange withdrawal fees for various cryptocurrencies. The list includes a wide\n  range of exchanges from Binance to OKEx, providing an important resource for those\n  dealing with crypto trading.",
    "keywords": [
      "ewf",
      "exchange withdrawal fees",
      "cryptocurrency",
      "crypto trading",
      "crypto exchanges",
      "withdrawal fees",
      "FixedFloat",
      "CREX24",
      "GetBTC",
      "Deribit",
      "CoinFalcon",
      "Bitfinex",
      "Bleutrade",
      "Kraken",
      "Coindeal",
      "OKCoin",
      "CoinTiger",
      "Kucoin",
      "AscendEX",
      "Coincheck",
      "Coinone",
      "CoinEx",
      "Bitrue",
      "Crypto.com Exchange",
      "DSX",
      "Poloniex",
      "Binance",
      "Bitkub",
      "BitMart",
      "TOKOK",
      "Flyp.me",
      "HitBTC",
      "Liquid",
      "Gate.io",
      "Bittrex",
      "BitForex",
      "BTSE",
      "Tidex",
      "Huobi Global",
      "BW",
      "SouthXchange",
      "WhiteBit",
      "OKEx",
      "Coinsbit"
    ]
  },
  "crypto.ov.exchanges": {
    "title": "exchanges",
    "description": "A documentation page that details the usage of currency exchange parameters\n  in crypto trading. Provides details on how to sort and limit data based on various\n  criteria, specifically for CoinPaprika and CoinGecko exchanges.",
    "keywords": [
      "crypto exchanges",
      "display limit",
      "sort data",
      "Trust_Score",
      "Id",
      "Name",
      "Country",
      "Year_Established",
      "Trade_Volume_24h_BTC",
      "CoinPaprika",
      "CoinGecko"
    ]
  },
  "crypto.ov.exmarkets": {
    "title": "exmarkets",
    "description": "The page explains the usage of exmarkets command that generates a table\n  with exchange markets data with various parameters. It provides information on how\n  to limit, sort, and view this data in a user-friendly format.",
    "keywords": [
      "exmarkets",
      "exchange markets",
      "cryptocurrency",
      "sort data",
      "limit data",
      "command usage",
      "parameter usage",
      "exchange_id",
      "trust score",
      "base_currency_name",
      "quote_currency_name",
      "market_url",
      "reported_volume_24h_share",
      "category"
    ]
  },
  "crypto.ov.exrates": {
    "title": "exrates",
    "description": "The 'exrates' page allows users to view crypto, fiats, and commodity\n  exchange rates from CoinGecko in Python. The page also explains how to limit, sort,\n  or reverse data. Methods show examples and list of parameters as well.",
    "keywords": [
      "exrates",
      "crypto exchange rates",
      "CoinGecko",
      "sort",
      "limit",
      "reverse",
      "parameters",
      "fiats",
      "commodity"
    ]
  },
  "crypto.ov.fun": {
    "title": "fun",
    "description": "This page provides a comprehensive guide on how to use the python script\n  'fun' to display various fundamental metrics from the Token Terminal. The metrics\n  include market cap, timeline, category, etc. It also comes with specific command-line\n  examples and parameter descriptions for better understanding.",
    "keywords": [
      "fundamental metrics",
      "Token Terminal",
      "usage",
      "parameters",
      "python script",
      "examples",
      "market_cap",
      "Blockchain",
      "category",
      "metric",
      "timeline",
      "reverse",
      "limit"
    ]
  },
  "crypto.ov.global": {
    "title": "global",
    "description": "An overview of global statistics on the Crypto Market, providing essential\n  information such as active cryptocurrencies, ICOs data, and market cap changes.\n  Features a pie chart option for visualizing market cap distribution. Powered by\n  CoinGecko.",
    "keywords": [
      "Global Cryptocurrency",
      "Crypto Market Statistics",
      "Cryptocurrency Analysis",
      "ICOs Data",
      "Pie Chart Market Cap",
      "CoinGecko"
    ]
  },
  "crypto.ov.hm": {
    "title": "hm",
    "description": "This page provides a guide to use 'hm' tool in displaying cryptocurrencies\n  heatmap with a daily percentage change. Utilize parameter options like 'limit' and\n  'category' to customize the display.",
    "keywords": [
      "cryptocurrency",
      "heatmap",
      "daily percentage change",
      "parameters",
      "limit",
      "category",
      "crypto categories",
      "display options",
      "cryptocurrency tool",
      "'''hm'' tool'"
    ]
  },
  "crypto.ov.hold": {
    "title": "hold",
    "description": "An overview of public companies holding Bitcoin or Ethereum, presenting\n  key metrics like total holdings and value.",
    "keywords": [
      "Bitcoin",
      "Ethereum",
      "public companies",
      "crypto holdings",
      "cryptocurrency",
      "digital assets",
      "bar chart",
      "Bitcoin dominance",
      "crypto metrics"
    ]
  },
  "crypto.ov.indexes": {
    "title": "indexes",
    "description": "Our 'indexes' page offers data on crypto indexes coming from CoinGecko.\n  It allows users to see details of each crypto index and offers several parameters\n  for sorting and limiting the data displayed. Utilize cryptocurrency market data\n  to make informed decisions regarding your crypto investments.",
    "keywords": [
      "cryptocurrency",
      "CoinGecko",
      "crypto index",
      "market cap",
      "cryptocurrency market data",
      "crypto investment",
      "data sorting parameters",
      "limit parameter"
    ]
  },
  "crypto.ov.info": {
    "title": "info",
    "description": "This page documents the usage of the CoinPaprika API, showing basic coin\n  information, stating its parameters, and demonstrating how to sort and display information.\n  It is a comprehensive guide for those seeking knowledge about crypto and financial\n  data.",
    "keywords": [
      "docusaurus",
      "metadata",
      "coin information",
      "CoinPaprika API",
      "sort data",
      "rank",
      "name",
      "symbol",
      "price",
      "volume_24h",
      "circulating_supply",
      "total_supply",
      "max_supply",
      "market_cap",
      "beta_value",
      "ath_price",
      "parameters",
      "quoted currency",
      "crypto",
      "financial data"
    ]
  },
  "crypto.ov.markets": {
    "title": "markets",
    "description": "Explore market-related coin information such as price, supply, and volume\n  for all digital currencies on CoinPaprika. Customize the number of coins to be displayed\n  and sort data by various parameters such as rank, price, and volume. Ideal for cryptocurrency\n  analysis and comparison.",
    "keywords": [
      "market data",
      "coin data",
      "coin information",
      "coin statistics",
      "php market",
      "cryptocurrency",
      "cryptocurrency market",
      "price data",
      "supply data",
      "volume data",
      "crypto analysis",
      "market comparison",
      "crypto ranking",
      "coin ranking",
      "crypto price"
    ]
  },
  "crypto.ov.news": {
    "title": "news",
    "description": "This page provides usage details for a news aggregation code from CryptoPanic,\n  involving handy functions such as data filtering, sorting, region based displaying\n  and more. Learn how to get the crypto news you need quickly and efficiently.",
    "keywords": [
      "cryptopanic",
      "crypto news",
      "news aggregation",
      "data filtering",
      "region based",
      "sorted data",
      "bullish news",
      "bearish news",
      "crypto media",
      "cryptocurrency"
    ]
  },
  "crypto.ov.pairs": {
    "title": "pairs",
    "description": "The page gives a detailed overview on how to use the 'pairs' function\n  for showing available trading pairs on Coinbase. It includes usage code, parameters\n  description, and some examples.",
    "keywords": [
      "pairs function",
      "Coinbase",
      "trading pairs",
      "function usage",
      "parameters description",
      "crypto trading",
      "base_currency",
      "quote_currency"
    ]
  },
  "crypto.ov.platforms": {
    "title": "platforms",
    "description": "This page lists out the platforms for smart contract including Ethereum,\n  Solana, Cosmos, Polkadot, Kusama. It helps users understand the command-line interfaces\n  to engage with these diverse smart contract platforms.",
    "keywords": [
      "smart contract platforms",
      "ethereum",
      "solana",
      "cosmos",
      "polkadot",
      "kusama",
      "crypto platforms",
      "blockchain technology",
      "docusaurus SEO",
      "keywords generation",
      "content-related keywords",
      "blockchain platforms",
      "cryptocurrency SEO"
    ]
  },
  "crypto.ov.stables": {
    "title": "stables",
    "description": "This page offers detailed information about stablecoins ranked by market\n  capitalization. It explains the usage and parameters of the 'stables' command to\n  sort and display relevant data about different stablecoins.",
    "keywords": [
      "Stablecoins",
      "Market Capitalization",
      "Cryptocurrency",
      "US Dollar",
      "Gold",
      "Parameters",
      "Data Display",
      "Sorting Data"
    ]
  },
  "crypto.ov.wf": {
    "title": "wf",
    "description": "The documentation page contains information regarding the withdrawal\n  fees for top coins in cryptocurrency. It provides a detailed insight into the average,\n  median and highest withdrawal fees for coins such as Bitcoin, Ethereum and Tether\n  among others. The tool also allows to limit the number of coins while displaying\n  the withdrawal fees.",
    "keywords": [
      "withdrawal fees",
      "top coins",
      "cryptocurrency",
      "Bitcoin",
      "Ethereum",
      "Tether",
      "Binance Coin",
      "USD Coin",
      "XRP",
      "Cardano",
      "Solana",
      "Terra",
      "Avalanche"
    ]
  },
  "crypto.ov.wfpe": {
    "title": "wfpe",
    "description": "This wfpe documentation page covers the usage of wfpe command to check\n  cryptocurrency withdrawal fees per exchange. It includes example outputs and parameters.",
    "keywords": [
      "wfpe",
      "cryptocurrency withdrawal fee",
      "coin withdrawal",
      "crypto withdrawal",
      "exchange withdrawal fee",
      "Bitcoin withdrawal",
      "Ethereum withdrawal",
      "crypto trading",
      "crypto exchange guides",
      "crypto commands"
    ]
  },
  "crypto.qa.acf": {
    "title": "acf",
    "description": "The page provides explanation and usage for acf- the Auto-Correlation\n  and Partial Auto-Correlation Functions for diff and diff diff crypto data. It includes\n  parameters details and illustrative plot.",
    "keywords": [
      "acf",
      "Auto-Correlation",
      "Partial Auto-Correlation",
      "diff",
      "diff diff",
      "crypto data",
      "lags",
      "plots"
    ]
  },
  "crypto.qa.bw": {
    "title": "bw",
    "description": "This page details the usage of the Box and Whisker (bw) plot with its\n  parameters. It also includes a guide on how to display a yearly bw plot.",
    "keywords": [
      "Box and Whisker plot",
      "bw plot",
      "parameters",
      "yearly bw plot",
      "data visualization",
      "optional choices",
      "plot description"
    ]
  },
  "crypto.qa.cdf": {
    "title": "cdf",
    "description": "This page provides detailed information about the 'cdf' function, a cumulative\n  distribution function. It includes usage, parameters, and examples.",
    "keywords": [
      "cdf",
      "cumulative distribution function",
      "usage",
      "parameters",
      "examples",
      "export",
      "csv",
      "json",
      "xlsx",
      "dataframe"
    ]
  },
  "crypto.qa.cusum": {
    "title": "cusum",
    "description": "Learn about the Cumulative Sum Algorithm (CUSUM) used to detect abrupt\n  changes in data. Understand its usage, parameters, and visualize how it works.",
    "keywords": [
      "cusum",
      "cumulative sum algorithm",
      "data change detection",
      "usage of cusum",
      "parameters of cusum",
      "threshold",
      "drift"
    ]
  },
  "crypto.qa.decompose": {
    "title": "decompose",
    "description": "Learn how to decompose time series using Additive and Multiplicative\n  models on a marketing website. Includes usage instructions and parameters.",
    "keywords": [
      "Decompose time series",
      "Additive Time Series",
      "Multiplicative Time Series",
      "Level",
      "CyclicTrend",
      "Residual",
      "Seasonality",
      "Parameters",
      "Usage",
      "Marketing",
      "Stocks"
    ]
  },
  "crypto.qa.hist": {
    "title": "hist",
    "description": "The page provides usage instructions for 'hist' command in Python that\n  creates histograms with density and rug. It also includes details about parameters\n  and the default value.",
    "keywords": [
      "hist",
      "histogram",
      "density",
      "rug",
      "parameters",
      "n_bins",
      "Usage",
      "coding"
    ]
  },
  "crypto.qa.kurtosis": {
    "title": "kurtosis",
    "description": "This is a documentation page about Kurtosis, a measure of the 'tailedness'\n  of a probability distribution of a real-valued random variable.",
    "keywords": [
      "Kurtosis",
      "Probability Distribution",
      "Real-valued random variable",
      "Skewness",
      "Theoretical Distribution",
      "Sample",
      "Population",
      "n_window"
    ]
  },
  "crypto.qa.line": {
    "title": "line",
    "description": "This page is a comprehensive guide on how to create line plots of selected\n  data, and how to highlight specific datetimes. It provides information about different\n  parameters like log scale plotting, vertical line markers, and scatter markers.",
    "keywords": [
      "line plot",
      "data visualization",
      "datetime highlighting",
      "log scale plotting",
      "vertical line markers",
      "scatter markers"
    ]
  },
  "crypto.qa.load": {
    "title": "load",
    "description": "Learn how to load and analyze crypto currency data using our command-line\n  utility. This page provides full usage details, including parameters, exchange choice,\n  interval selection and more. The tool supports Yahoo finance, ccxt among other data\n  sources.",
    "keywords": [
      "crypto currency analysis",
      "Yahoo Finance",
      "ccxt",
      "crypto exchange",
      "coin data",
      "crypto intervals",
      "command line utility",
      "binance",
      "bitbank",
      "coinbasepro",
      "cryptocom",
      "kucoin",
      "retrieving crypto data"
    ]
  },
  "crypto.qa.normality": {
    "title": "normality",
    "description": "The page provides comprehensive instructions on how to use the 'normality'\n  function in stock market data analysis. It offers examples of how the function can\n  be used to calculate different statistics, including Kurtosis, Skewness, Jarque-Bera,\n  Shapiro-Wilk, and Kolmogorov-Smirnov, thereby assisting in deciding whether the\n  data has a Gaussian distribution.",
    "keywords": [
      "normality tests",
      "stock market",
      "statistics",
      "Kurtosis",
      "Skewness",
      "Jarque-Bera",
      "Shapiro-Wilk",
      "Kolmogorov-Smirnov",
      "data analysis"
    ]
  },
  "crypto.qa.pick": {
    "title": "pick",
    "description": "The page provides detailed information about the 'pick' command which\n  is used to change target variables for stock market analysis, using Python. It lists\n  the usage, parameters, and examples for easier understanding.",
    "keywords": [
      "pick",
      "target variable",
      "parameters",
      "stock analysis",
      "stock market",
      "examples",
      "usage",
      "Open",
      "High",
      "Low",
      "Close",
      "Adj Close",
      "Volume",
      "date_id",
      "OC_High",
      "OC_Low",
      "Returns",
      "LogRet",
      "TSLA"
    ]
  },
  "crypto.qa.qqplot": {
    "title": "qqplot",
    "description": "A docusaurus page dedicated to explaining how to utilize the 'qqplot'\n  Python function to display data in a QQ plot versus normal quantiles. Provides a\n  succinct guide on usage and parameters available.",
    "keywords": [
      "qqplot",
      "normal quantiles",
      "data visualization"
    ]
  },
  "crypto.qa.quantile": {
    "title": "quantile",
    "description": "Understand how to use the 'quantile' function, a key statistical tool\n  used to divide distributions. Learn about parameters including 'n_window' for window\n  length and 'f_quantile' for specifying quantile values.",
    "keywords": [
      "quantile function",
      "distribution",
      "statistics",
      "median",
      "n_window",
      "f_quantile",
      "parameters",
      "data analysis"
    ]
  },
  "crypto.qa.raw": {
    "title": "raw",
    "description": "This Docusaurus page provides instructions on how to print raw data to\n  the console using Python. It includes details on parameters such as limit, reverse,\n  and sortby. Examples of usage and output are provided.",
    "keywords": [
      "Raw data",
      "sort",
      "Limit",
      "reverse",
      "sortby",
      "ascending",
      "descending",
      "stocks",
      "display"
    ]
  },
  "crypto.qa.rolling": {
    "title": "rolling",
    "description": "Learn the usage, parameters and practical details of the rolling function,\n  a vital Python tool for calculating the rolling mean and standard deviation.",
    "keywords": [
      "Rolling function",
      "Mean calculation",
      "Standard deviation",
      "Programming tools",
      "Window length parameter",
      "Usage example",
      "Data visualization"
    ]
  },
  "crypto.qa.skew": {
    "title": "skew",
    "description": "The 'skew' documentation page explains how this concept can be utilized\n  to measure asymmetry or distortion of a symmetric distribution, also describing\n  usage and parameters in Python. It provides insights into how skewness measures\n  deviation from a normal distribution, depicting either a right or left shift. Comprehensive\n  visual aids are also given for clarification of the skewness concept.",
    "keywords": [
      "skew",
      "asymmetry measurement",
      "distortion",
      "symmetric distribution",
      "normal distribution",
      "skewness",
      "random variable distribution",
      "distribution deviation",
      "right-skewed",
      "left-skew"
    ]
  },
  "crypto.qa.spread": {
    "title": "spread",
    "description": "This page illustrates the rolling spread measurement, its usage, and\n  the parameters involved in it. It comprehensively explains how to use 'spread' and\n  the function of 'n_window' in it.",
    "keywords": [
      "spread measurement",
      "usage of spread",
      "spread parameters",
      "n_window in spread",
      "rolling spread"
    ]
  },
  "crypto.qa.summary": {
    "title": "summary",
    "description": "This page provides a guide on how to use the 'summary' command for getting\n  summary statistics in Python. The command requires no parameters and provides a\n  detailed statistical insights on data points such as open, high, low, close, volume\n  and more.",
    "keywords": [
      "Summary Statistics",
      "Command",
      "No parameters",
      "Stocks",
      "Open",
      "High",
      "Low",
      "Close",
      "Volume"
    ]
  },
  "crypto.qa.unitroot": {
    "title": "unitroot",
    "description": "This page provides comprehensive instructions and usage examples for\n  the unitroot tool. Unitroot, used for unit root test and stationarity, offers multiple\n  regression methods including c, ct, ctt, and nc.",
    "keywords": [
      "unitroot",
      "unit root test",
      "stationarity",
      "ADF",
      "KPSS",
      "regression",
      "programming"
    ]
  },
  "crypto.ta.ad": {
    "title": "ad",
    "description": "This documentation explains how to use the Accumulation/Distribution\n  Line, an indicator similar to the On Balance Volume to project trends in the price\n  direction of a stock, and how to use specific parameters with the ad function to\n  get the open value of a stock.",
    "keywords": [
      "Accumulation/Distribution Line",
      "On Balance Volume",
      "Marketing",
      "Stock Value",
      "Close Location Value",
      "Price Trend",
      "Price Flattening"
    ]
  },
  "crypto.ta.adosc": {
    "title": "adosc",
    "description": "This page explains the Accumulation/Distribution Oscillator (adosc),\n  a momentum indicator in trading examining both the strength of price moves and underlying\n  buying/selling pressure. It details usage, parameters, and potential market implications.",
    "keywords": [
      "Accumulation/Distribution Oscillator",
      "adosc",
      "momentum indicator",
      "price moves",
      "buying pressure",
      "selling pressure",
      "market turning points",
      "trading",
      "stock market"
    ]
  },
  "crypto.ta.adx": {
    "title": "adx",
    "description": "This page provides detailed instructions on using the ADX, a Welles Wilder\n  style moving average of the Directional Movement Index. It includes usage examples\n  and parameter specifications.",
    "keywords": [
      "ADX",
      "Welles Wilder",
      "Directional Movement Index",
      "DX",
      "trend strength",
      "parameters",
      "n_length",
      "n_scalar",
      "n_drift"
    ]
  },
  "crypto.ta.aroon": {
    "title": "aroon",
    "description": "The page introduces the aroon indicator which signifies the emergence\n  of new trends. It explains how the indicator works, including its Up and Down indicators,\n  its relationship with the highest high and lowest low within a certain period, and\n  its role in identifying strong or weak trends.",
    "keywords": [
      "aroon",
      "trend indicator",
      "aroon Up",
      "aroon Down",
      "upward trend",
      "downward trend",
      "n period range",
      "dawn's early light",
      "crossovers",
      "weak trend",
      "strong trend"
    ]
  },
  "crypto.ta.bbands": {
    "title": "bbands",
    "description": "This page provides detailed information about the Bollinger Bands (bbands),\n  a volatility indicator in technical analysis, including usage, parameters, visual\n  representation, data interpretation, and their importance in buy or sell signals\n  generation.",
    "keywords": [
      "Bollinger Bands",
      "bbands",
      "technical analysis",
      "volatility indicators",
      "overbought conditions",
      "oversold conditions",
      "price targets",
      "price reversal",
      "support level",
      "resistance level"
    ]
  },
  "crypto.ta.cci": {
    "title": "cci",
    "description": "This page provides an in-depth analysis of the CCI - a tool designed\n  to spot initiating and concluding market trends. It clearly explains how to utilize\n  this tool, covering everything from normal trading range to identifying oversold\n  conditions and anticipating price correction.",
    "keywords": [
      "CCI",
      "market trends",
      "overbought",
      "oversold",
      "price divergence",
      "price correction",
      "n_length",
      "n_scalar"
    ]
  },
  "crypto.ta.cg": {
    "title": "cg",
    "description": "This page explains the use of the Center of Gravity (COG) indicator to\n  anticipate future price movements and trade on price reversals. It also includes\n  parameters and usage guide for COG indicator.",
    "keywords": [
      "Center of Gravity indicator",
      "COG indicator",
      "future price movements",
      "trade on price reversals",
      "oscillators",
      "range-bound markets",
      "speculate upcoming price change",
      "CG parameters",
      "CG usage guide",
      "N_LENGTH"
    ]
  },
  "crypto.ta.donchian": {
    "title": "donchian",
    "description": "This page provides information on Donchian Channels, an indicator comprising\n  upper and lower bands around a midrange or median band. It includes details of the\n  parameters for its usage.",
    "keywords": [
      "Donchian Channels",
      "moving average calculations",
      "upper and lower bands",
      "highest and lowest price",
      "N periods",
      "security",
      "Donchian Channel",
      "N_LENGTH_UPPER",
      "N_LENGTH_LOWER"
    ]
  },
  "crypto.ta.ema": {
    "title": "ema",
    "description": "Page providing details about the Exponential Moving Average (EMA), a\n  crucial tool in technical analysis. Explains the comparison between EMA and Simple\n  Moving Average, along with usage and parameters.",
    "keywords": [
      "Exponential Moving Average",
      "technical analysis",
      "Simple Moving Average",
      "cumulative calculation",
      "responsive to changes",
      "parameters",
      "Window lengths",
      "offset"
    ]
  },
  "crypto.ta.fib": {
    "title": "fib",
    "description": "This page contains details on how to calculate the Fibonacci retracement\n  levels using specified parameters. Learn about proper usage, accepted parameters,\n  and view a visual representation.",
    "keywords": [
      "Fibonacci retracement levels",
      "fib function",
      "parameters",
      "Fibonacci trading",
      "trading strategies",
      "stock analysis",
      "trading charts"
    ]
  },
  "crypto.ta.fisher": {
    "title": "fisher",
    "description": "This page provides information about the Fisher Transform, a technical\n  indicator that converts prices into a Gaussian normal distribution. The tool helps\n  with identifying potential turning points in the price of an asset, and enables\n  users to visualize trends and price waves.",
    "keywords": [
      "Fisher Transform",
      "technical indicator",
      "John F. Ehlers",
      "Gaussian normal distribution",
      "price turning points",
      "price trends",
      "price waves"
    ]
  },
  "crypto.ta.hma": {
    "title": "hma",
    "description": "The page covers the Hull Moving Average (HMA) - a moving average that\n  is more responsive to current price activity while maintaining smoothness. It explains\n  the usage, parameters (such as n_length and n_offset) and gives a visual representation.",
    "keywords": [
      "Hull Moving Average",
      "HMA",
      "Moving Average",
      "price activity",
      "curve smoothness",
      "n_length",
      "n_offset",
      "algorithm parameters"
    ]
  },
  "crypto.ta.kc": {
    "title": "kc",
    "description": "The documentation provides insights on Keltner Channels (kc), a volatility-based\n  band indicating a trend direction. The page explains its usage in Python, various\n  parameters like N_LENGTH, N_SCALAR, mamode types (ema, sma, wma, hma, zlma) and\n  the N_OFFSET.",
    "keywords": [
      "kc",
      "Keltner Channels",
      "volatility-based bands",
      "average true range",
      "ATR",
      "trend direction",
      "N_LENGTH",
      "N_SCALAR",
      "mamode",
      "ema",
      "sma",
      "wma",
      "hma",
      "zlma",
      "N_OFFSET"
    ]
  },
  "crypto.ta.load": {
    "title": "load",
    "description": "Documentation on how to load and analyze crypto currency data using Python.\n  The page explains how to use different data sources such as Yahoo Finance, ccxt,\n  or cg, select exchanges and intervals, and query data by cryptocurrency symbols,\n  start and end dates.",
    "keywords": [
      "crypto currency analysis",
      "yahoo finance",
      "ccxt",
      "cg",
      "exchange selection",
      "data interval",
      "load function",
      "cryptocurrency symbol",
      "quote currency"
    ]
  },
  "crypto.ta.macd": {
    "title": "macd",
    "description": "Explore the MACD page to understand the use and parameters of the Moving\n  Average Convergence Divergence (MACD). Learn about the significance of high and\n  low MACD values, buy and sell signals, and more.",
    "keywords": [
      "MACD",
      "Moving Average Convergence Divergence",
      "Exponential Moving Averages",
      "Signal line",
      "Trend changes",
      "Overbought conditions",
      "Oversold conditions",
      "Buy signal",
      "Sell signal"
    ]
  },
  "crypto.ta.obv": {
    "title": "obv",
    "description": "Learn about the On Balance Volume (OBV), a trading indicator that represents\n  the cumulative total of up and down volumes. Find out how to use, interpret the\n  OBV, understand market trends and use it in your trading analysis.",
    "keywords": [
      "On Balance Volume",
      "OBV",
      "Volume analysis",
      "Trading indicators",
      "Market trends"
    ]
  },
  "crypto.ta.rsi": {
    "title": "rsi",
    "description": "Learn how to interpret and use the Relative Strength Index (RSI), an\n  overbought/oversold indicator that calculates a ratio of recent upward price movements\n  to the absolute price movement and helps indicate potential price reversals.",
    "keywords": [
      "Relative Strength Index",
      "RSI",
      "RSI interpretation",
      "overbought/oversold indicator",
      "RSI divergence",
      "price reversal",
      "RSI parameters",
      "RSI usage"
    ]
  },
  "crypto.ta.sma": {
    "title": "sma",
    "description": "A documentation page elaborating on Simple Moving Averages (sma), their\n  application in data smoothing and trend identification. It outlines usage, parameters\n  and provides visualized data.",
    "keywords": [
      "Moving averages",
      "Data smoothing",
      "Trend identification",
      "Simple Moving Average",
      "Filtering data changes",
      "sma parameters"
    ]
  },
  "crypto.ta.stoch": {
    "title": "stoch",
    "description": "Learn about the Stochastic Oscillator, a measurement tool in trading\n  ranges. Discover the meaning of overbought and oversold conditions and how to interpret\n  the signals from Fast %D and Slow %D. Understand how to use parameters like n_fastkperiod,\n  n_slowdperiod, and n_slowkperiod for moving averages.",
    "keywords": [
      "Stochastic Oscillator",
      "overbought condition",
      "oversold condition",
      "Fast %D",
      "Slow %D",
      "buy signal",
      "sell signal",
      "Raw %K",
      "moving average",
      "n_fastkperiod",
      "n_slowdperiod",
      "n_slowkperiod"
    ]
  },
  "crypto.ta.tv": {
    "title": "tv",
    "description": "Page provides details on 'tv' command for leveraging TradingView for\n  technical analysis. It includes usage and information that the command has no parameters.",
    "keywords": [
      "TradingView",
      "technical analysis",
      "tv command",
      "usage",
      "no parameters"
    ]
  },
  "crypto.ta.vwap": {
    "title": "vwap",
    "description": "The page describes Volume Weighted Average Price (VWAP) used to measure\n  the average typical price by volume with intraday charts. It details its usage,\n  parameters, and provides examples.",
    "keywords": [
      "vwap",
      "Volume Weighted Average Price",
      "intraday charts",
      "average typical price",
      "stock analysis"
    ]
  },
  "crypto.ta.wma": {
    "title": "wma",
    "description": "A comprehensive guide about Weighted Moving Average (WMA), its special\n  features, usage, inclusion of parameters like window lengths and offset. Also, providing\n  an illustrative diagram about WMA.",
    "keywords": [
      "Weighted Moving Average",
      "WMA",
      "n_length",
      "n_offset",
      "WMA parameters",
      "WMA usage",
      "WMA diagram",
      "window lengths",
      "offset"
    ]
  },
  "crypto.ta.zlma": {
    "title": "zlma",
    "description": "The ZLEMA (Zero Lag Exponential Moving Average) is a technical indicator\n  developed by John Ehlers and Ric Way. This documentation page explains how to use\n  it, focusing on implementation with Python and specifying its parameters including\n  window lengths (N_LENGTH) and offset (N_OFFSET).",
    "keywords": [
      "ZLEMA",
      "exponential moving average",
      "de-lagged data",
      "EMA",
      "zero lag exponential moving average",
      "John Ehlers",
      "Ric Way",
      "zlma",
      "N_LENGTH",
      "N_OFFSET",
      "parameters"
    ]
  },
  "crypto.tools.aprtoapy": {
    "title": "aprtoapy",
    "description": "APR to APY conversion tool. Use aprtoapy tool to compute APY value from\n  APR, defining the number of compounding periods per year.",
    "keywords": [
      "aprtoapy",
      "APR",
      "APY",
      "compounding",
      "finance tools"
    ]
  },
  "crypto.tools.il": {
    "title": "il",
    "description": "The Document page provides details on the 'il' tool designed to calculate\n  Impermanent Loss in custom liquidity pools. Including its usage, and parameters\n  such as token price change and pool proportion, the tool allows users to estimate\n  potential impermanent losses.",
    "keywords": [
      "Impermanent Loss",
      "Liquidity Pool",
      "Token Price Change",
      "Pool Proportion",
      "Dollar Value",
      "il Tool"
    ]
  },
  "econometrics.add": {
    "title": "add",
    "description": "This page provides documentation for the 'add' function in an Econometrics\n  software. This function allows you to add a new column to your dataset using various\n  computations on existing columns.",
    "keywords": [
      "Econometrics",
      "Data manipulation",
      "Add function",
      "Computations"
    ]
  },
  "econometrics.bgod": {
    "title": "bgod",
    "description": "This page provides the usage, parameters, and examples of the Breusch-Godfrey\n  autocorrelation test in Python. It's useful for individuals working with OLS Regression\n  Results and other econometrics. The BGOD page increases understanding of this functionality\n  within Python.",
    "keywords": [
      "Breusch-Godfrey",
      "Autocorrelation Test",
      "OLS Regression Results",
      "Econometrics",
      "BGOD",
      "Metadata",
      "Least Squares Method",
      "Durbin-Watson"
    ]
  },
  "econometrics.bpag": {
    "title": "bpag",
    "description": "The page provides information on how to use the 'bpag' command to conduct\n  the Breusch-Pagan heteroscedasticity test in econometrics. It requires running OLS\n  with dependent and independent variables and shows whether there is heteroscedasticity\n  in the data.",
    "keywords": [
      "Breusch-Pagan test",
      "heteroscedasticity test",
      "OLS",
      "econometrics",
      "bpag command",
      "data analysis"
    ]
  },
  "econometrics.clean": {
    "title": "clean",
    "description": "This documentation page provides in-depth instructions on how to clean\n  a dataset by filling and dropping NaN values using different methods. It covers\n  the use of the function, parameters, choices, and detailed examples.",
    "keywords": [
      "dataset cleaning",
      "NaN values",
      "data processing",
      "Python functions",
      "data analysis",
      "SEO optimization",
      "filling methods",
      "dropping methods"
    ]
  },
  "econometrics.coint": {
    "title": "coint",
    "description": "The Coint page provides users with an explanation and guideline on how\n  to show co-integration between two timeseries. It includes parameter descriptions,\n  usage, and examples.",
    "keywords": [
      "coint",
      "co-integration",
      "timeseries",
      "plot",
      "significant",
      "parameters",
      "examples"
    ]
  },
  "econometrics.combine": {
    "title": "combine",
    "description": "This page provides comprehensive documentation on the 'combine' function,\n  including its usage with Python, parameters, and clear, practical examples. Combine\n  is essential when dealing with datasets, particularly when you need to add specific\n  columns.",
    "keywords": [
      "combine",
      "datasets",
      "columns",
      "parameters",
      "add columns"
    ]
  },
  "econometrics.compare": {
    "title": "compare",
    "description": "Detailed documentation on the 'compare' function, a python command for\n  comparing results between all activated Panel regression models. This function doesn't\n  require any parameters.",
    "keywords": [
      "compare",
      "Panel regression models",
      "activated",
      "models",
      "results"
    ]
  },
  "econometrics.delete": {
    "title": "delete",
    "description": "This documentation page provides a detailed overview of how to use the\n  'delete' command to remove specified columns from a dataset. It includes usage examples\n  and explanations of command parameters to help users leverage this tool more effectively\n  in their data manipulation tasks.",
    "keywords": [
      "delete command",
      "dataset manipulation",
      "data column removal",
      "docusaurus",
      "command usage",
      "data management"
    ]
  },
  "econometrics.desc": {
    "title": "desc",
    "description": "Easily analyze data with the desc command in Python. Generate comprehensive\n  descriptive statistics for each column in your dataset; such as count, mean, standard\n  deviation, min, max, etc. Ideal for econometric analysis and other forms of statistical\n  insights.",
    "keywords": [
      "data analysis",
      "descriptive statistics",
      "dataset",
      "econometrics",
      "statistics for dataset",
      "anes96 dataset"
    ]
  },
  "econometrics.dwat": {
    "title": "dwat",
    "description": "The 'dwat' documentation page provides comprehensive information about\n  Durbin-Watson autocorrelation test, its usage with Ordinary Least Squares (OLS)\n  regression, and potential issues and solutions with multi-collinearity and numerical\n  problems. The page features examples with a Python command, its parameters, and\n  regression results to provide a practical understanding of the concepts.",
    "keywords": [
      "dwat",
      "autocorrelation tests",
      "Durbin-Watson",
      "OLS",
      "independent variables",
      "dependent variables",
      "regression results",
      "plot",
      "residuals",
      "multicollinearity",
      "numerical problems",
      "analytics",
      "statistics",
      "econometrics",
      "statistical analysis"
    ]
  },
  "econometrics.export": {
    "title": "export",
    "description": "This documentation page guides you on how to use the 'export' command\n  in Python for exporting a dataset to Excel or CSV. It provides detailed usage, parameters,\n  and examples.",
    "keywords": [
      "export",
      "dataset",
      "Excel",
      "CSV",
      "econometrics",
      "data export",
      "export command"
    ]
  },
  "econometrics.granger": {
    "title": "granger",
    "description": "This is a documentation page for Granger causality command in econometrics.\n  The command is used for analyzing the cause between two-time series. The page also\n  provides usage examples and parameters detail.",
    "keywords": [
      "Granger causality",
      "time series analysis",
      "Econometrics",
      "Command documentation",
      "Statistical command"
    ]
  },
  "econometrics.index_cmd": {
    "title": "index",
    "description": "This page of the documentation describes how to set a (multi)index for\n  a dataset. It includes parameters for selecting the dataset, the default index,\n  data adjustments for regressions, and dropping the column that the index is set\n  for. Examples using Python are provided.",
    "keywords": [
      "indexing",
      "dataset",
      "default index",
      "dataset adjustment",
      "timeseries regression",
      "panel data regression",
      "drop column",
      "data management"
    ]
  },
  "econometrics.load": {
    "title": "load",
    "description": "This documentation page covers the function 'load', which is utilized\n  to load datasets from various sources. It provides in-depth details of its usage,\n  parameters and examples to guide users.",
    "keywords": [
      "Load Function",
      "Dataset",
      "StatsModels",
      "Data Loading",
      "Documentation",
      "Function Parameters",
      "Econometrics",
      "Examples"
    ]
  },
  "econometrics.norm": {
    "title": "norm",
    "description": "This page provides guidelines on using the 'norm' function to test whether\n  particular data is normally distributed. It covers functionality and parameter description,\n  and also includes histogram examples for a clear understanding.",
    "keywords": [
      "data normalization",
      "data distribution",
      "histogram",
      "plot",
      "dataset",
      "data testing"
    ]
  },
  "econometrics.ols": {
    "title": "ols",
    "description": "This page explains how to perform an OLS regression on timeseries data\n  using specific commands and parameters. It's useful for those working in data analytics\n  or statistical modeling.",
    "keywords": [
      "OLS regression",
      "timeseries data",
      "data analytics",
      "statistical modeling",
      "dependent variable",
      "independent variable",
      "no_output parameter"
    ]
  },
  "econometrics.panel": {
    "title": "panel",
    "description": "The documentation page provides a comprehensive guide to performing regression\n  analysis on Panel Data using the 'panel' command in Python. It includes information\n  about the usage, command parameters and the type of regression analysis you can\n  perform.",
    "keywords": [
      "panel data regression",
      "data analysis",
      "regression analysis",
      "Pooled OLS",
      "Random Effects",
      "Between OLS",
      "Fixed Effects",
      "First Difference OLS",
      "entity effects",
      "time effects"
    ]
  },
  "econometrics.plot": {
    "title": "plot",
    "description": "This page provides documentation for the 'plot' command used in Python\n  scripting. The command is intended for plotting data based on a specified column\n  from a dataset with usage examples and parameter explanations.",
    "keywords": [
      "Python scripting",
      "data plotting",
      "command usage",
      "dataset",
      "econometrics",
      "tutorial",
      "SEO optimization"
    ]
  },
  "econometrics.remove": {
    "title": "remove",
    "description": "Learn how to remove a dataset from a loaded list efficiently using our\n  step-by-step guide, which includes usage, parameters setup, and examples.",
    "keywords": [
      "remove dataset",
      "dataset management",
      "data management commands",
      "data cleaning",
      "database management"
    ]
  },
  "econometrics.rename": {
    "title": "rename",
    "description": "The 'rename' page in our documentation explains how to change the name\n  of columns in a dataset using a specific command. This includes detailed parameter\n  explanations and usage examples.",
    "keywords": [
      "rename",
      "dataset",
      "parameters",
      "examples",
      "column renaming",
      "usage",
      "data manipulation",
      "python commands"
    ]
  },
  "econometrics.root": {
    "title": "root",
    "description": "This page provides detailed info on running unit root tests on a column\n  of a dataset using various types of regression. The page includes usage, parameters,\n  and examples.",
    "keywords": [
      "unit root tests",
      "dataset",
      "econometrics",
      "ADF",
      "KPSS",
      "regression"
    ]
  },
  "econometrics.show": {
    "title": "show",
    "description": "This documentation page provides a detailed overview of the 'show' function\n  in Python, used for data representation and manipulation in DataFrames. It presents\n  the usage, parameters, and examples demonstrating how the function can be employed\n  for different econometrics datasets by sorting and displaying datasets in an organized\n  manner.",
    "keywords": [
      "Database",
      "Data sorting",
      "Data visualization",
      "Show function",
      "Econometrics"
    ]
  },
  "econometrics.type": {
    "title": "type",
    "description": "Learn how to show the type of the columns of your dataset or change the\n  type of a specific column using Docusaurus. This guide also provides usage, parameters\n  and examples.",
    "keywords": [
      "Docusaurus",
      "Dataset Column Types",
      "Change Column Type",
      "Code Examples",
      "Type Function Parameters",
      "Type Function Usage"
    ]
  },
  "economy.bigmac": {
    "title": "bigmac",
    "description": "This page provides information on how to get historical Big Mac Index\n  data using specific commands and parameters. It also gives details about usage and\n  provided country codes.",
    "keywords": [
      "Big Mac Index",
      "historical data",
      "Nasdaq Data Link",
      "country codes",
      "data retrieval",
      "commands and parameters"
    ]
  },
  "economy.edebt": {
    "title": "edebt",
    "description": "The page provides the information about edebt, a tool that gives access\n  to national debt statistics for various countries. The data is sourced from Wikipedia.",
    "keywords": [
      "edebt",
      "national debt statistics",
      "debt data",
      "economic data",
      "global debt statistics"
    ]
  },
  "economy.eval": {
    "title": "eval",
    "description": "This page provides information about the 'eval' function for creating\n  custom data columns using mathematical expressions supported by pandas.eval(). It\n  exemplifies case sensitivity and the use of queries on loaded datasets.",
    "keywords": [
      "eval function",
      "custom data column",
      "pandas.eval",
      "mathematical expressions",
      "datasets",
      "case sensitive",
      "query",
      "DGS2",
      "DGS5"
    ]
  },
  "economy.events": {
    "title": "events",
    "description": "This page of the documentation provides comprehensive instructions on\n  how to use the 'events' feature of our API. It allows users to fetch economic events\n  from various countries within a specified date range. Important options include\n  setting the importance and category of events.",
    "keywords": [
      "economy",
      "economic calendar",
      "global financial events",
      "events tracking",
      "country wise economic events",
      "importance",
      "event category",
      "API usage",
      "financial market",
      "data analysis",
      "finance data"
    ]
  },
  "economy.fred": {
    "title": "fred",
    "description": "This documentation page provides information on using the fred command\n  to query the FRED database, plot data, and handle Macro Economic data. It includes\n  details on parameters, usage, and examples including Python code snippets.",
    "keywords": [
      "FRED database",
      "Query",
      "Series ID",
      "Fred command",
      "Macro Economic",
      "Data plotting",
      "Start date",
      "End date"
    ]
  },
  "economy.futures": {
    "title": "futures",
    "description": "This page provides information on futures/commodities from sources such\n  as Wall St. Journal and FinViz. Users can retrieve a range of commodity futures\n  (like energy, metals, meats, grains, softs) and sort the data in several ways.",
    "keywords": [
      "futures",
      "commodities",
      "Wall St. Journal",
      "FinViz",
      "energy",
      "metals",
      "meats",
      "grains",
      "softs",
      "sortby",
      "reverse",
      "commodity futures"
    ]
  },
  "economy.index_cmd": {
    "title": "index",
    "description": "This page provides detailed information on how to obtain indices data\n  and visualize it. The useful parameters and their respective descriptions are provided\n  to ensure efficient data manipulation. Actual examples that illustrate the usage\n  of the commands are included for better understanding.",
    "keywords": [
      "Indices data",
      "Data plot",
      "Yahoo Finance",
      "FinanceDatabase",
      "Data intervals",
      "Start date",
      "End date",
      "Data column",
      "Data query",
      "Compounded returns"
    ]
  },
  "economy.macro": {
    "title": "macro",
    "description": "Learn how to retrieve and manipulate a variety of macro data from numerous\n  countries using various parameters and transformations. The page provides examples\n  and details of the functionalities.",
    "keywords": [
      "macro data",
      "Gross Domestic Product",
      "Treasury Yields",
      "Employment figures",
      "Government components",
      "Consumer and Producer Indices",
      "EconDB",
      "macro parameters",
      "data transformation",
      "macro programming",
      "currency conversion"
    ]
  },
  "economy.map": {
    "title": "map",
    "description": "The documentation outlines the usage and parameters of a performance\n  index stocks map placed according to sectors and industries. The Web-Based map tool,\n  sourced by Finviz, adjusts based on selected performance periods and map filter\n  types, such as SP500, world, full or ETF.",
    "keywords": [
      "Performance index",
      "stocks map",
      "sectors and industries",
      "market cap",
      "Finviz",
      "map filter type",
      "Performance period",
      "sp500",
      "world",
      "full",
      "etf"
    ]
  },
  "economy.overview": {
    "title": "overview",
    "description": "'A comprehensive guide to monitor different financial markets that includes\n  usage of command-line codes for the assessment of indices, US bonds, global bonds\n  and currencies. US indices include examples of DJIA, S&P 500, Nasdaq Composite,\n  and several others. The bond overview provides details about US 10 Year Treasury\n  Note, Germany 10 Year Government Bond, and more. Currencies'' commands exemplify\n  data about Euro, Japanese Yen, U.K. Pound and others. '",
    "keywords": [
      "Market Overview",
      "Indices",
      "US Bonds",
      "Global Bonds",
      "Currencies",
      "Command-line codes",
      "Financial Markets",
      "DJIA",
      "S&P 500",
      "Nasdaq Composite",
      "US 10 Year Treasury Note",
      "Germany 10 Year Government Bond",
      "Euro",
      "Japanese Yen",
      "U.K. Pound"
    ]
  },
  "economy.performance": {
    "title": "performance",
    "description": "Documentation for the Performance function that helps to view group data,\n  including sectors, industries, and countries. It details usage, parameters, and\n  provides examples of Performance function use.",
    "keywords": [
      "Performance function",
      "group data view",
      "sectors",
      "industries",
      "countries",
      "function usage",
      "parameters",
      "financial data",
      "finviz data",
      "data presentation",
      "data sorting"
    ]
  },
  "economy.plot": {
    "title": "plot",
    "description": "Learn how to plot data on two y-axes using the plot command in our tools.\n  The command allows you to plot different time series in one graph with data from\n  the macro, fred, index, and treasury commands. Our guide also provides examples\n  of usage and parameters to customize your plots.",
    "keywords": [
      "plot data",
      "two y-axes",
      "macro",
      "fred",
      "index",
      "treasury commands",
      "time series",
      "graph",
      "variables"
    ]
  },
  "economy.spectrum": {
    "title": "spectrum",
    "description": "Learn how to view group spectrum data in various sectors, industries\n  or countries. Understand usage and parameters involved.",
    "keywords": [
      "Spectrum data",
      "Sectors",
      "Industries",
      "Countries",
      "Data analysis",
      "Financial analysis",
      "Consumer cyclical",
      "Consumer defensive",
      "Energy sector",
      "Healthcare sector",
      "Industrials sector",
      "Real Estate sector",
      "Technology sector",
      "Utilities sector",
      "Data groups",
      "Capitalization",
      "Finviz",
      "Basic materials sector",
      "Communication services sector",
      "Programming"
    ]
  },
  "economy.spread": {
    "title": "spread",
    "description": "'Documentation page for ''spread'' software: a tool designed to generate\n  bond spread matrix. This tool is parametrizable, allowing users to customize its\n  outputs.'",
    "keywords": [
      "spread software",
      "bond spread matrix",
      "financial tools",
      "bond spread matrix generator",
      "bond spread",
      "financial software",
      "customizable finance tool",
      "bond rates",
      "finance heatmap",
      "financial data visualization"
    ]
  },
  "economy.treasury": {
    "title": "treasury",
    "description": "This page provides detailed information and instructions on how to obtain\n  and plot any set of U.S. treasuries through different parameters including maturity,\n  frequency and type. It provides flexibility with regards to date ranges.",
    "keywords": [
      "U.S. treasuries",
      "maturity",
      "frequency",
      "plot",
      "date range",
      "parameters",
      "instructions",
      "EconDB",
      "FED",
      "inflation-adjusted",
      "secondary markets"
    ]
  },
  "economy.valuation": {
    "title": "valuation",
    "description": "Learn how to view and understand group valuation data for different sectors,\n  industries, or countries using various parameters. Find the exact metrics you need\n  regarding Market Cap, P/E, P/S, P/B and more.",
    "keywords": [
      "valuation",
      "sectors",
      "industry",
      "country",
      "data group",
      "sortby",
      "reverse",
      "MarketCap",
      "P/E",
      "FwdP/E",
      "PEG",
      "P/S",
      "P/B",
      "P/C",
      "P/FCF",
      "EPSpast5Y",
      "EPSnext5Y",
      "Salespast5Y",
      "Change",
      "Volume"
    ]
  },
  "economy.ycrv": {
    "title": "ycrv",
    "description": "This documentation page explains how the user is able to use ycrv command to generate country yield curve, which shows the bond rates at different maturities.",
    "keywords": [
      "bond rates",
      "yield curve"
    ]
  },
  "economy.qa.acf": {
    "title": "acf",
    "description": "Documentation page about the ACF python function, an auto-correlation\n  and partial auto-correlation function for diff and diff diff stock data. It includes\n  code usage, parameters and a visual example.",
    "keywords": [
      "auto-correlation",
      "partial auto-correlation",
      "acf",
      "stock data",
      "lags",
      "acf function",
      "diff",
      "diff diff"
    ]
  },
  "economy.qa.bw": {
    "title": "bw",
    "description": "Box and Whisker Plot (bw) page instructs users on the usage of bw in\n  Python, explains the parameters, and offers a view of a bw plot. Promotes understanding\n  of data visualization.",
    "keywords": [
      "Box and Whisker plot",
      "bw",
      "plot",
      "data visualization",
      "parameters",
      "yearly plot"
    ]
  },
  "economy.qa.cdf": {
    "title": "cdf",
    "description": "This page provides documentation about the 'cdf' command in Python, which\n  is a cumulative distribution function without any parameters. Examples of usage\n  and export of dataframe data to csv, json, or xlsx file are given.",
    "keywords": [
      "cdf",
      "cumulative distribution function",
      "parameterless command",
      "export dataframe",
      "csv",
      "json",
      "xlsx",
      "help"
    ]
  },
  "economy.qa.cusum": {
    "title": "cusum",
    "description": "This page provides a detailed explanation on the usage, parameters and\n  functionality of the Cumulative Sum Algorithm (CUSUM) used for detecting abrupt\n  changes in data.",
    "keywords": [
      "cusum",
      "cumulative sum algorithm",
      "data change detection",
      "threshold",
      "drift"
    ]
  },
  "economy.qa.decompose": {
    "title": "decompose",
    "description": "This product documentation page discusses the decompose function in time\n  series analysis. It explains additive and multiplicative time series and provides\n  specific usage examples and parameter details.",
    "keywords": [
      "Decompose function",
      "Additive time series",
      "Multiplicative time series",
      "Time series analysis",
      "Stocks",
      "Parameter details",
      "Usage examples"
    ]
  },
  "economy.qa.hist": {
    "title": "hist",
    "description": "A detailed guide on using 'hist', a histogram with density and rug. This\n  page includes usage examples, parameters, and a demonstrative image.",
    "keywords": [
      "Histogram",
      "Density",
      "Rug",
      "Hist guide",
      "n_bins parameter",
      "Usage examples"
    ]
  },
  "economy.qa.kurtosis": {
    "title": "kurtosis",
    "description": "This page offers comprehensive information on kurtosis - a measure of\n  the 'tailedness' of a probability distribution of a real-valued random variable.\n  Learn about its different measures and how to estimate it from a sample. Try it\n  out with our Python usage guide.",
    "keywords": [
      "kurtosis",
      "probability distribution",
      "real-valued random variable",
      "shape of distribution",
      "theoretical distribution",
      "sample estimation",
      "python usage guide",
      "n_window parameter"
    ]
  },
  "economy.qa.line": {
    "title": "line",
    "description": "The page provides a detailed overview on how to use the 'line' function\n  in Python to visualize data on a line plot. It provides parameters for customizing\n  the plot such as scale, markers and highlighting specific events.",
    "keywords": [
      "line plot",
      "data visualization",
      "log scale",
      "line markers",
      "scatter markers",
      "highlight events"
    ]
  },
  "economy.qa.load": {
    "title": "load",
    "description": "This page provides a guide on how to load a stock ticker for analysis.\n  It explains the parameters for loading data, including options for Indian tickers,\n  intraday stock minutes, and custom file paths. Additionally, users can find information\n  on how to load monthly and weekly data.",
    "keywords": [
      "load",
      "stock ticker",
      "analysis",
      "syf",
      "Indian ticker",
      "exchanges data providers",
      "Yahoo finance",
      "starting date",
      "ending date",
      "intraday stock minutes",
      "pre/after market hours",
      "custom file path",
      "monthly data",
      "weekly data"
    ]
  },
  "economy.qa.normality": {
    "title": "normality",
    "description": "This page on the marketing website provides details on the 'normality'\n  function including its usage, parameters, and examples. It is particularly centered\n  around running normality tests in Python.",
    "keywords": [
      "Normality command",
      "Normality Statistics",
      "Kurtosis",
      "Skewness",
      "Jarque-Bera",
      "Shapiro-Wilk",
      "Kolmogorov-Smirnov",
      "parameters",
      "examples"
    ]
  },
  "economy.qa.pick": {
    "title": "pick",
    "description": "This page explains the usage of the load command for loading a FRED series\n  to the current selection. This is useful for analyzing stock market data with various\n  parameters such as Open, High, Low, Close, Adj Close, Volume, etc.",
    "keywords": [
      "FRED series",
      "load command",
      "Stocks analysis",
      "TSLA",
      "Python commands",
      "Stock market",
      "Market data",
      "Open, High, Low, Close",
      "Adj Close, Volume",
      "date_id, OC_High, OC_Low",
      "Returns, LogRet"
    ]
  },
  "economy.qa.qqplot": {
    "title": "qqplot",
    "description": "The qqplot page focuses on providing information on how to display a\n  QQ plot vs normal quantiles using Python. The command has no parameters and includes\n  a practical example.",
    "keywords": [
      "qqplot",
      "normal quantiles",
      "data visualization",
      "no parameters"
    ]
  },
  "economy.qa.quantile": {
    "title": "quantile",
    "description": "This documentation page provides detailed information on the concept\n  of quantile, a statistical term which refers to the values that divide a set of\n  observations into specified proportions. The page also includes parameters for customizing\n  the quantile function.",
    "keywords": [
      "Quantile",
      "Distribution",
      "Median",
      "n_window",
      "f_quantile",
      "Parameters"
    ]
  },
  "economy.qa.raw": {
    "title": "raw",
    "description": "This documentation page explains the usage of the 'raw' command in Python\n  which prints raw data to console. It outlines parameters and usage, and provides\n  an example of output sorted by a specific column in either ascending or descending\n  order.",
    "keywords": [
      "raw data",
      "console",
      "parameters",
      "usage",
      "limit",
      "reverse",
      "sortby",
      "ascending",
      "descending"
    ]
  },
  "economy.qa.rolling": {
    "title": "rolling",
    "description": "The page provides details on the 'rolling' function, focusing on usage\n  with Python, its parameters, especially 'n_window' for window length, and its role\n  in calculating rolling mean and standard deviation.",
    "keywords": [
      "rolling",
      "mean",
      "std deviation",
      "usage",
      "parameters",
      "n_window",
      "window length",
      "coding"
    ]
  },
  "economy.qa.skew": {
    "title": "skew",
    "description": "The documentation page of the 'skew' attribute, which is a measure of\n  the asymmetry or distortion of a symmetric distribution. It provides explanation\n  of the concept, its usage in Python and parameters details.",
    "keywords": [
      "skew",
      "asymmetry",
      "symmetric distribution",
      "normal distribution",
      "distortion",
      "deviation",
      "random variable",
      "parameters"
    ]
  },
  "economy.qa.spread": {
    "title": "spread",
    "description": "This page provides a detailed guide on the use of the 'spread' function\n  in Python, which shows rolling spread measurement. Furthermore, it also presents\n  the parameters involved, their descriptions, and potential default values.",
    "keywords": [
      "spread",
      "rolling spread measurement",
      "parameters",
      "usage",
      "window length",
      "n_window",
      "optional"
    ]
  },
  "economy.qa.summary": {
    "title": "summary",
    "description": "This page pertains to the summary statistics command used in Python for\n  data analysis. The command provides a comprehensive summary of various statistical\n  parameters for a given dataset, offering insight into data distribution and patterns.",
    "keywords": [
      "summary statistics",
      "data analysis",
      "statistics",
      "data summary",
      "data distribution",
      "data interpretation"
    ]
  },
  "economy.qa.unitroot": {
    "title": "unitroot",
    "description": "Understand the usage, implementation parameters and examples of the unitroot\n  function which is used to perform unit root test, stationarity tests like ADF and\n  KPSS. Learn about regression types and the calculation of values like Test Statistic,\n  P-Value, NLags, Nobs and ICBest.",
    "keywords": [
      "unitroot",
      "stationarity tests",
      "ADF tests",
      "KPSS tests",
      "regression types",
      "unitroot parameters",
      "unitroot examples",
      "p-value",
      "n-lags",
      "n-obs",
      "icbest",
      "python commands"
    ]
  },
  "etf.candle": {
    "title": "candle",
    "description": "This documentation is for the 'candle' function that shows historical\n  data for an ETF. It explains how to use the function with key parameters to sort\n  data, display raw information, setup moving average in days, etc.",
    "keywords": [
      "candle function",
      "ETF historical data",
      "interactive plotly chart",
      "sort data",
      "display raw data",
      "moving average",
      "market trends",
      "high and low trends"
    ]
  },
  "etf.compare": {
    "title": "compare",
    "description": "A documentation page for the 'compare' function used in StockAnalysis.\n  The function allows users to compare selected ETF symbols to obtain various financial\n  and trading data. Parameters, usage, and examples are provided.",
    "keywords": [
      "StockAnalysis",
      "ETF comparison",
      "Financial data",
      "Trading information",
      "Financial analysis tools"
    ]
  },
  "etf.load": {
    "title": "load",
    "description": "This page provides a guide on how to load an Exchange Traded Fund (ETF)\n  ticker to perform analysis. It includes the usage, parameters such as ticker, start\n  date, end date and limit of holdings. The page also includes examples of how to\n  use the load feature.",
    "keywords": [
      "load",
      "ETF",
      "analysis",
      "parameters",
      "date",
      "holdings",
      "Yahoo Finance",
      "StockAnalysis"
    ]
  },
  "etf.news": {
    "title": "news",
    "description": "The page provides information on how to print the latest news about ETF\n  using parameters such as limit, starting date, order of articles, and news sources.\n  This information is sourced from the News API.",
    "keywords": [
      "ETF",
      "News API",
      "latest news",
      "articles",
      "bbc",
      "yahoo.com",
      "docusaurus"
    ]
  },
  "etf.overview": {
    "title": "overview",
    "description": "The page provides a detailed overview of selected ETFs including information\n  on assets, NAV, expense ratio, PE ratio, outstanding shares, dividends, yield, trading\n  volume, opening and closing prices, 52-week highs and lows, beta coefficient and\n  the number of holdings.",
    "keywords": [
      "ETF",
      "overview",
      "assets",
      "NAV",
      "Expense Ratio",
      "PE Ratio",
      "Shares Out",
      "dividend",
      "Dividend Yield",
      "Volume",
      "Open",
      "Previous Close",
      "52-Week Low",
      "52-Week High",
      "Beta",
      "Holdings"
    ]
  },
  "etf.pir": {
    "title": "pir",
    "description": "Create comprehensive ETF excel reports using the passive investor ETF\n  tool 'pir'. This tool generates a detailed report containing significant metrics\n  about any ETFs obtained from Yahoo Finance. Modifiable parameters include the ETF\n  symbols, report filename, and save location.",
    "keywords": [
      "passive investor ETF",
      "ETF excel report",
      "Yahoo Finance ETF metrics",
      "ETF report generation",
      "OpenBBUserData",
      "Python programming"
    ]
  },
  "etf.search": {
    "title": "search",
    "description": "Learn how to search for ETFs by name using the FinanceDatabase or StockAnalysis.com.\n  Understand the usage, parameters, and how to incorporate them in Python.",
    "keywords": [
      "ETF",
      "search",
      "FinanceDatabase",
      "StockAnalysis",
      "name",
      "description",
      "parameters",
      "usage"
    ]
  },
  "etf.summary": {
    "title": "summary",
    "description": "This documentation page provides a summary of how to print an ETF description\n  with no additional parameters required. Ideal for quick referencing.",
    "keywords": [
      "Documentation",
      "ETF Description",
      "Print ETF",
      "No Parameters",
      "Summary",
      "Quick Reference",
      "Python Code"
    ]
  },
  "etf.weights": {
    "title": "weights",
    "description": "The page details the usage of the 'weights' parameter in viewing ETF\n  sector holdings. It also provides information about the parameters such as the minimum\n  positive float to display the sector and an option for raw data output.",
    "keywords": [
      "ETF sector holdings",
      "weights parameter",
      "minimum positive float",
      "raw data output"
    ]
  },
  "etf.disc.active": {
    "title": "active",
    "description": "The active function provides an overview of most active ETFs/mutual funds\n  according to WSJ market data. The function details include price, volume, change,\n  and percent change.",
    "keywords": [
      "etf",
      "active",
      "mutual funds",
      "market data",
      "wsj.com",
      "price",
      "volume",
      "change",
      "percent change"
    ]
  },
  "etf.disc.decliners": {
    "title": "decliners",
    "description": "The decliners documentation page provides information on how to use the\n  'decliners' command to display the top ETF/Mutual fund decliners from wsj.com/market-data.\n  The command doesn't require any parameters and includes examples of usage.",
    "keywords": [
      "ETF",
      "Mutual fund",
      "decliners",
      "wsj.com/market-data",
      "parameters",
      "examples"
    ]
  },
  "etf.disc.gainers": {
    "title": "gainers",
    "description": "This documentation page is about the 'gainers' command, which displays\n  the top ETF/Mutual fund gainers from wsj.com/market-data. It includes no parameters\n  and examples of its use.",
    "keywords": [
      "gainers command",
      "ETF gainers",
      "Mutual fund gainers",
      "wsj.com market data",
      "command usage",
      "ETF Movers",
      "Top gainers",
      "Price change",
      "Volume",
      "investment tool"
    ]
  },
  "etf.screener.sbc": {
    "title": "sbc",
    "description": "This documentation page describes how to use the sbc or 'search by category'\n  feature on FinanceDatabase/StockAnalysis.com. It provides detailed information about\n  parameters for category and limit. It specifically caters to ETFs data lookup.",
    "keywords": [
      "sbc",
      "search by category",
      "FinanceDatabase",
      "StockAnalysis.com",
      "usage",
      "parameters",
      "category",
      "limit",
      "ETFs"
    ]
  },
  "etf.screener.screen": {
    "title": "screen",
    "description": "Documentation for the ETF screen tool, a command-line Python application\n  that scrapes and sorts data from stockanalysis.com. The tool offers various sorting\n  options, including by assets, expense, and volume, among others.",
    "keywords": [
      "ETF Screen",
      "Stock Analysis",
      "Data Scraping",
      "Github Repository",
      "CLI",
      "Parameters",
      "Sort",
      "Limit",
      "Reverse",
      "Financial Data"
    ]
  },
  "etf.screener.set": {
    "title": "set",
    "description": "This page provides detailed information about the 'set' command used\n  in Python, its usage, parameters, and the role of 'etf_config.ini' as a preset filter.",
    "keywords": [
      "set command",
      "preset",
      "etf_config.ini",
      "set usage",
      "set parameters",
      "filter presets"
    ]
  },
  "etf.screener.view": {
    "title": "view",
    "description": "The page provides information on viewing available presets, using the\n  view command and viewing specific custom presets. The specific custom preset example\n  is etf_config.ini.",
    "keywords": [
      "View presets",
      "Usage of view",
      "View parameters",
      "Custom presets",
      "etf_config.ini"
    ]
  },
  "etf.ta.ad": {
    "title": "ad",
    "description": "The Accumulation/Distribution Line page provides information about how\n  this technical analysis tool operates, based on the close location value, to predict\n  trends in stock price. It also covers how to interpret divergence in the indicator,\n  usage of the tool, and parameters for customization.",
    "keywords": [
      "Accumulation/Distribution Line",
      "On Balance Volume",
      "close location value",
      "stock market indicator",
      "price movement",
      "technical analysis",
      "price trends"
    ]
  },
  "etf.ta.adosc": {
    "title": "adosc",
    "description": "Explore the Accumulation/Distribution Oscillator page, also known as\n  the Chaikin Oscillator. This powerful momentum indicator analyzes the strength of\n  price moves and the underlying buying and selling pressure in a given period. Learn\n  how to use the indicator and understand its parameters like fast length and slow\n  length.",
    "keywords": [
      "Accumulation/Distribution Oscillator",
      "Chaikin Oscillator",
      "momentum indicator",
      "price moves",
      "buying pressure",
      "selling pressure",
      "market turning points",
      "adosc",
      "stock value",
      "fast length",
      "slow length"
    ]
  },
  "etf.ta.adx": {
    "title": "adx",
    "description": "The page provides detailed information about the ADX or Average Directional\n  Movement Index, a Welles Wilder style moving average of the Directional Movement\n  Index (DX). It features guidelines on its usage, elaboration of its parameters,\n  and aids readers in interpreting it for identifying strong and weak trends.",
    "keywords": [
      "ADX",
      "Welles Wilder",
      "Directional Movement Index",
      "DX",
      "trend",
      "parameters",
      "n_length",
      "n_scalar",
      "n_drift",
      "n_length",
      "n_scalar",
      "n_drift"
    ]
  },
  "etf.ta.aroon": {
    "title": "aroon",
    "description": "This page provides a comprehensive detail on 'Aroon' - an indicator that\n  shows when a new trend is dawning in the market. It explains how to interpret upward\n  and downward trends as well as crossovers.",
    "keywords": [
      "aroon",
      "marketing",
      "trend",
      "indicator",
      "upward trend",
      "downward trend",
      "crossovers"
    ]
  },
  "etf.ta.atr": {
    "title": "atr",
    "description": "This page provides comprehensive information about the Average True Range\n  (ATR) including its usage, implementation, and parameters. It serves as a key resource\n  for understanding ATR, a widely used tool for measuring volatility in market prices.",
    "keywords": [
      "average true range",
      "volatility measure",
      "ATR usage",
      "ATR parameters",
      "ema",
      "sma",
      "wma",
      "hma",
      "zlma",
      "n_length",
      "s_mamode",
      "n_offset"
    ]
  },
  "etf.ta.bbands": {
    "title": "bbands",
    "description": "Documentation for Bollinger Bands (bbands), an indicator of overbought\n  or oversold conditions in market prices. Includes details on how to use and interpret\n  bbands, as well as information on bbands' parameters (such as n_length, n_std, and\n  s_mamode).",
    "keywords": [
      "Bollinger Bands",
      "overbought conditions",
      "oversold conditions",
      "volatility",
      "price target",
      "support level",
      "resistance level",
      "bbands",
      "n_length",
      "n_std",
      "s_mamode",
      "sma"
    ]
  },
  "etf.ta.cci": {
    "title": "cci",
    "description": "The page describes the usage and parameters of CCI (Commodity Channel\n  Index), a tool designed to detect beginning and ending market trends. It suggests\n  how CCI values can indicate overbought or oversold conditions and potential price\n  corrections.",
    "keywords": [
      "Commodity Channel Index",
      "CCI",
      "market trends",
      "overbought conditions",
      "oversold conditions",
      "price correction",
      "CCI Parameters",
      "CCI usage"
    ]
  },
  "etf.ta.cg": {
    "title": "cg",
    "description": "This page provides detailed information on the Center of Gravity indicator\n  (COG) used to anticipate future price movements and trade on price reversals, and\n  its best usage in range-bound markets.",
    "keywords": [
      "Center of Gravity indicator",
      "future price movements",
      "trade on price reversals",
      "oscillators",
      "range-bound markets",
      "asset price change"
    ]
  },
  "etf.ta.clenow": {
    "title": "clenow",
    "description": "Discover how to calculate the Clenow Volatility Adjusted Momentum using\n  the lookback period for regression in Python. Learn about the parameters and usage\n  of the command for optimized results.",
    "keywords": [
      "Clenow",
      "Volatility Adjusted Momentum",
      "Lookback period",
      "Regression"
    ]
  },
  "etf.ta.demark": {
    "title": "demark",
    "description": "Documentation for Demark Sequential Indicator, a technical indicator\n  in Python. Detailed usage and parameter information is available.",
    "keywords": [
      "Demark Sequential Indicator",
      "Technical Indicator",
      "Parameters",
      "Usage"
    ]
  },
  "etf.ta.donchian": {
    "title": "donchian",
    "description": "This page covers the complete information about Donchian Channels, an\n  indicator generated by moving average calculations to mark the highest and lowest\n  prices of a security over N periods. It also includes how to use the 'donchian'\n  command.",
    "keywords": [
      "Donchian Channels",
      "security price",
      "moving average calculations",
      "upper and lower bands",
      "Donchian Channel",
      "n_length_upper",
      "n_length_lower"
    ]
  },
  "etf.ta.ema": {
    "title": "ema",
    "description": "The page provides details on 'Exponential Moving Average' (EMA) under\n  technical analysis. It explains how EMA outperforms the Simple Moving Average by\n  giving more weight to recent data for increased responsiveness. The page includes\n  a guide for using the 'ema' function and its parameters - 'n_length' and 'n_offset'.",
    "keywords": [
      "Exponential Moving Average",
      "technical analysis",
      "Simple Moving Average",
      "ema",
      "Moving Average calculation",
      "n_length",
      "n_offset",
      "data responsiveness"
    ]
  },
  "etf.ta.fib": {
    "title": "fib",
    "description": "This page offers a comprehensive guide on how to calculate Fibonacci\n  retracement levels, detailing its usage and the parameters required.",
    "keywords": [
      "Fibonacci retracement levels",
      "Financial market analysis",
      "Trading tools",
      "Technical analysis",
      "period parameter",
      "start parameter",
      "end parameter",
      "calculation guide"
    ]
  },
  "etf.ta.fisher": {
    "title": "fisher",
    "description": "A technical documentation page highlighting the Fisher Transform, a technical\n  indicator, its usage, parameters, and purpose in identifying price turning points\n  and trends.",
    "keywords": [
      "Fisher Transform",
      "Technical Indicator",
      "John F. Ehlers",
      "Price Turning Points",
      "Price Trends",
      "Gaussian Normal Distribution",
      "Isolate Price Waves",
      "Parameter Configuration"
    ]
  },
  "etf.ta.hma": {
    "title": "hma",
    "description": "Learn how to use the Hull Moving Average (HMA), a method that improves\n  responsiveness to price activity and maintains curve smoothness. Understand how\n  to use parameters like n_length and n_offset with the HMA.",
    "keywords": [
      "Hull Moving Average",
      "moving average",
      "price activity",
      "curve smoothness",
      "lag elimination",
      "improved smoothing",
      "HMA usage",
      "n_length",
      "n_offset"
    ]
  },
  "etf.ta.kc": {
    "title": "kc",
    "description": "This documentation page provides detailed information about Keltner Channels,\n  a volatility-based band applied onto an asset's price. These channels aid in trend\n  determination by employing average true range (ATR) or volatility. The page also\n  provides comprehensive instructions about how to use and parameterize the 'kc' tool.",
    "keywords": [
      "Keltner Channels",
      "volatility-based bands",
      "average true range",
      "ATR",
      "trend determination",
      "kc",
      "kc parameters",
      "n_length",
      "n_scalar",
      "s_mamode",
      "n_offset",
      "kc usage"
    ]
  },
  "etf.ta.macd": {
    "title": "macd",
    "description": "Describes the Moving Average Convergence Divergence (MACD), a metric\n  used to indicate trend changes and potential buy/sell signals in markets. The page\n  includes usage, parameters, and a visual example.",
    "keywords": [
      "MACD",
      "Moving Average Convergence Divergence",
      "Exponential Moving Averages",
      "Signal line",
      "trend changes",
      "overbought conditions",
      "oversold conditions",
      "Divergence",
      "buy signal",
      "sell signal"
    ]
  },
  "etf.ta.obv": {
    "title": "obv",
    "description": "On Balance Volume (OBV) is a crucial aspect in volume analysis and technical\n  trading. This page gives an in-depth explanation on OBV describing its impact, its\n  interpretation, and usage in predicting price moves and market trends.",
    "keywords": [
      "On Balance Volume",
      "OBV",
      "Volume Analysis",
      "Technical Analysis",
      "Market Trend",
      "Price Move",
      "Financial Trading"
    ]
  },
  "etf.ta.rsi": {
    "title": "rsi",
    "description": "This page provides detailed information about the Relative Strength Index\n  (RSI), including its calculations, interpretation and usage. It also explains the\n  various parameters involved and how to modify them.",
    "keywords": [
      "RSI",
      "Relative Strength Index",
      "overbought",
      "oversold",
      "indicator",
      "price movement",
      "divergence",
      "reversal",
      "parameters",
      "n_length",
      "n_scalar",
      "n_drift"
    ]
  },
  "etf.ta.sma": {
    "title": "sma",
    "description": "This page provides information on Simple Moving Average (SMA), a tool\n  for trend identification and data filtering. It details SMA's usage and parameters\n  like n_length and n_offset.",
    "keywords": [
      "Simple Moving Average",
      "sma",
      "Moving Average",
      "trend identification",
      "data filtering",
      "n_length",
      "n_offset"
    ]
  },
  "etf.ta.stoch": {
    "title": "stoch",
    "description": "Learn how to use the Stochastic Oscillator, a tool for measuring where\n  the close is in relation to the recent trading range. Input values range from zero\n  to 100, and interpret the output for buy and sell signals",
    "keywords": [
      "Stochastic Oscillator",
      "overbought condition",
      "oversold condition",
      "buy signal",
      "sell signal",
      "Fast %D and Slow %D",
      "Raw %K",
      "moving average",
      "trading range",
      "stoch usage",
      "stoch parameters"
    ]
  },
  "etf.ta.vwap": {
    "title": "vwap",
    "description": "Learn how to use the Volume Weighted Average Price, a tool that measures\n  the average typical price by volume. It is used with intraday charts to identify\n  the general direction of the market.",
    "keywords": [
      "VWAP",
      "intraday charts",
      "average price",
      "volume",
      "market direction",
      "stock analysis",
      "GOOGL",
      "USD",
      "financial data",
      "trading"
    ]
  },
  "etf.ta.wma": {
    "title": "wma",
    "description": "Learn how to use Weighted Moving Average (WMA) for better data analysis.\n  This page provides a guide on how to implement WMA, with more weight on recent data\n  and less on past data. It details the usage, parameters, defaults and offers a visual\n  representation for clearer understanding.",
    "keywords": [
      "Weighted Moving Average",
      "WMA",
      "Simple Moving Average",
      "n_length",
      "n_offset"
    ]
  },
  "etf.ta.zlma": {
    "title": "zlma",
    "description": "Zero lag exponential moving average (ZLEMA) indicator documentation.\n  Learn how to use and implement the ZLEMA in your data studies with its parameters\n  and usage. Devised by John Ehlers and Ric Way, ZLEMA aids in providing a de-lagged\n  calculation of data.",
    "keywords": [
      "zlma",
      "zero lag exponential moving average",
      "John Ehlers",
      "Ric Way",
      "EMA",
      "de-lagged data",
      "moving average"
    ]
  },
  "forecast.atr": {
    "title": "atr",
    "description": "This page details how to add Average True Range to a stock ticker dataset\n  using the `atr` command. It's a fantastic resource for individuals interested in\n  forecasting and stock market analysis.",
    "keywords": [
      "Average True Range",
      "dataset",
      "stock ticker",
      "close column",
      "high column",
      "low column",
      "target dataset",
      "target column",
      "forecasting",
      "stock market analysis"
    ]
  },
  "forecast.autoarima": {
    "title": "autoarima",
    "description": "The AutoARIMA documentation page provides an extensive guide on how the\n  Automatic ARIMA forecast works. Details include command usage, various parameters,\n  and examples demonstrating how the forecast performs. This page is ideal for those\n  seeking to understand predictive modeling, time-series analysis, and the application\n  of ARIMA models.",
    "keywords": [
      "AutoARIMA",
      "Forecasting",
      "Predictive modeling",
      "ARIMA models",
      "Time Series Analysis",
      "Machine Learning",
      "Algorithm",
      "Data Modeling",
      "Statistical Analysis"
    ]
  },
  "forecast.autoces": {
    "title": "autoces",
    "description": "This site explores Autoces, a tool for Automatic Complex Exponential\n  Smoothing forecast, its usage, parameters, and examples.",
    "keywords": [
      "Autoces",
      "Automatic Complex Exponential Smoothing forecast",
      "forecasting tool",
      "parameters",
      "usage",
      "examples",
      "seasonality",
      "data analysis",
      "prediction days",
      "plotting historical data"
    ]
  },
  "forecast.autoets": {
    "title": "autoets",
    "description": "The page provides information on how to use the autoets function for\n  automatic Error, Trend, Seasonality (ETS) forecasting. It includes details on the\n  usage of this function, its parameters, and an example to illustrate its application.",
    "keywords": [
      "autoets",
      "ETS forecasting",
      "automatic ETS",
      "Error Trend Seasonality",
      "forecast",
      "parameters",
      "prediction",
      "seasonality"
    ]
  },
  "forecast.autoselect": {
    "title": "autoselect",
    "description": "The autoselect page provides information on how to utilize specific parameters\n  for advanced statistical forecasting using models such as AutoARIMA, AutoETS, AutoCES,\n  MSTL, and more. It also includes examples of how to use this forecasting tool.",
    "keywords": [
      "autoselect",
      "statistical forecast",
      "AutoARIMA",
      "AutoETS",
      "AutoCES",
      "MSTL",
      "seasonality",
      "forecasting",
      "performance per model"
    ]
  },
  "forecast.brnn": {
    "title": "brnn",
    "description": "This documentation page provides in-depth details on how to effectively\n  perform BRNN forecasting using machine learning techniques such as LSTM and GRU\n  with Datusaurus models. It contains all the necessary parameters with their description,\n  default values, and optionality. The page also offers a clear working example demonstrating\n  the usage of BRNN for forecasting financial time series data.",
    "keywords": [
      "BRNN forecast",
      "Vanilla RNN",
      "LSTM",
      "GRU",
      "machine learning",
      "data analysis",
      "datusaurus models",
      "forecasts",
      "parameters",
      "covariates",
      "train split",
      "epoch",
      "training",
      "RNN module type",
      "dropout",
      "batch size",
      "learning rate",
      "residuals"
    ]
  },
  "forecast.clean": {
    "title": "clean",
    "description": "This documentation page provides information about how to clean a dataset\n  by filling and dropping NaN values. It also offers examples and descriptions of\n  different parameters.",
    "keywords": [
      "data cleaning",
      "filling NaN values",
      "dropping NaN values",
      "data cleaning parameters",
      "dataset cleaning",
      "data processing",
      "usage examples"
    ]
  },
  "forecast.combine": {
    "title": "combine",
    "description": "The page provides detailed instruction on how to use the 'combine' function\n  which is used to combine datasets or add specific columns to a dataset. This function\n  is used to streamline data analysis.",
    "keywords": [
      "combine function",
      "data analysis",
      "combine datasets",
      "add columns",
      "dataset usage",
      "TSLA.csv",
      "MSFT.csv",
      "parameter usage",
      "docusaurus page",
      "dataset combination instructions"
    ]
  },
  "forecast.corr": {
    "title": "corr",
    "description": "The page provides information about the 'corr' function used to plot\n  correlation coefficients of a given dataset. It describes parameters, usage examples\n  and visual representation for a TSLA dataset.",
    "keywords": [
      "corr",
      "plot correlation coefficients",
      "parameters",
      "dataset",
      "forecasting",
      "examples",
      "TSLA",
      "usage"
    ]
  },
  "forecast.delete": {
    "title": "delete",
    "description": "Learn how to delete a column from your dataset with straightforward commands,\n  enhancing your data management and analysis in Python.",
    "keywords": [
      "delete column",
      "data management",
      "dataset",
      "data analysis",
      "command usage",
      "parameters"
    ]
  },
  "forecast.delta": {
    "title": "delta",
    "description": "Documentation related to Delta, a function that adds percentage change\n  to a selected dataset column. The page gives an overview of the function usage,\n  parameters and examples",
    "keywords": [
      "Delta function",
      "Dataset",
      "Column specific change",
      "Data analysis",
      "Forecasting",
      "Command line parameters"
    ]
  },
  "forecast.desc": {
    "title": "desc",
    "description": "A page detailing how to use the 'desc' function to show descriptive statistics\n  of a dataset, including parameters and usage examples.",
    "keywords": [
      "dataset",
      "descriptive statistics",
      "data analysis",
      "query commands",
      "data visualization",
      "data loading",
      "TSLA",
      "usage examples"
    ]
  },
  "forecast.ema": {
    "title": "ema",
    "description": "Documentation for the 'ema' tool that allows the addition of an exponential\n  moving average to a dataset based on a specific column. Explains usage, parameters,\n  and gives practical examples.",
    "keywords": [
      "ema",
      "exponential moving average",
      "dataset",
      "column",
      "target_column",
      "period",
      "usage",
      "parameters",
      "examples"
    ]
  },
  "forecast.expo": {
    "title": "expo",
    "description": "This page provides a comprehensive guide to the expo usage for executing\n  a Probabilistic Exponential Smoothing forecast. Parameters and their usage are laid\n  out, along with examples for reference.",
    "keywords": [
      "Probabilistic Exponential Smoothing",
      "forecast",
      "expo",
      "trend",
      "dampen",
      "naive",
      "target_column",
      "n_days",
      "seasonal_periods",
      "start_window",
      "s_end_date",
      "s_start_date",
      "residuals",
      "forecast_only",
      "export_pred_raw",
      "parameters",
      "usage examples"
    ]
  },
  "forecast.export": {
    "title": "export",
    "description": "Page providing a guide on how to use the 'export' feature of a data-focused\n  application, which allows exporting datasets to Excel or CSV formats.",
    "keywords": [
      "export data guide",
      "export dataset",
      "export to Excel",
      "export to CSV",
      "data-focused application",
      "data exporting",
      "dataset handling",
      "dataset operation",
      "automation"
    ]
  },
  "forecast.linregr": {
    "title": "linregr",
    "description": "This documentation page details how to use and implement the 'linregr'\n  function for performing linear regression forecasts. It includes descriptive parameters,\n  usage examples, and result interpretations.",
    "keywords": [
      "docusaurus",
      "linear regression",
      "forecasting",
      "linregr",
      "parameters",
      "usage",
      "examples",
      "metadata",
      "data science",
      "machine learning"
    ]
  },
  "forecast.load": {
    "title": "load",
    "description": "This page details how to use the 'load' command to bring custom datasets\n  into your forecasting tool. It gives usage instructions, parameter descriptions,\n  and examples.",
    "keywords": [
      "load command",
      "custom dataset",
      "data import",
      "data forecasting tool",
      "command usage",
      "command parameters",
      "command examples",
      "data forecasting examples",
      "custom import"
    ]
  },
  "forecast.mom": {
    "title": "mom",
    "description": "For the 'mom' function in a forecasting tool, this page discusses its\n  usage in Python, along with parameters and their values. Various examples of its\n  application on a TSLA dataset are illustrated to demonstrate the addition and cleaning\n  of a 'Momentum_10' column.",
    "keywords": [
      "forecasting tool",
      "add momentum",
      "Python function usage",
      "dataset handling",
      "TSLA dataset",
      "usage examples",
      "parameters"
    ]
  },
  "forecast.mstl": {
    "title": "mstl",
    "description": "A comprehensive guide for MSTL - Multiple Seasonalities and Trend using\n  Loess forecast analysis in Python. This page includes technical details to understand\n  the parameters for a more accurate prediction, including details on seasonalities\n  and trends. A practical example is provided for clarity.",
    "keywords": [
      "MSTL forecast",
      "Multiple Seasonalities and Trend",
      "Predictive Modeling",
      "Time Series Forecasting",
      "Loess Forecast",
      "Seasonality",
      "Predictive Analytics Tools"
    ]
  },
  "forecast.nbeats": {
    "title": "nbeats",
    "description": "Explore how to use NBEATS, Neural Bayesian Estimation of Time Series,\n  a powerful tool for forecasting. It includes details of parameters, usage, and examples.",
    "keywords": [
      "nbeats",
      "Neural Bayesian Estimation",
      "Time Series",
      "forecasting",
      "darts.models.forecasting",
      "python library",
      "data science",
      "machine learning",
      "API",
      "examples"
    ]
  },
  "forecast.nhits": {
    "title": "nhits",
    "description": "'The nhits page provide detailed parameters for forecasting using the\n  Temporal Fusion Transformer model for predicting time-series. A step by step guide\n  to use nhits in a command-line along with additional key performance indicators\n  are provided. This is an effective resource for financial market predictions and\n  similar time-series forecasting tasks with tutorial and potential usage for nn models. '",
    "keywords": [
      "nhits",
      "darts forecasting",
      "tft model",
      "time-series forecasting",
      "forecast parameters",
      "nn models",
      "tensorflow models",
      "neural network models",
      "stock market predict",
      "financial forecast",
      "nhits command"
    ]
  },
  "forecast.plot": {
    "title": "plot",
    "description": "This page provides an elaborative guide to users on how to plot data\n  based on their index with interactive examples.",
    "keywords": [
      "Data Plotting",
      "Plot usage",
      "Dataset.column values",
      "Plot parameters",
      "Python plot guide",
      "Data visualization",
      "index-based plotting",
      "Programming"
    ]
  },
  "forecast.regr": {
    "title": "regr",
    "description": "This page provides a comprehensive guide on how to carry out a regression\n  forecast using regr function in darts.models. Parameters such as past covariates,\n  prediction days, train split, target dataset, and output chunk length are explained\n  in great detail. Examples and usage documentation are also provided to aid in understanding.",
    "keywords": [
      "regression forecast",
      "darts.models",
      "forecasting model",
      "regr function",
      "regr parameters",
      "past covariates",
      "prediction days",
      "train split",
      "forecast chunk length",
      "forecasting tool"
    ]
  },
  "forecast.rename": {
    "title": "rename",
    "description": "The page provides detailed information on the 'rename' function from\n  a Python-based toolset, used for renaming columns in a dataset. It includes how\n  to use the function, its parameters, and relevant examples.",
    "keywords": [
      "rename tool",
      "dataset",
      "parameter",
      "column rename",
      "dataset modification",
      "data management"
    ]
  },
  "forecast.rnn": {
    "title": "rnn",
    "description": "Explore the use of Recurrent Neural Networks (RNNs) for time series forecasting.\n  It explains how to perform RNN forecasts using different architectures like Vanilla\n  RNN, LSTM, and GRU, using the Darts models forecasting library. The document covers\n  usage examples, parameters description and features of the model.",
    "keywords": [
      "RNN forecast",
      "Vanilla RNN",
      "LSTM",
      "GRU",
      "darts.models.forecasting.rnn_model",
      "parameters",
      "examples",
      "machine learning",
      "model training",
      "model prediction",
      "time series analysis"
    ]
  },
  "forecast.roc": {
    "title": "roc",
    "description": "The documentation shows how to use the ROC function which is used to\n  add a Rate of Change to a selected dataset based on a specific column. It includes\n  usage examples and details on setting parameters like 'target_dataset', 'target_column',\n  and 'period'.",
    "keywords": [
      "Documentation",
      "ROC function",
      "Dataset",
      "Rate of Change",
      "Parameters",
      "Usage examples"
    ]
  },
  "forecast.rsi": {
    "title": "rsi",
    "description": "This page provides a thorough explanation of how to add an RSI (Relative\n  Strength Index) to a specific dataset based on a chosen column. It provides useful\n  examples of seamless operation using Python. RSI is typically used by forecasters\n  and analysts to help identify market trends and overbought or oversold conditions.",
    "keywords": [
      "Relative Strength Index",
      "RSI",
      "dataset",
      "forecast",
      "analysis",
      "market trends",
      "overbought conditions",
      "oversold conditions"
    ]
  },
  "forecast.rwd": {
    "title": "rwd",
    "description": "This page details the procedure for performing a Random Walk with Drift\n  (RWD) forecast using the statsforecast tool in Python. Complete with parameter listings,\n  usage instructions, and examples, the guidance facilitates accurate and efficient\n  data analysis.",
    "keywords": [
      "Random Walk with Drift",
      "RWD",
      "Forecast",
      "Statsforecast",
      "Dataset",
      "Seasonality",
      "Residuals",
      "Predictions"
    ]
  },
  "forecast.season": {
    "title": "season",
    "description": "Meta description for the 'season' function in Docusaurus. This function\n  helps to display and understand the seasonality for a given column in a dataset,\n  providing options for customization such as time lag, maximal lag order, and confidence\n  interval.",
    "keywords": [
      "docusaurus",
      "season",
      "dataset",
      "seasonality",
      "time lag",
      "maximal lag order",
      "confidence interval",
      "data visualization"
    ]
  },
  "forecast.seasonalnaive": {
    "title": "seasonalnaive",
    "description": "This page provides detailed usage of the SeasonalNaive forecasting model\n  including parameters definitions, examples, and results interpretation. It is meant\n  as a guide for using SeasonalNaive to make economic predictions.",
    "keywords": [
      "SeasonalNaive",
      "Forecasting",
      "Economic Predictions",
      "Additive Seasonality",
      "Multiplicative Seasonality",
      "Models",
      "Forecast Parameters",
      "Time Series Analysis",
      "Cross Validation Time Series",
      "Statsforecast"
    ]
  },
  "forecast.show": {
    "title": "show",
    "description": "This page provides detailed information and examples about how to show\n  a portion of a DataFrame using predefined parameters. Gain an improved understanding\n  on DataFrame display, database sorting, data ordering and setting column limits.",
    "keywords": [
      "Data Display",
      "Data Sorting",
      "Database",
      "Data Ordering",
      "Column Limits",
      "Usage Examples"
    ]
  },
  "forecast.signal": {
    "title": "signal",
    "description": "The documentation provides information about the 'Signal' function, which\n  is used to add a price signal to a dataset based on closing price. The signal predicts\n  if a short-term price will go up or down as compared to the long-term.",
    "keywords": [
      "Signal function",
      "Dataset",
      "Closing price",
      "Short-term price prediction",
      "Long-term price comparison"
    ]
  },
  "forecast.sto": {
    "title": "sto",
    "description": "Details on the usage, parameters, and examples of the 'sto' command in\n  adding the Stochastic Oscillator %K and %D. 'sto' can help users understand and\n  interpret the predictive model through stochastic oscillation analysis.",
    "keywords": [
      "Stochastic Oscillator",
      "sto command",
      "Predictive Model Analysis",
      "Technical Indicator"
    ]
  },
  "forecast.tcn": {
    "title": "tcn",
    "description": "This page explains the usage, parameters, and examples of the TCN forecast\n  function used for time series forecasting. The function includes various adjustable\n  parameters for fine-tuning the model's performance and supports the option to save\n  the output data.",
    "keywords": [
      "TCN",
      "forecast",
      "time series forecasting",
      "data modeling",
      "parameters",
      "examples",
      "docusaurus",
      "metadata",
      "marketing website page",
      "code examples",
      "machine learning model"
    ]
  },
  "forecast.tft": {
    "title": "tft",
    "description": "This page provides detailed instructions on how to perform temporal forecasting\n  using the Temporal Fusion Transformer (TFT). It includes usage examples, parameter\n  explanations, and result predictions. It's an exceptional resource if you're looking\n  to understand or implement the TFT for data analysis and machine learning purposes.",
    "keywords": [
      "Temporal Fusion Transformer",
      "Temporal forecasting",
      "Data analysis",
      "TFT parameters",
      "Model prediction",
      "Darts.TFT",
      "Darts.models.forecasting",
      "Model training",
      "Data Science",
      "Machine Learning",
      "Forecasting Techniques",
      "Time Series Forecasting"
    ]
  },
  "forecast.theta": {
    "title": "theta",
    "description": "This page provides a detailed guide on how to perform a Theta forecast\n  using Python. Parameters with their descriptions and the process of exporting predictions\n  to a CSV file are covered as well.",
    "keywords": [
      "Theta forecast",
      "Predictive Modelling",
      "Historical Data",
      "Seasonality",
      "Forecasting",
      "Model Parameters",
      "Profit Forecast"
    ]
  },
  "forecast.trans": {
    "title": "trans",
    "description": "This documentation page provides an in-depth guide on how to perform\n  Transformer Forecast using the trans function. It details usage, parameters with\n  their descriptions, defaults, whether they are optional, and their choices. It also\n  includes examples of application.",
    "keywords": [
      "trans function",
      "Transformer Forecast",
      "parameter guidance",
      "programming",
      "examples"
    ]
  },
  "forecast.which": {
    "title": "which",
    "description": "This page provides instructions on how to show library versions of required\n  packages using the function 'which'.",
    "keywords": [
      "docusaurus",
      "which function",
      "library versions",
      "required packages",
      "Torch version",
      "Darts version",
      "Commands",
      "CPU",
      "RAM",
      "Dataset size"
    ]
  },
  "forex.candle": {
    "title": "candle",
    "description": "This documentation is for the 'candle' function used to show loaded fx\n  data. It provides usage details, parameters explanations and choices, including\n  plotly, sort, reverse, raw, trendlines, moving averages, and more, along with a\n  graphical presentation.",
    "keywords": [
      "candle function",
      "loaded fx data",
      "interactive plotly chart",
      "sort data",
      "reverse flag",
      "raw data",
      "trendlines",
      "moving average",
      "log scale",
      "fx data visualization"
    ]
  },
  "forex.fwd": {
    "title": "fwd",
    "description": "A documentation page for the 'fwd' command which provides forward rates\n  for a loaded pair. Its usage and parameters are explained.",
    "keywords": [
      "fwd command",
      "forward rates",
      "loaded pair",
      "command usage",
      "parameters"
    ]
  },
  "forex.load": {
    "title": "load",
    "description": "This page documents how to load historical exchange rate data from Alpha\n  Advantage and YahooFinance. It provides code usage standards in Python and explains\n  the parameters for the source, the resolution, the interval, and the start date\n  of data.",
    "keywords": [
      "load historical exchange rate data",
      "Alpha Advantage",
      "YahooFinance",
      "resolution of data",
      "intervals of intraday data",
      "start date of data",
      "currency pairs"
    ]
  },
  "forex.quote": {
    "title": "quote",
    "description": "This documentation page provides information regarding the usage and\n  parameters of the 'quote' function in python which fetches the current exchange\n  rate.",
    "keywords": [
      "Documentation",
      "Exchange Rate",
      "Quote Function",
      "Current Rate",
      "Usage and Parameters"
    ]
  },
  "forex.oanda.calendar": {
    "title": "calendar",
    "description": "This is a documentation page for the calendar function. It details the\n  parameters and the usage of this function to manipulate and view calendar data.",
    "keywords": [
      "Calendar Data",
      "Usage",
      "Parameters",
      "Days",
      "Search",
      "Forward",
      "Backward",
      "Negative Numbers"
    ]
  },
  "forex.oanda.cancel": {
    "title": "cancel",
    "description": "Webpage detailing how to cancel a pending order with usage, parameters\n  and special considerations.",
    "keywords": [
      "Cancel Pending Order",
      "Order Management",
      "Webpage Documentation",
      "Cancel Order Operation",
      "API Usage"
    ]
  },
  "forex.oanda.candles": {
    "title": "candles",
    "description": "This page is a comprehensive guide on how to display candle data for\n  different technical analysis indicators like Bollinger Bands, Accumulation/Distribution\n  Indicator, Commodity Channel Index, Exponential Moving Average, On Balance Volume,\n  Relative Strength Index, Simple Moving Average, and Volume Weighted Average Price.",
    "keywords": [
      "candle data",
      "technical analysis",
      "data visualization",
      "Bollinger Bands",
      "Accumulation/Distribution Indicator",
      "Commodity Channel Index",
      "Exponential Moving Average",
      "On Balance Volume",
      "Relative Strength Index",
      "Simple Moving Average",
      "Volume Weighted Average Price"
    ]
  },
  "forex.oanda.closetrade": {
    "title": "closetrade",
    "description": "Documentation for the command 'closetrade', which allows for closing\n  trades by ID. It enables specification of the number of units to close, with relevant\n  parameters detailed.",
    "keywords": [
      "closetrade",
      "trade",
      "orderID",
      "units",
      "close trade",
      "parameters",
      "trade ID"
    ]
  },
  "forex.oanda.from": {
    "title": "from",
    "description": "This page provides instructions on how to select the 'from' currency\n  symbol in a forex pair, including usage information and a comprehensive list of\n  available currencies.",
    "keywords": [
      "forex",
      "currency symbol",
      "forex pair",
      "from symbol",
      "trading",
      "currency exchange",
      "forex trading"
    ]
  },
  "forex.oanda.list": {
    "title": "list",
    "description": "This page contains information on how to list the order history using\n  specific parameters such as order state and limit retrieval. It provides guidance\n  on the usage and parameters to maximize functionality.",
    "keywords": [
      "list order history",
      "Usage",
      "parameters",
      "state order",
      "limit order retrieval"
    ]
  },
  "forex.oanda.order": {
    "title": "order",
    "description": "How to create an order, set unit and price, and understanding of long\n  and short position in order request. Also, guides on setting the price for a limit\n  order.",
    "keywords": [
      "order",
      "units",
      "price",
      "long position",
      "short position",
      "limit order",
      "order request"
    ]
  },
  "forex.oanda.orderbook": {
    "title": "orderbook",
    "description": "This is a marketing website page on how to plot an orderbook for an instrument\n  using the provided Oanda command. The page contains details on usage of 'orderbook'\n  command.",
    "keywords": [
      "Orderbook",
      "Oanda Command",
      "Instrument",
      "Usage",
      "Parameters",
      "Marketing website"
    ]
  },
  "forex.oanda.pending": {
    "title": "pending",
    "description": "Learn how to retrieve information about pending orders using the 'pending'\n  command in Python. Note that this command does not require any parameters.",
    "keywords": [
      "pending orders",
      "no parameters"
    ]
  },
  "forex.oanda.positionbook": {
    "title": "positionbook",
    "description": "This page provides information on how to plot a position book for an\n  instrument using Oanda. It is particularly helpful in implementing commands in python\n  and understanding its parameters.",
    "keywords": [
      "Positionbook",
      "Oanda",
      "Instrument",
      "Command",
      "Parameters"
    ]
  },
  "forex.oanda.positions": {
    "title": "positions",
    "description": "This documentation page provides information about the available positions,\n  along with usage instructions. The 'positions' command has no parameters.",
    "keywords": [
      "Positions",
      "Open Positions Information",
      "Usage",
      "No Parameters"
    ]
  },
  "forex.oanda.price": {
    "title": "price",
    "description": "Learn how to get the price for a selected instrument using the 'price'\n  command. Know more about its usage and parameters.",
    "keywords": [
      "price",
      "instrument",
      "parameters",
      "usage"
    ]
  },
  "forex.oanda.summary": {
    "title": "summary",
    "description": "Documentation for the 'summary' command to print account information,\n  its usage, and parameters. Ideal for users seeking to understand how to retrieve\n  account details.",
    "keywords": [
      "account information",
      "usage",
      "parameters",
      "print account details",
      "summary command"
    ]
  },
  "forex.oanda.to": {
    "title": "to",
    "description": "The page provides details on how to select the 'to' currency symbol in\n  a forex pair. It covers usage, parameters including a comprehensive list of currency\n  codes.",
    "keywords": [
      "Forex",
      "Currency Exchange",
      "To Currency Symbol",
      "Forex Pair",
      "Currency Codes",
      "Finance",
      "Trading",
      "Foreign Exchange"
    ]
  },
  "forex.oanda.trades": {
    "title": "trades",
    "description": "This page provides information on how to retrieve open trades using a\n  simple command, along with usage details and explains that the command has no parameters.",
    "keywords": [
      "trades",
      "open trades",
      "no parameters",
      "usage details",
      "python command",
      "trading commands"
    ]
  },
  "forex.qa.acf": {
    "title": "acf",
    "description": "This page provides information about Auto-Correlation and Partial Auto-Correlation\n  Functions for diff and diff diff forex data, including its usage and parameters.",
    "keywords": [
      "Auto-Correlation Function",
      "Partial Auto-Correlation Function",
      "Forex data",
      "Data analysis",
      "Python acf",
      "Forex data analysis",
      "Data visualization"
    ]
  },
  "forex.qa.bw": {
    "title": "bw",
    "description": "The page provides comprehensive information about the usage of Box and\n  Whisker plot, also known as 'bw'. It covers how to generate bw plots, including\n  a yearly bw plot, using Python. It includes a parameter table and several supporting\n  visuals to guide users.",
    "keywords": [
      "Box and Whisker plot",
      "bw",
      "data visualization",
      "yearly bw plot"
    ]
  },
  "forex.qa.cdf": {
    "title": "cdf",
    "description": "This page provides exhaustive details about the 'cdf' (Cumulative Distribution\n  Function) command in Python including its usage, parameters, example arguments,\n  and the export options. An illustrative grok of the cdf function is also included.",
    "keywords": [
      "cdf",
      "cumulative distribution function",
      "parameters",
      "arguments",
      "export",
      "csv",
      "json",
      "xlsx",
      "dataframe"
    ]
  },
  "forex.qa.cusum": {
    "title": "cusum",
    "description": "The page provides detailed information on using cusum (Cumulative sum\n  algorithm) tool. It covers areas such as algorithm usage with Python, parameters\n  like threshold and drift, and graphical data representation.",
    "keywords": [
      "cusum",
      "cumulative sum algorithm",
      "data change detection",
      "algorithm usage",
      "threshold",
      "drift"
    ]
  },
  "forex.qa.decompose": {
    "title": "decompose",
    "description": "Learn how to decompose time series using the additive or multiplicative\n  model. Understand the usage, parameters, and get examples to simplify your analysis.",
    "keywords": [
      "time series decomposition",
      "additive time series",
      "multiplicative time series",
      "cyclic trend",
      "residual",
      "seasonality",
      "decompose function",
      "data analysis",
      "stock analysis"
    ]
  },
  "forex.qa.hist": {
    "title": "hist",
    "description": "This page is about the hist command, a tool that creates histograms with\n  density and rug. Here you will find usage, parameter information, and details on\n  how to use the n_bins parameter effectively.",
    "keywords": [
      "hist",
      "histogram",
      "density",
      "rug",
      "bins",
      "parameters"
    ]
  },
  "forex.qa.kurtosis": {
    "title": "kurtosis",
    "description": "This page discusses the concept of kurtosis. It provides detailed insights\n  on its functioning, importance, and usage with the help of Python code.",
    "keywords": [
      "kurtosis",
      "probability distribution",
      "tailedness",
      "real-valued random variable",
      "shape",
      "theoretical distribution",
      "population sample",
      "Python code",
      "parameters",
      "n_window",
      "window length"
    ]
  },
  "forex.qa.line": {
    "title": "line",
    "description": "The 'line' documentation page provides information on how to create a\n  line plot of selected data or highlight specific datetimes. It also details the\n  usage, parameters, and provides a visual representation.",
    "keywords": [
      "line plot",
      "highlight specific datetimes",
      "log scale plotting",
      "vertical line markers",
      "scatter markers",
      "data visualization"
    ]
  },
  "forex.qa.load": {
    "title": "load",
    "description": "A detailed guide on how to load any cryptocurrency to perform various\n  analyses. This page includes the method to select an exchange and designate a particular\n  interval along with explaining several parameters including start and end dates.",
    "keywords": [
      "load",
      "crypto currency",
      "analysis",
      "Yahoo Finance",
      "ccxt",
      "cg",
      "source",
      "exchange",
      "interval",
      "parameters",
      "coin",
      "start",
      "end",
      "vs"
    ]
  },
  "forex.qa.normality": {
    "title": "normality",
    "description": "The page provides usage details for the command 'normality' which executes\n  normality tests in python, includes parameters and examples showcasing normality\n  statistics like Kurtosis, Skewness, Jarque-Bera, Shapiro-Wilk, and Kolmogorov-Smirnov.",
    "keywords": [
      "normality tests",
      "kurtosis",
      "skewness",
      "Jarque-Bera",
      "Shapiro-Wilk",
      "Kolmogorov-Smirnov",
      "statistics",
      "p-value"
    ]
  },
  "forex.qa.pick": {
    "title": "pick",
    "description": "This page provides detailed information on how to use the 'pick' function\n  for changing the target variable for analysis. It includes usage instructions, the\n  various parameters used, and specific examples dealing primarily with stock analysis.",
    "keywords": [
      "target variable change",
      "usage of pick",
      "parameters of pick",
      "examples of pick",
      "stock analysis"
    ]
  },
  "forex.qa.qqplot": {
    "title": "qqplot",
    "description": "The page provides detailed information on the usage of qqplot, which\n  displays a QQ plot vs normal quantiles in Python with no parameters required.",
    "keywords": [
      "qqplot",
      "display",
      "normal quantiles",
      "parameters"
    ]
  },
  "forex.qa.quantile": {
    "title": "quantile",
    "description": "The page explores the concept of 'quantile' in statistical analysis,\n  focusing especially on its calculations, usage, parameters, and relation to 'median'\n  and distribution. A valuable resource for those interested in understanding and\n  applying observational data for better decision making.",
    "keywords": [
      "quantile",
      "distribution",
      "median",
      "observations",
      "window length",
      "descriptive statistics",
      "quantile calculation",
      "data analysis"
    ]
  },
  "forex.qa.raw": {
    "title": "raw",
    "description": "Documentation page for raw function, which is used to output raw data\n  to the console. Explains its usage, parameters, along with examples.",
    "keywords": [
      "Documentation",
      "raw function",
      "Console Output",
      "Data Sorting",
      "Programming Parameter Explanation",
      "Python Sorting",
      "Command examples",
      "Data Representation"
    ]
  },
  "forex.qa.rolling": {
    "title": "rolling",
    "description": "This page contains information about the 'Rolling Mean' and 'Standard\n  Deviation' in Python data analysis. It covers usage, parameters, and provides visual\n  representations.",
    "keywords": [
      "rolling",
      "mean",
      "std deviation",
      "usage",
      "parameters",
      "n_window",
      "window length",
      "data analysis",
      "statistics"
    ]
  },
  "forex.qa.skew": {
    "title": "skew",
    "description": "Learn about the concept of skewness as a measure of asymmetry, its relevance\n  in symmetric distribution and normal distribution, and the 'skew' command along\n  with its parameters and usage.",
    "keywords": [
      "skewness",
      "symmetric distribution",
      "asymmetry",
      "normal distribution",
      "distortion",
      "skew command",
      "command parameters"
    ]
  },
  "forex.qa.spread": {
    "title": "spread",
    "description": "A documentation page detailing how to use the spread measurement tool.\n  The page includes parameters, usage, and visuals to guide the user.",
    "keywords": [
      "spread measurement",
      "rolling spread",
      "usage",
      "parameters",
      "n_window",
      "window length"
    ]
  },
  "forex.qa.summary": {
    "title": "summary",
    "description": "This page provides a detailed guide on how to use the 'summary' function.\n  This powerful command provides key summary statistics without requiring any additional\n  parameters. Users can leverage such data insights for data analysis and stock market\n  research.",
    "keywords": [
      "data analysis",
      "summary function",
      "statistical data",
      "stock market research",
      "data insight",
      "parameter-less commands"
    ]
  },
  "forex.qa.unitroot": {
    "title": "unitroot",
    "description": "This page offers a detailed guide on the use of the unit root function\n  in testing stationarity, parameters included, and usage examples.",
    "keywords": [
      "unit root",
      "stationarity",
      "ADF",
      "KPSS",
      "regression type",
      "code examples"
    ]
  },
  "forex.ta.ad": {
    "title": "ad",
    "description": "The page delves into the Accumulation/Distribution Line, a valuable tool\n  in trading analysis, explaining its comparison to other indicators and its usage\n  in predicting price movements.",
    "keywords": [
      "Accumulation/Distribution Line",
      "On Balance Volume",
      "trading analysis",
      "price prediction",
      "close location value"
    ]
  },
  "forex.ta.adx": {
    "title": "adx",
    "description": "The page provides a detailed explanation of the ADX, a Welles Wilder\n  moving average of the Directional Movement Index (DX). It explains the ADX interpretation\n  and its usage along with some relevant parameters.",
    "keywords": [
      "ADX",
      "Welles Wilder",
      "Directional Movement Index",
      "DX",
      "ADX interpretation",
      "ADX usage",
      "ADX parameters"
    ]
  },
  "forex.ta.aroon": {
    "title": "aroon",
    "description": "Learn about the Aroon Indicator, a tool that shows when a new trend is\n  dawning in market analysis. Understand its parameters, usage and visual representation.",
    "keywords": [
      "Aroon Indicator",
      "Market Analysis",
      "New Trend",
      "Upward Trend",
      "Downward Trend",
      "Aroon Up",
      "Aroon Down",
      "Crossovers"
    ]
  },
  "forex.ta.bbands": {
    "title": "bbands",
    "description": "Understand Bollinger Bands - an indicator of overbought or oversold conditions\n  in trading with parameters such as n_length, n_std, and s_mamode. The document includes\n  information on usage, parameters, and graphical representation.",
    "keywords": [
      "Bollinger Bands",
      "moving average",
      "volatility",
      "overbought",
      "oversold",
      "support",
      "resistance",
      "price target",
      "bbands",
      "n_length",
      "n_std",
      "s_mamode"
    ]
  },
  "forex.ta.cci": {
    "title": "cci",
    "description": "A detailed guide on the CCI or Commodity Channel Index, its usage, parameters\n  and its role in detecting market trends and facilitating price correction.",
    "keywords": [
      "CCI",
      "Commodity Channel Index",
      "CCI usage",
      "market trends",
      "price correction",
      "overbought conditions",
      "oversold conditions",
      "CCI parameters"
    ]
  },
  "forex.ta.cg": {
    "title": "cg",
    "description": "This page details the Center of Gravity (COG) indicator that aids in\n  predicting future price movements. Instructions regarding its usage and parameters\n  are also outlined, particularly suitable for range-bound markets.",
    "keywords": [
      "Center of Gravity indicator",
      "COG",
      "oscillators",
      "price reversals",
      "range-bound markets",
      "price predictions",
      "asset price change",
      "trading",
      "parameters",
      "trending market",
      "speculate"
    ]
  },
  "forex.ta.donchian": {
    "title": "donchian",
    "description": "Discover how Donchian Channels, generated by moving average calculations,\n  form an indicator through upper and lower bands around a midrange. Learn how to\n  use the donchian python code and understand the parameters involved.",
    "keywords": [
      "Donchian Channels",
      "moving average calculations",
      "indicator",
      "upper band",
      "lower band",
      "midrange",
      "median band",
      "highest price",
      "lowest price",
      "security",
      "N periods",
      "Donchian Channel",
      "parameters",
      "n_length_upper",
      "n_length_lower",
      "length",
      "usage",
      "donchian"
    ]
  },
  "forex.ta.ema": {
    "title": "ema",
    "description": "A guide to understanding and using the Exponential Moving Average, a\n  fundamental tool in technical analysis with a focus on its application.",
    "keywords": [
      "Exponential Moving Average",
      "technical analysis",
      "moving average",
      "EMA",
      "cumulative calculation",
      "data responsiveness",
      "EMA use",
      "EMA parameters"
    ]
  },
  "forex.ta.fib": {
    "title": "fib",
    "description": "Discover how to calculate fibonacci retracement levels with our flexible\n  parameters. Perfect for financial analysts and traders.",
    "keywords": [
      "fib",
      "fibonacci retracement",
      "financial tool",
      "trading",
      "parameters"
    ]
  },
  "forex.ta.fisher": {
    "title": "fisher",
    "description": "Documentation on the Fisher Transform, a technical indicator used to\n  highlight trends and potential turning points in asset prices.",
    "keywords": [
      "Fisher Transform",
      "technical indicator",
      "John F. Ehlers",
      "Gaussian normal distribution",
      "extreme prices",
      "turning points",
      "price of an asset",
      "trend",
      "price waves"
    ]
  },
  "forex.ta.load": {
    "title": "load",
    "description": "This documentation page supports users in stock analysis by guiding them\n  on how to load a stock ticker. It explains various parameters such as market source,\n  date ranges, pre/after market hours, and periodicity of data. It also includes guidance\n  for loading custom files and managing data at different frequencies.",
    "keywords": [
      "Load stock ticker",
      "Stock analysis",
      "Data source",
      "Indian ticker",
      "Market analysis",
      "Intraday stock minutes",
      "Pre/After market hours",
      "Load custom file",
      "Monthly data",
      "Weekly data"
    ]
  },
  "forex.ta.macd": {
    "title": "macd",
    "description": "This page describes the Moving Average Convergence Divergence (MACD)\n  tool used for trend changes in market conditions. It explains the concept, usage\n  and different parameters. Information about how these parameters influence and indicate\n  the onset of new trend direction, overbought or oversold conditions is also provided.",
    "keywords": [
      "MACD",
      "Moving Average Convergence Divergence",
      "Exponential Moving Averages",
      "trend changes",
      "overbought conditions",
      "oversold conditions",
      "Divergence",
      "buy signal",
      "sell signal"
    ]
  },
  "forex.ta.obv": {
    "title": "obv",
    "description": "On Balance Volume (OBV) is a technical analysis indicator that uses volume\n  flow to predict changes in stock price. The OBV measures buying and selling pressure\n  and is often used to confirm price trends or warn of potential price reversals.",
    "keywords": [
      "On Balance Volume",
      "OBV",
      "technical analysis",
      "stock price prediction",
      "price trends",
      "price reversals",
      "stock market"
    ]
  },
  "forex.ta.rsi": {
    "title": "rsi",
    "description": "Detailed documentation on how to use the Relative Strength Index (RSI),\n  a key trading indicator. The page includes information on parameters such as n_length,\n  n_scalar, and n_drift, as well as how to interpret the RSI.",
    "keywords": [
      "RSI",
      "Relative Strength Index",
      "price movements",
      "overbought/oversold indicator",
      "price divergence",
      "n_length",
      "n_scalar",
      "n_drift",
      "technical analysis",
      "trading indicator"
    ]
  },
  "forex.ta.sma": {
    "title": "sma",
    "description": "This page explains the Simple Moving Average (sma), a method used to\n  filter noise and identify trends in data by averaging the previous set of values\n  within a given time period. It includes the usage and parameter details.",
    "keywords": [
      "sma",
      "moving averages",
      "simple moving average",
      "filter noise",
      "identify trends",
      "time period",
      "n_length",
      "n_offset"
    ]
  },
  "forex.ta.stoch": {
    "title": "stoch",
    "description": "The page provides detailed information about the Stochastic Oscillator\n  trading tool. It describes the principles of operation, situations of overbought\n  and oversold conditions, and offers instructions for its usage. It also specifies\n  parameters and their functionality, including time periods of fastk, slowd, and\n  slowk moving averages.",
    "keywords": [
      "Stochastic Oscillator",
      "Overbought condition",
      "Oversold condition",
      "Fast %D",
      "Slow %D",
      "Buy signal",
      "Sell signal",
      "Raw %K",
      "Trading range",
      "N_fastkperiod",
      "N_slowdperiod",
      "N_slowkperiod",
      "Fastk moving average",
      "Slowk moving average",
      "Slowd moving average"
    ]
  },
  "forex.ta.zlma": {
    "title": "zlma",
    "description": "The ZLMA (Zero Lag Exponential Moving Average) indicator page covers\n  the concept, usage, and parameters like n_length and n_offset. This indicator, developed\n  by John Ehlers and Ric Way, is used for moving average calculation on de-lagged\n  data. The page also provides a visual representation of the zlma method.",
    "keywords": [
      "zlma",
      "zero lag exponential moving average",
      "EMA",
      "John Ehlers",
      "Ric Way",
      "moving average calculation",
      "lag",
      "de-lagged data",
      "n_length",
      "n_offset"
    ]
  },
  "funds.alswe": {
    "title": "alswe",
    "description": "A documentation page for the 'alswe' tool providing allocation insights\n  for a Swedish fund. Includes parameters for focus on country, sector, or holding\n  levels.",
    "keywords": [
      "allocation",
      "swedish fund",
      "alswe",
      "fund exposure",
      "fund allocation",
      "sector",
      "country",
      "holding"
    ]
  },
  "funds.country": {
    "title": "country",
    "description": "This page provides information on how to set a country for funds. It\n  explains the usage and parameters needed for this process, primarily focusing on\n  the country selection parameter.",
    "keywords": [
      "country",
      "funds",
      "usage",
      "parameters",
      "name",
      "select"
    ]
  },
  "funds.equity": {
    "title": "equity",
    "description": "This is a documentation page for the 'equity' command, which displays\n  fund equity holdings. The page also explains how to use the command and mentions\n  that it has no parameters.",
    "keywords": [
      "equity",
      "fund equity holdings"
    ]
  },
  "funds.info": {
    "title": "info",
    "description": "The page provides a detailed guide on how to get fund information using\n  a specific Python command. It also discusses the usage of the command and its parameters.",
    "keywords": [
      "Fund Information",
      "Usage",
      "Command Parameters"
    ]
  },
  "funds.infoswe": {
    "title": "infoswe",
    "description": "The infoswe documentation page provides details about how to show fund\n  info of a Swedish fund. It includes usage and parameters instruction for infoswe.",
    "keywords": [
      "infoswe",
      "Swedish fund info",
      "fund information",
      "usage",
      "parameters",
      "instruction"
    ]
  },
  "funds.load": {
    "title": "load",
    "description": "This page provides information about the 'load' feature designed to retrieve\n  historical data. It details the usage and various parameters with their functions.",
    "keywords": [
      "historical data",
      "load function",
      "fund search",
      "date range",
      "parameters"
    ]
  },
  "funds.overview": {
    "title": "overview",
    "description": "This page provides an overview of her selected country's funds. You'll\n  learn how to limit the number of search results shown.",
    "keywords": [
      "funds",
      "country-specific",
      "overview",
      "search",
      "limit"
    ]
  },
  "funds.plot": {
    "title": "plot",
    "description": "This page provides guidance on how to plot historical data. It includes\n  information on the usage of the plot command and explains that there are no parameters\n  required.",
    "keywords": [
      "plot",
      "historical data",
      "parameters",
      "usage",
      "data visualization",
      "graph",
      "data analysis"
    ]
  },
  "funds.search": {
    "title": "search",
    "description": "This page provides search features for mutual funds in a selected country\n  based on various selectable fields. It incorporates features of result sorting and\n  limiting, displayed in either ascending or descending order.",
    "keywords": [
      "Search",
      "Mutual Funds",
      "Country",
      "Fields",
      "Fund Info",
      "Data Sorting",
      "Results Limit",
      "Ascending Order",
      "Descending Order"
    ]
  },
  "funds.sector": {
    "title": "sector",
    "description": "This page explains how to show fund sector weighting using a command-line\n  tool, providing usage instructions and parameter details.",
    "keywords": [
      "fund sector weighting",
      "command-line tool",
      "usage instructions",
      "parameter details"
    ]
  },
  "futures.curve": {
    "title": "curve",
    "description": "Documentation page for the 'curve' command in Python, used to display\n  futures curve sourced from YahooFinance. Provides usage example and a comprehensive\n  list of financial ticker parameters.",
    "keywords": [
      "curve documentation",
      "curve usage",
      "futures curve",
      "financial parameter",
      "financial trading",
      "YahooFinance"
    ]
  },
  "futures.historical": {
    "title": "historical",
    "description": "This documentation page provides the user with instructions on how to\n  display futures historical data. Certain parameters like ticker data, start date,\n  and expiry date can be specified to customize the output according to individual\n  needs.",
    "keywords": [
      "display futures historical",
      "futures timeseries",
      "Ticker data",
      "historical data",
      "future expiry date"
    ]
  },
  "futures.search": {
    "title": "search",
    "description": "A detailed guide on how to use the search feature in YahooFinance for\n  futures. Learn how to choose different parameters like exchange, category and description\n  for a more specific search.",
    "keywords": [
      "YahooFinance Search",
      "Futures Search Tool",
      "YahooFinance Futures",
      "Search Exchange Futures",
      "Search Category Futures"
    ]
  },
  "portfolio.alloc": {
    "title": "alloc",
    "description": "The page serves as a documentation for 'alloc' - a python function that\n  helps users understand their portfolio's allocation to different assets or sectors\n  compared to a benchmark. It includes detailed usage instructions, parameters, and\n  examples of how to use the function.",
    "keywords": [
      "alloc",
      "asset allocation",
      "sector allocation",
      "benchmark comparison",
      "portfolio management"
    ]
  },
  "portfolio.attrib": {
    "title": "attrib",
    "description": "The page provides detailed information on how to use the 'attrib' command\n  in order to display portfolio attribution compared to the S&P 500. It invites to\n  choose between relative or absolute attribution values and to view raw attribution\n  values in a table. The users can select the period for which they want to calculate\n  the attribution.",
    "keywords": [
      "portfolio attribution",
      "S&P 500 comparison",
      "attribution calculation",
      "relative attribution values",
      "absolute attribution values",
      "attrib command",
      "raw attribution values"
    ]
  },
  "portfolio.bench": {
    "title": "bench",
    "description": "This page provides a detailed guideline on how to load in benchmarks\n  for a portfolio based on the ticker. It elaborates the usage of the 'bench' command\n  in python, its parameters, choices and gives practical examples of its application.",
    "keywords": [
      "benchmark",
      "portfolio",
      "SPDR S&P 500 ETF Trust (SPY)",
      "iShares Core S&P 500 ETF (IVV)",
      "Vanguard Total Stock Market ETF (VTI)",
      "Vanguard S&P 500 ETF (VOO)",
      "Invesco QQQ Trust (QQQ)",
      "full_shares",
      "shares",
      "choices",
      "parameters",
      "Vanguard FTSE Developed Markets ETF (VEA)"
    ]
  },
  "portfolio.distr": {
    "title": "distr",
    "description": "This page provides information on how to compute the distribution of\n  daily returns with 'distr'. It includes details on its usage, parameters and choices\n  for the period.",
    "keywords": [
      "distr",
      "daily returns",
      "compute distribution",
      "usage",
      "parameters",
      "period",
      "file",
      "loaded",
      "default",
      "optional",
      "choices"
    ]
  },
  "portfolio.dret": {
    "title": "dret",
    "description": "The dret page is about getting daily returns for specific periods. Users\n  can modify periods as 3y, 5y, 10y, or select all for the entire duration. It also\n  clarifies the usage and parameters in detail.",
    "keywords": [
      "dret",
      "daily returns",
      "period",
      "year returns",
      "3y",
      "5y",
      "10y",
      "all",
      "usage"
    ]
  },
  "portfolio.es": {
    "title": "es",
    "description": "This documentation page provides guidance on how to use the Expected\n  Shortfall (ES) function of the selected portfolio. It includes its usage, parameters\n  including distribution and percentile, and examples.",
    "keywords": [
      "Expected Shortfall",
      "ES function",
      "portfolio",
      "parameters",
      "distribution",
      "percentile",
      "portfolio return",
      "mean of portfolios"
    ]
  },
  "portfolio.holdp": {
    "title": "holdp",
    "description": "A guide on how to use the holdp function to display holdings of assets\n  in percentage. Includes usage, parameters and additional options.",
    "keywords": [
      "display holdings",
      "assets percentage",
      "holdp function",
      "Holdings management",
      "Portfolio management"
    ]
  },
  "portfolio.holdv": {
    "title": "holdv",
    "description": "The page provides detailed information on the usage, the required and\n  optional parameters of 'holdv' - a function used to display the holdings of assets.\n  It specifically features the 'unstack' parameter for summing all assets value over\n  time.",
    "keywords": [
      "holdv",
      "assets",
      "unstack",
      "value",
      "time",
      "usage",
      "parameters"
    ]
  },
  "portfolio.load": {
    "title": "load",
    "description": "The 'load' function allows users to load their portfolio transactions\n  from a given file, optionally assigning a name and setting a risk-free rate. The\n  loaded portfolio details will be presented in a detailed table showcasing each transaction.",
    "keywords": [
      "load",
      "portfolio transactions",
      "parameters",
      "risk free rate",
      "file",
      "name",
      "examples",
      "portfolio",
      "stocks"
    ]
  },
  "portfolio.maxdd": {
    "title": "maxdd",
    "description": "This page provides a detailed guideline on how to use 'maxdd' command\n  in Python for managing portfolio. It allows users to show maximum portfolio drawdown\n  and it operates without parameters.",
    "keywords": [
      "maxdd",
      "portfolio",
      "drawdown",
      "usage",
      "no parameters"
    ]
  },
  "portfolio.metric": {
    "title": "metric",
    "description": "This page provides detailed instructions on how to display a chosen metric\n  for different periods. It discusses parameters such as volatility, sharpe, sortino,\n  etc. and how to set the risk-free rate for calculations.",
    "keywords": [
      "metric",
      "risk free rate",
      "volatility",
      "sharpe ratio",
      "sortino ratio",
      "max drawdown",
      "R square",
      "skew",
      "kurtosis",
      "gain to pain",
      "tracker",
      "information ratio",
      "tail ratio",
      "common sense ratio",
      "jensens alpha",
      "calmar ratio",
      "kelly criterion",
      "payoff ratio",
      "profit factor"
    ]
  },
  "portfolio.mret": {
    "title": "mret",
    "description": "This page is about the mret tool that helps to calculate monthly returns.\n  It contains information about its usage, parameters, and various options.",
    "keywords": [
      "mret",
      "monthly returns",
      "heatmap",
      "parameters",
      "usage",
      "periods",
      "choices"
    ]
  },
  "portfolio.om": {
    "title": "om",
    "description": "A documentation page providing information about the om function that\n  calculates the omega ratio of a selected portfolio with customizable start and end\n  parameters.",
    "keywords": [
      "omega ratio",
      "portfolio",
      "start parameter",
      "end parameter",
      "om function"
    ]
  },
  "portfolio.perf": {
    "title": "perf",
    "description": "The 'perf' function displays the performance metrics of both individual\n  trades and the total portfolio against a given benchmark. This data is crucial for\n  investors and traders to understand how their portfolio is performing compared to\n  a standard benchmark.",
    "keywords": [
      "perf",
      "benchmark",
      "trade performance",
      "portfolio performance",
      "performance metrics",
      "investment tracking"
    ]
  },
  "portfolio.rbeta": {
    "title": "rbeta",
    "description": "This page provides a detailed guide on the use of the 'rbeta' function\n  to show rolling beta of a portfolio versus a benchmark over different time periods.\n  It covers the available periods and how to use them.",
    "keywords": [
      "rbeta",
      "rolling beta",
      "portfolio vs benchmark",
      "portfolio period",
      "rolling window"
    ]
  },
  "portfolio.rsharpe": {
    "title": "rsharpe",
    "description": "The page provides comprehensive instructions on how to use the 'rsharpe'\n  function, which is a tool for comparing a portfolio against a benchmark. The function\n  allows for customization based on the desired period and risk free rate.",
    "keywords": [
      "rsharpe",
      "rolling sharpe portfolio",
      "benchmarking",
      "risk free rate",
      "portfolio period",
      "portfolio calculation",
      "financial tools"
    ]
  },
  "portfolio.rvol": {
    "title": "rvol",
    "description": "Rvol page shows the rolling volatility portfolio versus benchmark. It\n  is primarily used to analyse the market's volatility over different periods.",
    "keywords": [
      "rvol",
      "rolling volatility",
      "portfolio",
      "benchmark",
      "market analysis",
      "volatility analysis",
      "time period"
    ]
  },
  "portfolio.show": {
    "title": "show",
    "description": "This documentation page describes the 'show' command, which presents\n  a table of transactions with no parameters required. It includes usage, parameters,\n  and examples.",
    "keywords": [
      "Show command",
      "Transactions table",
      "No parameters",
      "Portfolio",
      "Instructions",
      "Python codes",
      "Sector",
      "Industry",
      "Country",
      "Region",
      "Price",
      "Quantity",
      "Fees",
      "Premium",
      "Investment",
      "Side",
      "Currency"
    ]
  },
  "portfolio.summary": {
    "title": "summary",
    "description": "The page provides a detailed guide on how to display a summary of portfolio\n  vs benchmark. It explains the usage, parameters, and choices available.",
    "keywords": [
      "summary",
      "portfolio",
      "benchmark",
      "Usage",
      "parameters",
      "period",
      "risk_free_rate",
      "calculations"
    ]
  },
  "portfolio.var": {
    "title": "var",
    "description": "Learn how to calculate the Value at Risk (VaR) of your portfolio using\n  different parameters and statistical methods. This guide provides examples and an\n  explanation of all the options.",
    "keywords": [
      "Value at Risk",
      "VaR",
      "portfolio",
      "portfolio return",
      "Cornish-Fisher-Expansion",
      "student-t distribution",
      "percentile",
      "VaR calculations",
      "Historical VaR"
    ]
  },
  "portfolio.yret": {
    "title": "yret",
    "description": "This page provides a guide on how to use the command 'yret' for determining\n  the end of year returns. It offers details on the permissible period selections\n  and their usage.",
    "keywords": [
      "yret",
      "usage",
      "parameters",
      "end of year returns",
      "period"
    ]
  },
  "portfolio.brokers.ally.balances": {
    "title": "balances",
    "description": "Learn about the balances command and its usage in marketing accounting.\n  No parameters are involved in this command's application.",
    "keywords": [
      "balances",
      "marketing",
      "account balance",
      "usage",
      "parameters"
    ]
  },
  "portfolio.brokers.ally.history": {
    "title": "history",
    "description": "This page provides information on the account transaction history feature.\n  It shows users how to set a limit on the number of recent transactions to display.",
    "keywords": [
      "Account transaction history",
      "Usage",
      "Parameters",
      "Limit",
      "Transactions"
    ]
  },
  "portfolio.brokers.ally.holdings": {
    "title": "holdings",
    "description": "This documentation page provides information on how to view your trading\n  accounts on Ally using a command 'holdings'.",
    "keywords": [
      "Trading Accounts",
      "Ally",
      "Holdings",
      "Ally Trading"
    ]
  },
  "portfolio.brokers.ally.movers": {
    "title": "movers",
    "description": "This documentation page provides information on how to get stock movers\n  using Python command line. Detailed explanations for different parameters such as\n  list_type, exchange, and limit are included.",
    "keywords": [
      "stock movers",
      "Python command line",
      "list_type parameter",
      "exchange parameter",
      "limit parameter",
      "toplosers",
      "toppctlosers",
      "topvolume",
      "topactive",
      "topgainers",
      "toppctgainers",
      "American Stock Exchange",
      "New York Stock Exchange",
      "NASDAQ"
    ]
  },
  "portfolio.brokers.ally.quote": {
    "title": "quote",
    "description": "This page provides a guide on how to get stocks quotes using ticker symbols.\n  It details usage, parameters like ticker and describes how to select multiple stocks\n  to track at the same time.",
    "keywords": [
      "stock quote",
      "stock ticker",
      "stock market",
      "quotes"
    ]
  },
  "portfolio.brokers.coinbase.account": {
    "title": "account",
    "description": "Manage and display information about your trading accounts on Coinbase\n  with options to specify currency and access all account data.",
    "keywords": [
      "Coinbase",
      "Trading accounts",
      "Account information",
      "Currency value",
      "USD",
      "Trading",
      "Crypto trading"
    ]
  },
  "portfolio.brokers.coinbase.deposits": {
    "title": "deposits",
    "description": "The deposits page is a comprehensive guide on displaying a list of deposits\n  for your account. It provides details on usage, parameters like deposit type, limit,\n  sortby, reverse, and their defaults.",
    "keywords": [
      "deposits",
      "account",
      "internal_deposit",
      "deposit",
      "limit",
      "sortby",
      "reverse"
    ]
  },
  "portfolio.brokers.coinbase.history": {
    "title": "history",
    "description": "This page displays details on how to fetch account history using python\n  command. It includes a list of parameters like coin symbol, account ID, and limit\n  parameter with their optional values and defaults.",
    "keywords": [
      "account history",
      "usage",
      "parameters",
      "python command",
      "coin symbol",
      "account id",
      "limit parameter",
      "BTC"
    ]
  },
  "portfolio.brokers.coinbase.orders": {
    "title": "orders",
    "description": "The page explains how open orders can be listed. It provides information\n  on usage and parameters such as limit, sortby, and reverse.",
    "keywords": [
      "orders",
      "open orders",
      "parameters",
      "limit",
      "sortby",
      "reverse",
      "descending order",
      "ascending order",
      "raw data"
    ]
  },
  "portfolio.brokers.degiro.cancel": {
    "title": "cancel",
    "description": "This page provides detailed guidance on how to cancel an order using\n  id as the parameter. It explains the usage, parameters, and possible choices.",
    "keywords": [
      "cancel",
      "order",
      "id",
      "usage",
      "parameters"
    ]
  },
  "portfolio.brokers.degiro.companynews": {
    "title": "companynews",
    "description": "This page contains a guide on how to use the 'companynews' tool and set\n  its parameters such as SYMBOL, which represents the company's ISIN code; LIMIT for\n  the number of news to display; OFFSET to adjust the displayed news; and LANGUAGES\n  to define the languages in which the news appears.",
    "keywords": [
      "company news tool",
      "usage guide",
      "ISIN code",
      "news display",
      "display offset",
      "language settings"
    ]
  },
  "portfolio.brokers.degiro.create": {
    "title": "create",
    "description": "This is a technical page with detailed instructions on how to create\n  and use parameters including action, product, symbol, price, size, up_to, duration,\n  type, and their respective choices in programming. This covers various market operations\n  including buy, sell, GTD, GTC, limit, market, stop-limit, and stop-loss.",
    "keywords": [
      "create",
      "usage",
      "parameters",
      "action",
      "product",
      "symbol",
      "price",
      "size",
      "up_to",
      "duration",
      "type",
      "order",
      "buy",
      "sell",
      "gtd",
      "gtc",
      "limit",
      "market",
      "stop-limit",
      "stop-loss"
    ]
  },
  "portfolio.brokers.degiro.hold": {
    "title": "hold",
    "description": "The document page provides instructions on how to use the 'hold' command\n  in Python, which requires no parameters.",
    "keywords": [
      "hold command",
      "usage",
      "no parameters"
    ]
  },
  "portfolio.brokers.degiro.lastnews": {
    "title": "lastnews",
    "description": "Documentation on the 'lastnews' function in Python. Features include\n  the option to limit the number of displayed news.",
    "keywords": [
      "lastnews",
      "news display",
      "limit parameter"
    ]
  },
  "portfolio.brokers.degiro.login": {
    "title": "login",
    "description": "This page provides instructions on how to login using one-time-password\n  for 2FA. It includes parameters' description and usage.",
    "keywords": [
      "login",
      "Usage",
      "Parameters",
      "One time password",
      "2FA"
    ]
  },
  "portfolio.brokers.degiro.logout": {
    "title": "logout",
    "description": "This page provides information about how to use the logout command in\n  python. It includes the usage of this command and the details about its parameters.",
    "keywords": [
      "logout",
      "usage",
      "parameters"
    ]
  },
  "portfolio.brokers.degiro.lookup": {
    "title": "lookup",
    "description": "A detailed guide on how to use the lookup command in python, showing\n  parameters such as search_text, limit, and offset and their usage.",
    "keywords": [
      "lookup command",
      "search_text",
      "limit",
      "offset",
      "command parameters",
      "usage guide",
      "coding documentation"
    ]
  },
  "portfolio.brokers.degiro.paexport": {
    "title": "paexport",
    "description": "Detailed usage guide and parameters of the 'paexport' Python command.\n  This includes instructions on setting the start and end date, along with the usage\n  of different currencies.",
    "keywords": [
      "paexport",
      "usage",
      "parameters",
      "currency",
      "USD"
    ]
  },
  "portfolio.brokers.degiro.pending": {
    "title": "pending",
    "description": "This page discusses the 'pending' concept, its usage in Python, and emphasizes\n  that the command does not require any parameters. It is a useful resource for those\n  interested in understanding and applying this 'pending' operation.",
    "keywords": [
      "pending",
      "usage",
      "parameters"
    ]
  },
  "portfolio.brokers.degiro.topnews": {
    "title": "topnews",
    "description": "The topnews function provides users with the most current and breaking\n  news. It's simple to use and doesn't require any parameters, keeping you informed\n  about the world's events with minimal effort.",
    "keywords": [
      "topnews",
      "news",
      "up to date",
      "current events",
      "news updates",
      "daily news"
    ]
  },
  "portfolio.brokers.degiro.update": {
    "title": "update",
    "description": "The marketing website page 'update' is primarily focused on how to update\n  orders by their ID and price. Learn the usage and understand the parameters in detail.",
    "keywords": [
      "Order update",
      "docusaurus SEO",
      "price updating",
      "Order's id",
      "docusaurus parameters"
    ]
  },
  "portfolio.brokers.robinhood.history": {
    "title": "history",
    "description": "Learn about the usage and parameters for accessing historical portfolio\n  information with spans ranging from a day to all accessible history and intervals\n  from 5 minutes to a week.",
    "keywords": [
      "historical portfolio info",
      "portfolio history",
      "historical data",
      "interval data",
      "span of data",
      "usage"
    ]
  },
  "portfolio.brokers.robinhood.holdings": {
    "title": "holdings",
    "description": "This Docusaurus page provides information on how to use the 'holdings'\n  function to display information about your trading accounts on Robinhood. It also\n  covers usage and details about parameters.",
    "keywords": [
      "holdings",
      "trading accounts",
      "Robinhood",
      "account info",
      "trading"
    ]
  },
  "portfolio.po.blacklitterman": {
    "title": "blacklitterman",
    "description": "This article provides an overview of how to optimize your portfolio using\n  Black Litterman estimates. It includes a detailed guide on parameter usage, command\n  line options, and examples to get you up to speed with the utility.",
    "keywords": [
      "Black Litterman",
      "portfolio optimization",
      "portfolio analysis",
      "investment strategies",
      "benchmarking",
      "investment objectives",
      "risk aversion",
      "financial data analysis",
      "financial modelling",
      "portfolio risk management",
      "investment risk"
    ]
  },
  "portfolio.po.dividend": {
    "title": "dividend",
    "description": "The 'dividend' page offers detailed explanations on how to utilize dividend-related\n  functionalities for portfolio optimization, showcasing parameters such as risk measure,\n  nan-fill-method, historic period, and others. Each parameter is explained in detail\n  and comes with default settings, optional values, and choices to customize as per\n  the user's choice.",
    "keywords": [
      "docusaurus",
      "dividend",
      "portfolio optimization",
      "risk measure",
      "nan-fill-method",
      "historic period",
      "parameters",
      "portfolio weights",
      "expected return",
      "volatility",
      "Sharpe ratio"
    ]
  },
  "portfolio.po.ef": {
    "title": "ef",
    "description": "Detailed instructions on using the 'ef' function in portfolio optimization.\n  This function plots random portfolios based on their risk and returns, providing\n  visualization of the efficient frontier. It includes parameters for risk measures,\n  nan filling methods, financial dataset periods, return calculations, and outlier\n  handling.",
    "keywords": [
      "ef function",
      "portfolio risk and return",
      "efficient frontier",
      "portfolio optimization",
      "risk measures",
      "random portfolios",
      "CVaR",
      "EVaR",
      "Maximum Drawdown",
      "Mean Absolute Deviation",
      "nan_fill_method",
      "financial dataset",
      "yfinance data",
      "risk-free rate",
      "logarithmic returns",
      "return frequency",
      "outlier threshold",
      "simulation parameters"
    ]
  },
  "portfolio.po.equal": {
    "title": "equal",
    "description": "The page provides information about an equally weighted portfolio optimization\n  command 'equal'. It lists and explains the parameters for usage like risk measure,\n  nan fill method, return frequency, and more. The page is useful for individuals\n  looking for information about portfolio optimization and the usage of specific financial\n  indicators.",
    "keywords": [
      "docusaurus",
      "equally weighted portfolio",
      "portfolio optimization",
      "risk measure",
      "nan fill method",
      "historic period",
      "log returns",
      "return frequency",
      "risk-free rate",
      "significance level",
      "allocation",
      "financial data analysis"
    ]
  },
  "portfolio.po.file": {
    "title": "file",
    "description": "This documentation page provides details about the 'file' parameter usage\n  in Python code. The page also includes default files and optional choices.",
    "keywords": [
      "file parameter",
      "python code usage",
      "default files",
      "optional file choices",
      "OpenBB_Parameters_Template",
      "parameters .ini files"
    ]
  },
  "portfolio.po.herc": {
    "title": "herc",
    "description": "The page contains details about using HERC (Hierarchical Equal Risk Contribution)\n  for building a portfolio. It covers its usage, parameters, and a clear step-by-step\n  example.",
    "keywords": [
      "Hierarchical Equal Risk Contribution",
      "Portfolio",
      "HERC",
      "Risk Measurement",
      "SEO improvement",
      "Financial trading",
      "Financial portfolio",
      "Risk management",
      "Codependence",
      "Covariance",
      "Risk measure optimization"
    ]
  },
  "portfolio.po.hrp": {
    "title": "hrp",
    "description": "This technical documentation page provides comprehensive instructions\n  for using 'hrp', a Python command for creating a hierarchical risk parity portfolio.\n  It includes detailed information on usage, parameters, and examples for building\n  custom portfolios optimized for specific risk parameters. Tools like codependence\n  matrix, covariance matrix, CVaR, Tail Gini and hierarchical clustering methodologies\n  are explored in depth.",
    "keywords": [
      "hrp",
      "hierarchical risk parity portfolio",
      "portfolio optimization",
      "risk management",
      "codependence matrix",
      "covariance matrix",
      "risk measure",
      "CVaR",
      "Tail Gini",
      "hierarchical clustering"
    ]
  },
  "portfolio.po.load": {
    "title": "load",
    "description": "This page provides documentation on how to load a file of stocks tickers\n  with optional categories using Python. It contains information on the parameters\n  and file options that are available.",
    "keywords": [
      "Load",
      "Stocks",
      "Tickers",
      "File",
      "Categories",
      "Parameters",
      "Allocation",
      "OpenBB_Parameters_Template_v1.0.0.xlsx",
      "defaults.ini",
      "dany.ini",
      "james.ini",
      "example.ini",
      "dd.ini"
    ]
  },
  "portfolio.po.maxdecorr": {
    "title": "maxdecorr",
    "description": "The maxdecorr function offers users the ability to maximize their portfolio's\n  decorrelation using several covariance methods. It gives various options for portfolio\n  allocation, short and long positions, and data interpolation methods. The function\n  leverages yfinance data to produce optimized results. This is a tool for anyone\n  working with financial markets, portfolio management, or financial method development.",
    "keywords": [
      "maxdecorr",
      "portfolio optimization",
      "decorrelation",
      "covariance methods",
      "data analysis",
      "portfolio allocation",
      "financial markets",
      "data interpolation",
      "yfinance data",
      "financial method",
      "short positions",
      "long positions"
    ]
  },
  "portfolio.po.maxdiv": {
    "title": "maxdiv",
    "description": "The maxdiv page is a comprehensive guide for maximizing portfolio diversification\n  with parameters like covariance matrix estimation method, smoothing factor for ewma\n  estimators, allocations, return methods, tolerances for nan values, and more. It\n  also includes examples of use.",
    "keywords": [
      "maxdiv",
      "portfolio diversification",
      "covariance matrix",
      "smoothing factor",
      "short allocation",
      "nan fill method",
      "historic period",
      "log returns",
      "return frequency",
      "long allocation"
    ]
  },
  "portfolio.po.maxret": {
    "title": "maxret",
    "description": "The 'maxret' function is designed to maximize the return of a portfolio.\n  It allows users to set multiple parameters and constraints like target return and\n  risk, portfolio allocation, risk measure, and more. It supports various calculation\n  methods and can handle various types of data.",
    "keywords": [
      "portfolio optimization",
      "return maximization",
      "risk management",
      "financial data analysis",
      "historical data",
      "return calculation",
      "covariance estimation",
      "shrinkage method",
      "risk-free rate",
      "significance level",
      "CVaR",
      "EVaR",
      "CDaR",
      "MDD",
      "Sharp ratio"
    ]
  },
  "portfolio.po.maxsharpe": {
    "title": "maxsharpe",
    "description": "The maxsharpe page provides extensive information on maximizing the portfolio's\n  return/risk ratio. It provides usage and examples of parameters used in calculations\n  such as target_return, target_risk, expected_return, covariance, smoothing_factor_ewma,\n  short_allocation, and risk_measure.",
    "keywords": [
      "maxsharpe",
      "return risk ratio",
      "portfolio optimization",
      "target return",
      "target risk",
      "covariance",
      "risk measure",
      "short allocation",
      "expected return",
      "smoothing factor"
    ]
  },
  "portfolio.po.maxutil": {
    "title": "maxutil",
    "description": "Maxutil is a powerful Python tool used for portfolio optimization. The\n  page provides extensive information about the usage, parameters, and examples of\n  maximizing a risk-averse utility function. Navigate through the specifics, from\n  expected return methods to defining your risk measures and risk aversion parameters.",
    "keywords": [
      "maxutil",
      "risk averse utility function",
      "portfolio optimization",
      "financial tool",
      "financial software",
      "usage",
      "parameters",
      "examples",
      "expected return",
      "covariance",
      "risk measure",
      "risk aversion",
      "target return",
      "target risk",
      "risk-free rate"
    ]
  },
  "portfolio.po.minrisk": {
    "title": "minrisk",
    "description": "The minrisk page offers detailed instructions and examples on minimizing\n  a financial portfolio's risk using various estimators, risk measures and allocation\n  strategies. It provides comprehensive guidelines for portfolio management and analytics.",
    "keywords": [
      "portfolio risk minimization",
      "portfolio management",
      "risk measure",
      "financial portfolio optimization",
      "covariance estimation",
      "asset allocation",
      "portfolio analytics",
      "expected return estimation"
    ]
  },
  "portfolio.po.mktcap": {
    "title": "mktcap",
    "description": "The mktcap page provides comprehensive usage, parameters and examples\n  for creating a market cap weighted portfolio. The page is very useful for investors\n  and financial analysts looking for systematic ways to allocate their investments\n  based on market cap measurements.",
    "keywords": [
      "mktcap",
      "portfolio",
      "market cap",
      "weighted portfolio",
      "asset allocation",
      "risk measures",
      "investment strategy"
    ]
  },
  "portfolio.po.nco": {
    "title": "nco",
    "description": "Supplement to the nested cluster optimization (NCO) portfolio building\n  tool documentation. Offers comprehensive information on usage, parameters, and examples\n  of how to use the nco tool to optimize your investment portfolio. The topics covered\n  include codependence, covariance, risk measures, and cluster settings.",
    "keywords": [
      "nested clustered optimization",
      "nco",
      "portfolio building",
      "portfolio optimization",
      "codependence",
      "covariance",
      "risk measure",
      "correlation matrix",
      "portfolio parameters",
      "cluster",
      "asset allocation",
      "investment strategy"
    ]
  },
  "portfolio.po.plot": {
    "title": "plot",
    "description": "The plot page allows users to select and plot charts for various portfolios,\n  using a range of parameters and offering several optional features. It includes\n  different types of charts such as pie, histogram, drawdown, and risk contribution\n  charts. Different risk measures can be optimized, and users can control various\n  other factors such as the calculation frequency, the max percentage of accepted\n  NaN values, and the risk-free rate.",
    "keywords": [
      "plot",
      "charts",
      "portfolios",
      "risk measures",
      "drawdown chart",
      "risk contribution chart",
      "correlation matrix",
      "heatmap",
      "CVaR",
      "EVaR",
      "Maximum Drawdown",
      "risk-free rate",
      "significance level"
    ]
  },
  "portfolio.po.property": {
    "title": "property",
    "description": "This documentation defines the usage, parameters, and examples for the\n  'property' function. This function helps in creating a portfolio that is weighted\n  based on a selected property. It includes risk measure options, nan fill methods,\n  risk-free rates, significance levels, and more to optimize the portfolio. The description\n  helps in understanding the function's implementation for portfolio management.",
    "keywords": [
      "portfolio optimization",
      "property weighting",
      "risk measures",
      "yfinance data",
      "log returns",
      "return frequency",
      "risk-free rate",
      "outliers",
      "CVaR",
      "EVaR",
      "CDaR",
      "EDaR",
      "nan fill method",
      "historic period",
      "significance level",
      "long allocation"
    ]
  },
  "portfolio.po.relriskparity": {
    "title": "relriskparity",
    "description": "This page provides a detailed guide on how to build a relaxed risk parity\n  portfolio using the least squares approach. It includes usage instructions, parameters,\n  and examples.",
    "keywords": [
      "risk parity portfolio",
      "least squares approach",
      "portfolio optimization",
      "risk management",
      "investment strategies",
      "asset allocation",
      "yfinance data",
      "time series"
    ]
  },
  "portfolio.po.riskparity": {
    "title": "riskparity",
    "description": "This docusaurus page provides detailed information on how to build a\n  risk parity portfolio using the risk budgeting approach. The user can make use of\n  many available parameters and conditions to customize the portfolio and its conditions\n  as per their requirements.",
    "keywords": [
      "risk parity portfolio",
      "risk budgeting approach",
      "portfolio optimization",
      "portfolio parameters",
      "risk measures",
      "docusaurus documentation",
      "financial data analysis",
      "yfinance data"
    ]
  },
  "portfolio.po.rpf": {
    "title": "rpf",
    "description": "This page provides information on the usage and parameters of the 'rpf'\n  function, a tool used for removing portfolios.",
    "keywords": [
      "rpf",
      "portfolio management",
      "command line function",
      "programming documentation",
      "remove portfolios"
    ]
  },
  "portfolio.po.show": {
    "title": "show",
    "description": "The page provides command usage and parameters for the 'show' feature\n  which helps to display selected saved portfolios and its associated categories like\n  asset class, country, sector, industry with an option to allocate amount for long\n  term investments.",
    "keywords": [
      "show",
      "saved portfolios",
      "usage",
      "parameters",
      "portfolios",
      "categories",
      "long allocation",
      "asset class",
      "country",
      "sector",
      "industry"
    ]
  },
  "portfolio.po.parameters.arg": {
    "title": "arg",
    "description": "This page explains how to set different values for available arguments\n  using the 'arg' command in Python. It covers usage, parameters and available choices.",
    "keywords": [
      "arg command",
      "Python arguments",
      "setting argument values",
      "command-line arguments",
      "parameters",
      "choices"
    ]
  },
  "portfolio.po.parameters.load": {
    "title": "load",
    "description": "This page provides information on how to load portfolio risk parameters\n  using either ini or xlsx files. It demonstrates the command usage and details about\n  the 'file' parameter.",
    "keywords": [
      "load portfolio risk parameters",
      "ini files",
      "xlsx files",
      "parameter file usage"
    ]
  },
  "portfolio.po.parameters.save": {
    "title": "save",
    "description": "This documentation page provides information on the 'save' command in\n  reference to portfolio risk parameters. Learn about how to properly save your parameters\n  using python.",
    "keywords": [
      "save",
      "portfolio",
      "risk parameters",
      "file"
    ]
  },
  "portfolio.po.parameters.set": {
    "title": "set",
    "description": "This documentation page provides an understanding of the different portfolio\n  optimization models available. It explains how to use the set command in Python\n  to select a model from a list, including maxsharpe, minrisk, maxutil, and others.",
    "keywords": [
      "portfolio optimization models",
      "set command",
      "maxsharpe",
      "minrisk",
      "maxutil",
      "maxret",
      "maxdiv",
      "maxdecorr",
      "ef",
      "riskparity",
      "relriskparity",
      "hrp",
      "herc",
      "nco"
    ]
  },
  "portfolio.portfolio_analysis.group": {
    "title": "group",
    "description": "This page documents the 'group' function in python for displaying a portfolio\n  group by a given column. This includes an optional allocation column addition to\n  the dataframe, with usage and parameter details provided.",
    "keywords": [
      "Group Function",
      "Portfolio Group",
      "Allocation Column",
      "Marketing Parameters",
      "Dataframe Modification",
      "Group By Ticker",
      "Python Command"
    ]
  },
  "portfolio.portfolio_analysis.load": {
    "title": "load",
    "description": "This documentation page provides information on the 'load' function used\n  to get portfolio from predefined csv/json/xlsx files. It includes usage instructions\n  as well as details on parameters like 'sector', 'country', 'last_price', 'show_nan'\n  and 'path'.",
    "keywords": [
      "load function",
      "predefined portfolio files",
      "csv portfolio",
      "json portfolio",
      "xlsx portfolio",
      "sector parameter",
      "country parameter",
      "last_price parameter",
      "show_nan parameter",
      "path parameter",
      "portfolio retrieval",
      "portfolio documentation"
    ]
  },
  "portfolio.portfolio_analysis.view": {
    "title": "view",
    "description": "Understand how to view available portfolios in various formats using\n  the 'view' command. This page provides a comprehensive guide on the parameters used.",
    "keywords": [
      "portfolio view",
      "load portfolios",
      "csv portfolio",
      "json portfolio",
      "xlsx portfolio",
      "format command",
      "parameters guide"
    ]
  },
  "reports.run": {
    "title": "run",
    "description": "Learn how to effectively run a notebook from a specific location using\n  various parameters. This page also provides details about certain parameters such\n  as report parameters and the file to be loaded.",
    "keywords": [
      "run notebook",
      "usage",
      "parameters",
      "file loading",
      "report parameters",
      "OpenBBUserData",
      "custom reports"
    ]
  },
  "stocks.candle": {
    "title": "candle",
    "description": "This page provides a detailed guide on the usage of the 'candle' command\n  in Python, a tool for displaying historic stock data. It covers functionalities\n  such as plot display, data sorting and trendline addition.",
    "keywords": [
      "candle command",
      "historic stock data",
      "data visualization",
      "data sorting",
      "trendlines",
      "interactive plotly chart",
      "moving average",
      "log scale"
    ]
  },
  "stocks.load": {
    "title": "load",
    "description": "This documentation page provides detailed information on how to load\n  stock tickers using various parameters for analysis. Users can customize their usage\n  through options like start and end dates, interval, pre/after market hours, load\n  monthly or weekly data, among others.",
    "keywords": [
      "Stock Analysis",
      "Load Stock Tickers",
      "Investment Analysis",
      "Financial Data",
      "Stock Market",
      "Yahoo Finance",
      "Custom Stock Data",
      "Intraday Stock"
    ]
  },
  "stocks.news": {
    "title": "news",
    "description": "The News page presents the latest news from the company. Users can customize\n  news updates using specific parameters such as starting date, order, and news sources.",
    "keywords": [
      "company news",
      "news updates",
      "customize news",
      "news sources",
      "news order",
      "starting date",
      "latest news",
      "company updates",
      "article search",
      "news articles",
      "Python news script",
      "news parameters"
    ]
  },
  "stocks.quote": {
    "title": "quote",
    "description": "This page provides the information about the quote for a specific stock\n  ticker. It explains how to use the quote function in Python and provides the details\n  of the parameters that are used in this function. The primary parameter is the stock\n  ticker, also referred to as 's_ticker'.",
    "keywords": [
      "Quote",
      "Stock Ticker",
      "Parameters",
      "s_ticker",
      "USAGE",
      "Stocks"
    ]
  },
  "stocks.search": {
    "title": "search",
    "description": "The 'search' documentation provides a detailed guide to using various\n  search commands on our platform. This includes usage, parameters, and term definitions\n  for finding company tickers, filtering stocks based on country, sector, industry\n  or specific exchange country.",
    "keywords": [
      "Search Documentation",
      "Company Tickers",
      "Stock Market Search",
      "Search By Country",
      "Search By Sector",
      "Search By Industry",
      "Search By Exchange Country"
    ]
  },
  "stocks.tob": {
    "title": "tob",
    "description": "This page provides insights on how to use the 'tob' function to get the\n  top of a book for a loaded ticker from a selected exchange, explaining its parameters\n  and usage.",
    "keywords": [
      "tob function",
      "top of book",
      "loaded ticker",
      "selected exchange",
      "function usage",
      "parameters",
      "BZX",
      "EDGX",
      "BYX",
      "EDGA"
    ]
  },
  "stocks.ba.bullbear": {
    "title": "bullbear",
    "description": "This page provides information on the bullbear command, which prints\n  the bullbear sentiment based on the last 30 Stocktwits messages, as well as the\n  watchlist count. No parameters needed.",
    "keywords": [
      "bullbear",
      "stocktwits",
      "stock market sentiment",
      "stock trade",
      "stock watchlist count",
      "bullish",
      "bearish",
      "no parameters command",
      "stock messaging",
      "stock trade analysis"
    ]
  },
  "stocks.ba.getdd": {
    "title": "getdd",
    "description": "Getdd function retrieves top stocks' due diligence from Reddit with the\n  functionality of choosing a limit on the posts, number of prior days to search,\n  and the choice of searching through all flairs or focusing on specific flairs including\n  DD, technical analysis, Catalyst, News, Advice, and Chart.",
    "keywords": [
      "stock's due diligence",
      "Reddit",
      "getdd",
      "limit of posts",
      "number of prior days",
      "search through flairs",
      "'flairs: DD, technical analysis, Catalyst, News, Advice, Chart'",
      "ATVI free money",
      "'PTON: The safest investment'",
      "bottom on $FB",
      "Congress Trading & Retail Traders",
      "large market cap stocks"
    ]
  },
  "stocks.ba.headlines": {
    "title": "headlines",
    "description": "Provides information about how FinBrain Technologies collects financial\n  news headlines from numerous major sources to generate sentiment scores for over\n  4500 US stocks. It explores how they use deep learning algorithms for financial\n  analysis and prediction.",
    "keywords": [
      "FinBrain",
      "news headlines",
      "financial news sources",
      "sentiment scores",
      "US stocks",
      "deep learning algorithms",
      "prediction",
      "traders"
    ]
  },
  "stocks.ba.infer": {
    "title": "infer",
    "description": "The documentation guide on 'infer', a tool used for quick sentiment inference\n  from latest tweets that contain the ticker using vader sentiment analysis. It provides\n  parameters to set the tweet limit and also includes examples of usage",
    "keywords": [
      "infer",
      "vader sentiment analysis",
      "Twitter",
      "tweets",
      "sentiment inference",
      "stock",
      "limit"
    ]
  },
  "stocks.ba.interest": {
    "title": "interest",
    "description": "This page serves as a user guide for the 'interest' feature which plots\n  keywords or phrases over time versus stock price. It provides details on its usage,\n  parameters, and provides illustrative execution results. Notable keywords that you\n  could use to influence the plotted interest include topical phrases like 'COVID',\n  'WW3', and 'NFT'. The source for this functionality is based on Google.",
    "keywords": [
      "Interest",
      "Stock price",
      "Words",
      "Sentences",
      "Date",
      "Parameters",
      "Default",
      "Optional",
      "Start",
      "Words",
      "Choices",
      "Google",
      "COVID",
      "WW3",
      "NFT"
    ]
  },
  "stocks.ba.jcdr": {
    "title": "jcdr",
    "description": "The 'jcdr' page provides information about daily Cramer recommendations\n  and the parameters for using them, including adjustments for inverse recommendations.",
    "keywords": [
      "jcdr",
      "cramer recommendation",
      "daily cramer recommendation",
      "inverse recommendation",
      "usage",
      "parameters"
    ]
  },
  "stocks.ba.jctr": {
    "title": "jctr",
    "description": "The jctr command in Python shows the cramer recommendation for the loaded\n  ticker. This command requires no parameters.",
    "keywords": [
      "jctr",
      "cramer recommendation",
      "loaded ticker",
      "no parameters command"
    ]
  },
  "stocks.ba.load": {
    "title": "load",
    "description": "This documentation page provides useful information on how to load stock\n  tickers for market analysis, including specifications for intraday stocks, market\n  hours, and options for custom, weekly, and monthly data loading.",
    "keywords": [
      "Stock market analysis",
      "Intraday stock",
      "Market hours",
      "Load stock ticker",
      "Stock data",
      "Pre/post market",
      "Stock ticker",
      "Custom data load",
      "Monthly data load",
      "Weekly data load"
    ]
  },
  "stocks.ba.mentions": {
    "title": "mentions",
    "description": "The page provides details on how to plot weekly bars of stock's interest\n  over time with a python script. It includes usage and parameters like start date.",
    "keywords": [
      "stock mentions",
      "Start Date Parameter",
      "Interest over time",
      "Google source",
      "Weekly bars",
      "Docusaurus SEO"
    ]
  },
  "stocks.ba.messages": {
    "title": "messages",
    "description": "This page provides an overview of how to use the 'messages' function\n  to print the last messages on the Stocktwits message board. It includes detailed\n  instructions on parameter usage too.",
    "keywords": [
      "messages",
      "Stocktwits",
      "message board",
      "parameters",
      "limit"
    ]
  },
  "stocks.ba.popular": {
    "title": "popular",
    "description": "This segment teaches you how to obtain a list of the latest popular stock\n  tickers from various subreddits using command line parameters. This tutorial contains\n  usage, a parameters guide, and an example command.",
    "keywords": [
      "stock market",
      "popular tickers",
      "Reddit stock market",
      "Reddit tickers",
      "Python command line",
      "Finance"
    ]
  },
  "stocks.ba.queries": {
    "title": "queries",
    "description": "This page provides documentation on how to use the 'queries' function\n  to print the top related queries associated with a stock's query. Learn how to set\n  a limit on the number of queries and view examples of the output.",
    "keywords": [
      "stock",
      "query",
      "stock query",
      "top related queries",
      "print",
      "stock's query",
      "function",
      "Google source",
      "limit",
      "parameters",
      "examples",
      "output"
    ]
  },
  "stocks.ba.redditsent": {
    "title": "redditsent",
    "description": "Discover how to use the redditsent function to perform sentiment analysis\n  on Reddit about a specific ticker or company. Learn to adjust search parameters\n  like sorting type, subreddits, post limit, time period, and more for a comprehensive\n  Reddit search.",
    "keywords": [
      "redditsent",
      "sentiment analysis",
      "Reddit",
      "search sorting",
      "company search",
      "subreddits",
      "posts limit",
      "time period",
      "full search",
      "graphic display",
      "table of sentiment values"
    ]
  },
  "stocks.ba.regions": {
    "title": "regions",
    "description": "Learn how to plot bars representing regions based on a stock's interest\n  using Python. This tutorial includes Python usage explanations, parameters details,\n  and visualization examples.",
    "keywords": [
      "regions",
      "stock's interest",
      "plot bars",
      "Google source",
      "Python usage",
      "limit parameter"
    ]
  },
  "stocks.ba.rise": {
    "title": "rise",
    "description": "The 'rise' is a command for printing top rising related queries of a\n  specific stock. It sources its data from Google and is customizable based on user\n  inputs, creating an efficient way of keeping track of specific stock metrics.",
    "keywords": [
      "stocks",
      "stock metrics",
      "google sourced data",
      "top rising queries",
      "command line interface",
      "stock command",
      "query limit"
    ]
  },
  "stocks.ba.sentiment": {
    "title": "sentiment",
    "description": "The page provides a sentiment analysis tool that predicts in-depth sentiment\n  from recent tweets containing pre-specified stock tickers. It offers customizable\n  parameters including the limit of tweets to extract per hour and the number of past\n  days to extract tweets. Additionally, users can choose to show a corresponding change\n  in the stock price, enhancing the analysis.",
    "keywords": [
      "sentiment",
      "tweets analysis",
      "stock market sentiment",
      "Twitter data analysis",
      "predictive sentiment analysis",
      "stock market data"
    ]
  },
  "stocks.ba.snews": {
    "title": "snews",
    "description": "'snews - Display stock price and headlines sentiment using VADER model.\n  No parameters. Source: Finnhub.'",
    "keywords": [
      "snews",
      "stock price",
      "headlines sentiment",
      "VADER model",
      "Finnhub"
    ]
  },
  "stocks.ba.spac": {
    "title": "spac",
    "description": "This page provides a tool letting users pull SPAC announcements from\n  Reddit. It shows usage, parameters, examples, and notable references to companies\n  such as eToro and Citadel Advisors.",
    "keywords": [
      "SPACs",
      "Reddit",
      "stocks",
      "eToro",
      "GME",
      "FTCV",
      "APEX Clearing",
      "Peak 6",
      "Citadel Advisors"
    ]
  },
  "stocks.ba.spacc": {
    "title": "spacc",
    "description": "Spacc- a tool that presents a list of other users' SPACs announcements\n  from the 'SPACs' subreddit. Options include setting the limit of posts retrieved\n  and the sorting model- popular posts or recent posts.",
    "keywords": [
      "spacc",
      "SPACs",
      "subreddit",
      "tool",
      "posts",
      "limit",
      "b_popular",
      "score",
      "time",
      "Reddit",
      "stocks"
    ]
  },
  "stocks.ba.stalker": {
    "title": "stalker",
    "description": "'Stalker: A tool for tracking and printing the last messages of a Stocktwits\n  user. Allows specification of the username and limit of messages to be shown. Helps\n  users quickly retrieve and review the recent activity of a specific user.'",
    "keywords": [
      "stalker",
      "user messages",
      "Stocktwits",
      "username",
      "message limit",
      "programming documentation",
      "message tracking"
    ]
  },
  "stocks.ba.trending": {
    "title": "trending",
    "description": "This page provides information on trending stocks. It features a database\n  extracted from Stocktwits displaying the trending stocks along with their respective\n  tickers, watchlist counts, and a range of different company names.",
    "keywords": [
      "Stock trending",
      "Stocktwits",
      "watchlist count",
      "company name",
      "stock market",
      "market data",
      "stockist"
    ]
  },
  "stocks.ba.watchlist": {
    "title": "watchlist",
    "description": "This page documents the 'watchlist' function which allows users to fetch\n  and print other user's watchlist of stock posts from Reddit. It demonstrates usage,\n  explains different parameters including limit for posts, and provides examples of\n  its execution.",
    "keywords": [
      "watchlist",
      "stock posts",
      "post limit",
      "Reddit source",
      "usage",
      "parameters",
      "examples"
    ]
  },
  "stocks.ba.wsb": {
    "title": "wsb",
    "description": "This page serves as a guide on how to use the 'wsb' function, a tool\n  which prints what the WSB gang are up to in Reddit's subreddit wallstreetbets. It\n  includes parameters and examples.",
    "keywords": [
      "wsb function guide",
      "WallStreetBets subreddit",
      "Limit post print",
      "Parameter description",
      "Python examples"
    ]
  },
  "stocks.backtesting.ema": {
    "title": "ema",
    "description": "Learn how to use the EMA strategy, where stock is bought when the price\n  is equivalent to EMA(l). Parameters such as EMA period, spy hold comparison, and\n  buy and hold comparison are covered extensively.",
    "keywords": [
      "EMA Strategy",
      "Price EMA",
      "Stock Buying",
      "EMA Period",
      "Spy Hold Comparison",
      "Buy and Hold Comparison"
    ]
  },
  "stocks.backtesting.emacross": {
    "title": "emacross",
    "description": "The emacross page provides documentation for a python script that crosses\n  between a long and a short Exponential Moving Average (EMA). It also includes information\n  on the parameters of the script including lengths of the long and short EMA periods,\n  spy hold comparison, buy hold comparison, and short selling operations.",
    "keywords": [
      "emacross",
      "Exponential Moving Average",
      "EMA period",
      "long EMA",
      "short EMA",
      "spy hold comparison",
      "buy hold comparison",
      "short sell"
    ]
  },
  "stocks.backtesting.rsi": {
    "title": "rsi",
    "description": "Understanding the rsi strategy, which buys stock when it's less than\n  a threshold and shorts when it exceeds a threshold. Learn the usage, parameters,\n  and options involved in this strategy.",
    "keywords": [
      "rsi",
      "stock market strategy",
      "short sell",
      "rsi calculation",
      "buy and hold comparison",
      "spy hold comparison",
      "rsi level",
      "periods for calculation",
      "threshold for buying and shorting stock"
    ]
  },
  "stocks.backtesting.whatif": {
    "title": "whatif",
    "description": "Learn about the 'whatif' command line tool which provides a hypothetical\n  scenario of having bought a certain number of shares on a specific date. This tool\n  can be used for backward investment analysis and scenario planning.",
    "keywords": [
      "whatif",
      "shares",
      "share trading",
      "investment scenario",
      "investment analysis",
      "command line tool",
      "DATE_SHARES_ACQUIRED",
      "NUM_SHARES_ACQUIRED"
    ]
  },
  "stocks.ca.add": {
    "title": "add",
    "description": "This page provides the details on how to add and compare similar tickers\n  as well as the usage of 'add' command and a comprehensive description of its parameters.",
    "keywords": [
      "Add operation",
      "Ticker comparison",
      "Command usage",
      "Parameters description"
    ]
  },
  "stocks.ca.balance": {
    "title": "balance",
    "description": "Generates and prints either a yearly or quarterly balance statement of\n  a company, and compares its financial data with similar companies. The balance command\n  also provides a way to specify a preferred timeframe.",
    "keywords": [
      "balance statement",
      "financial data",
      "yearly balance",
      "quarterly balance",
      "company comparison",
      "financial comparison",
      "financial metrics"
    ]
  },
  "stocks.ca.cashflow": {
    "title": "cashflow",
    "description": "The documentation explains usage of the cashflow tool, which provides\n  yearly or quarterly cashflow statements for companies and allows for comparison\n  against similar companies.",
    "keywords": [
      "cashflow statement",
      "company financial data",
      "financial comparison",
      "quarterly financial data",
      "yearly financial data",
      "financial timeframe"
    ]
  },
  "stocks.ca.financial": {
    "title": "financial",
    "description": "This page provides an explanation of the 'financial' command in Python,\n  including its usage, parameters, and examples. The 'financial' command prints screener\n  data of similar companies, aiding in financial analysis and investment decisions.",
    "keywords": [
      "financial command",
      "stock screener",
      "investment decisions",
      "Finviz"
    ]
  },
  "stocks.ca.get": {
    "title": "get",
    "description": "A document page explaining the usage of the 'get' command in python.\n  It allows users to fetch similar companies from a data source for comparison. Instructions\n  and parameters for limiting the stocks and filtering by U.S. stock exchanges, Industry\n  and Sector are also included.",
    "keywords": [
      "get",
      "similar companies",
      "data source",
      "Finviz",
      "parameters",
      "Polygon",
      "stocks",
      "US stock exchanges",
      "Industry",
      "Sector",
      "limit"
    ]
  },
  "stocks.ca.hcorr": {
    "title": "hcorr",
    "description": "The page presents a correlation heatmap 'hcorr' based on historical price\n  comparison between similar companies. This tool assists in understanding and visualizing\n  stock market trends.",
    "keywords": [
      "hcorr",
      "correlation heatmap",
      "price comparison",
      "historical data",
      "stock market trends",
      "financial tools",
      "data visualization",
      "type_candle",
      "display_full_matrix"
    ]
  },
  "stocks.ca.historical": {
    "title": "historical",
    "description": "A guide for understanding and using the 'historical' feature for price\n  comparison between similar companies, includes usage, parameters details and graphical\n  representation.",
    "keywords": [
      "Price comparison",
      "Historical prices",
      "Stock analysis",
      "Normalization",
      "Candle data",
      "Starting date",
      "High, low, close prices",
      "Company comparison",
      "Open-high-low-close",
      "Adjusted close"
    ]
  },
  "stocks.ca.income": {
    "title": "income",
    "description": "This page provides a guide on how to use the 'income' function which\n  prints either yearly or quarterly income statements for a company, and compares\n  it against similar companies. The guide includes usage, parameters, and examples\n  with real company data.",
    "keywords": [
      "income statement",
      "company financial data",
      "yearly report",
      "quarterly report",
      "income indices",
      "financial comparison"
    ]
  },
  "stocks.ca.overview": {
    "title": "overview",
    "description": "This overview provides a snapshot of similar companies using the 'overview'\n  command, including critical data such as stock price, market cap, P/E ratio, and\n  more. Data sourced from Finviz.",
    "keywords": [
      "stock screener",
      "finviz",
      "company data",
      "stock market",
      "financial data",
      "stock information",
      "company overview",
      "market cap",
      "PE ratio",
      "stock price"
    ]
  },
  "stocks.ca.ownership": {
    "title": "ownership",
    "description": "The 'ownership' documentation provides a guide on how to print stock\n  screener data of similar companies. It explains the usage, parameters, and provides\n  examples.",
    "keywords": [
      "Stocks",
      "Market data",
      "Ownership",
      "Finviz",
      "Programming",
      "Coding examples",
      "Financial data",
      "Insider trades",
      "Technical usage",
      "Command guide",
      "Financial screener",
      "Documentation"
    ]
  },
  "stocks.ca.performance": {
    "title": "performance",
    "description": "This page provides information on the 'performance' command in the Python\n  programming language. It displays screener data from Finviz for similar companies,\n  giving a comprehensive performance overview including parameters such as Perf Week,\n  Perf Month, Perf Quart, Perf Half, Perf Year, and more. The command is shown in\n  use along with sample output.",
    "keywords": [
      "performance command",
      "Finviz",
      "stock screener",
      "screener data",
      "company performance"
    ]
  },
  "stocks.ca.rmv": {
    "title": "rmv",
    "description": "The 'rmv' documentation page explains how to use the Python command line\n  tool for removing similar tickers. It provides a detailed description of parameters,\n  including optional choices and default values.",
    "keywords": [
      "rmv",
      "remove similar tickers",
      "command line tool",
      "API",
      "parameters",
      "optional choices",
      "default value"
    ]
  },
  "stocks.ca.scorr": {
    "title": "scorr",
    "description": "The page provides reference to FinBrain's sentiment correlation tool,\n  demonstrating usage, parameters, and a screenshot for better interpretation. It\n  aids with extracting and comparing sentiment data across similar tickers.",
    "keywords": [
      "FinBrain",
      "sentiment correlation",
      "similar tickers",
      "sentiment_compare",
      "raw sentiment data"
    ]
  },
  "stocks.ca.sentiment": {
    "title": "sentiment",
    "description": "This page details the sentiment comparison feature in FinBrain's system.\n  It offers an understanding of sentiment across similar tickers, with the possibility\n  to view raw sentiment data.",
    "keywords": [
      "FinBrain",
      "sentiment comparison",
      "sentiment",
      "tickers",
      "raw sentiment data"
    ]
  },
  "stocks.ca.set": {
    "title": "set",
    "description": "This page provides instructions on how to use the 'set' command to select\n  similar companies for comparison, including usage and parameter details.",
    "keywords": [
      "similar companies",
      "comparison",
      "set function",
      "usage",
      "parameters",
      "L_SIMILAR"
    ]
  },
  "stocks.ca.technical": {
    "title": "technical",
    "description": "This page provides usage information, examples and parameters details\n  for the 'technical' function that prints screener data of similar companies.",
    "keywords": [
      "technical function",
      "stock screener",
      "company data",
      "financial data",
      "similar companies",
      "Stock ticker",
      "Beta",
      "ATR",
      "SMA20",
      "SMA50",
      "SMA200",
      "52W High",
      "52W Low",
      "RSI",
      "Price",
      "Change",
      "from Open",
      "Gap",
      "Volume"
    ]
  },
  "stocks.ca.ticker": {
    "title": "ticker",
    "description": "This page provides detailed instructions on how to set and use the ticker\n  function. It is invaluable for extracting similar tickers, helping users engage\n  more with stocks.",
    "keywords": [
      "ticker function",
      "extract similar tickers",
      "docusaurus documentation",
      "stock market",
      "financial tool",
      "ticker usage",
      "technical analysis",
      "stock ticker",
      "usage examples"
    ]
  },
  "stocks.ca.tsne": {
    "title": "tsne",
    "description": "Documentation page about TSNE method for comparing similar companies,\n  detailing usage, parameters, and examples. It describes how to implement TSNE method\n  using sklearn in Python.",
    "keywords": [
      "TSNE",
      "sklearn",
      "comparison",
      "similar companies",
      "parameters",
      "usage"
    ]
  },
  "stocks.ca.valuation": {
    "title": "valuation",
    "description": "This documentation page explains the usage of the 'valuation' command\n  which prints screener data of similar companies. It includes examples and details\n  about the parameters",
    "keywords": [
      "valuation",
      "screener data",
      "similar companies",
      "parameters",
      "command usage",
      "enterprise SEO",
      "data printing",
      "examples"
    ]
  },
  "stocks.ca.volume": {
    "title": "volume",
    "description": "Documentation page outlining the usage, parameters, and results from\n  the volume function, which provides historical volume comparison between similar\n  companies.",
    "keywords": [
      "volume function",
      "historical volume comparison",
      "stock volume",
      "financial data",
      "stock market analysis",
      "company comparison",
      "parameters",
      "data visualization",
      "stock analysis"
    ]
  },
  "stocks.dd.analyst": {
    "title": "analyst",
    "description": "This page enables users to print analyst prices and ratings for a company\n  using a simple python command. Information such as 'date', 'analyst', 'category',\n  'price', and 'rating' is revealed.",
    "keywords": [
      "Analyst data",
      "Stock market data",
      "Stock analyst ratings",
      "Financial information",
      "Command-line interface",
      "Python commands",
      "Finance",
      "Stock prices",
      "Financial data"
    ]
  },
  "stocks.dd.arktrades": {
    "title": "arktrades",
    "description": "The page documents the ArkTrades tool. This tool provides trade details\n  for any given ticker in ARK funds. It has optional parameters to limit rows shown\n  or include the ticker symbol in the table.",
    "keywords": [
      "arktrades",
      "trades",
      "ARK funds",
      "limit rows",
      "show symbol",
      "table",
      "stocks",
      "trade data",
      "sell",
      "buy",
      "Apple Inc."
    ]
  },
  "stocks.dd.customer": {
    "title": "customer",
    "description": "The 'customer' page provides a list of customers from a ticker source,\n  CSIMarket. It also includes the usage of the command and its parameters.",
    "keywords": [
      "customer",
      "CSIMarket",
      "command parameters",
      "usage"
    ]
  },
  "stocks.dd.est": {
    "title": "est",
    "description": "Detailed guide on how to get yearly estimates and quarter earnings/revenues\n  for stocks using the 'est' command. It includes parameters' usage, examples and\n  source of data.",
    "keywords": [
      "annual earnings",
      "quarter earnings",
      "annual revenue",
      "estimates",
      "stock market",
      "business",
      "financial data"
    ]
  },
  "stocks.dd.load": {
    "title": "load",
    "description": "This docusaurus page provides detailed information on how to load a stock\n  ticker to perform analysis, providing instructions on usage and descriptions of\n  various parameters.",
    "keywords": [
      "stock ticker",
      "load",
      "stock analysis",
      "usage instructions",
      "parameters"
    ]
  },
  "stocks.dd.pt": {
    "title": "pt",
    "description": "The pt command can print the latest price targets from analysts as provided\n  by Business Insider. The command has parameters such as raw for displaying only\n  raw data, and limit for controlling the number of price targets shown.",
    "keywords": [
      "Business Insider",
      "Price Target",
      "Analysts",
      "Parameters",
      "Raw data",
      "Limit",
      "Latest price targets",
      "Print"
    ]
  },
  "stocks.dd.rating": {
    "title": "rating",
    "description": "A page detailing the rating system for evaluating companies based on\n  specific financial ratios. It prints information on whether a company is a buy,\n  neutral or sell. This page provides usage details and parameters for obtaining ratings.",
    "keywords": [
      "Rating",
      "Company Evaluation",
      "Buy or Sell Recommendation",
      "Financial Ratios",
      "P/B",
      "ROA",
      "DCF",
      "P/E",
      "ROE",
      "D/E",
      "Financial Modeling Prep",
      "Limit",
      "Last Days Ratings"
    ]
  },
  "stocks.dd.rot": {
    "title": "rot",
    "description": "This page provides information about the 'rot' - Rating Over Time (monthly),\n  including its usage, parameters, and a visual example. The info is sourced from\n  Finnhub.",
    "keywords": [
      "rot",
      "Rating Over Time",
      "monthly rating",
      "Finnhub",
      "rot parameters",
      "rot usage",
      "data visualization",
      "raw data"
    ]
  },
  "stocks.dd.sec": {
    "title": "sec",
    "description": "This page provides information on how to print and analyze SEC filings\n  of a company using Market Watch. The SEC data includes Filing Date, Document Date,\n  Type, Category, whether the filing is Amended, and a Link to the filing.",
    "keywords": [
      "SEC filings",
      "data print",
      "financial data",
      "Market Watch",
      "stock data",
      "SEC data",
      "stock SEC filings"
    ]
  },
  "stocks.dd.supplier": {
    "title": "supplier",
    "description": "This page provides a list of suppliers from a ticker provided, sourced\n  from CSIMarket. The 'supplier' command is highlighted in this page, including its\n  usage and parameters.",
    "keywords": [
      "supplier",
      "CSIMarket",
      "Parameters"
    ]
  },
  "stocks.disc.active": {
    "title": "active",
    "description": "This page provides an insight into the 'active' command used to display\n  up to 25 top actively traded intraday tickers in the stock market using Python.\n  The page explains the usage conditions, parameters and ends with a clear example\n  showcasing its functionality.",
    "keywords": [
      "Active command",
      "Intraday tickers",
      "Most actively traded",
      "Stocks",
      "Yahoo Finance",
      "Market data",
      "Command-line tool",
      "Stock market"
    ]
  },
  "stocks.disc.arkord": {
    "title": "arkord",
    "description": "Arkord is a tool for displaying orders by ARK Investment Management LLC.\n  The software allows users to filter and sort stocks based on various parameters,\n  including volume, opening and closing values, highs and lows, and the weight of\n  shares.",
    "keywords": [
      "arkord",
      "ARK Investment Management",
      "stocks",
      "buys",
      "sells",
      "fund",
      "orders",
      "shares",
      "volume",
      "open",
      "close",
      "high",
      "low",
      "weight",
      "sorting"
    ]
  },
  "stocks.disc.asc": {
    "title": "asc",
    "description": "This documentation page provides information on 'asc', a command line\n  tool that fetches and displays small cap stocks with high earnings growth rates.\n  With customizable limit options, users can view top performing small cap stocks\n  with ease. Ideal for stock market enthusiasts and financial professionals looking\n  to filter out high-growth small cap stocks.",
    "keywords": [
      "small cap stocks",
      "earnings growth",
      "stock market analysis",
      "financial data analysis",
      "stock market tools",
      "financial programming",
      "stock information display"
    ]
  },
  "stocks.disc.cnews": {
    "title": "cnews",
    "description": "cnews page provides an interface to access customized news from various\n  sectors such as crypto, buybacks, politics, healthcare, and many more, sourced from\n  Seeking Alpha. Users can limit the number of news displayed and select specific\n  news type for display.",
    "keywords": [
      "cnews",
      "customized news",
      "Seeking Alpha",
      "top-news",
      "crypto",
      "issuance",
      "buybacks",
      "commodities",
      "spacs",
      "politics",
      "consumer",
      "energy",
      "financials",
      "healthcare",
      "mlps",
      "reits",
      "technology",
      "stock repurchase program"
    ]
  },
  "stocks.disc.divcal": {
    "title": "divcal",
    "description": "Guide to use divcal for acquiring dividend calendar for a selected date\n  in the stock market. The parameters include date, sort, and reverse. The data includes\n  Name, Symbol, Ex-Dividend date, Payment date, Record date, Dividend, and Annual\n  Dividend.",
    "keywords": [
      "divcal",
      "dividend calendar",
      "stock market",
      "ex-dividend date",
      "payment date",
      "record date",
      "annual dividend",
      "announcement date"
    ]
  },
  "stocks.disc.fipo": {
    "title": "fipo",
    "description": "This documentation page provides information and examples on using the\n  'fipo' function, a tool for retrieving future IPO date estimates from financial\n  data source Finnhub.io. This aids users in planning for upcoming IPOs by providing\n  essential details such as exchange name, company name, number of shares, expected\n  price, status, and total share value.",
    "keywords": [
      "IPO",
      "Stock market",
      "future IPO dates",
      "SMART FOR LIFE, INC.",
      "NASDAQ Capital",
      "FinTech",
      "Finnhub.io",
      "Stock exchange",
      "Investment"
    ]
  },
  "stocks.disc.gainers": {
    "title": "gainers",
    "description": "This page provides a method to print the top 25 stock gainers using Python.\n  You can customize the limit of stocks you want to display. This information is sourced\n  from Yahoo Finance.",
    "keywords": [
      "stock market",
      "top gainers",
      "Yahoo Finance",
      "stock limit display"
    ]
  },
  "stocks.disc.gtech": {
    "title": "gtech",
    "description": "Display top tech stocks with significant revenue and earnings growth.\n  Limit the number of displayed stocks as desired. Source data from Yahoo Finance.",
    "keywords": [
      "stocks",
      "tech stocks",
      "revenue",
      "earnings growth",
      "stock display",
      "Yahoo Finance"
    ]
  },
  "stocks.disc.heatmap": {
    "title": "heatmap",
    "description": "This page describes how to use the heatmap tool which provides an interactive\n  treemap of the SP 500 from finviz. It includes usage examples and a detailed description\n  of parameters.",
    "keywords": [
      "heatmap tool",
      "SP 500 heatmap",
      "interactive treemap",
      "finviz",
      "usage examples",
      "tool parameters",
      "timeframe parameter",
      "data visualization"
    ]
  },
  "stocks.disc.hotpenny": {
    "title": "hotpenny",
    "description": "The hotpenny webpage provides a list of top penny stocks sourced from\n  various websites. It displays price, volume, trade changes, and allows users to\n  limit the number of stocks displayed.",
    "keywords": [
      "hotpenny",
      "penny stocks",
      "stock market",
      "trade changes",
      "stock volume",
      "stock price"
    ]
  },
  "stocks.disc.losers": {
    "title": "losers",
    "description": "This page explains the usage of the 'losers' command in stocks software/tool.\n  It allows the user to display up to 25 top market losers data from Yahoo Finance\n  with specific parameters and examples.",
    "keywords": [
      "stocks",
      "market losers",
      "stock market",
      "Yahoo Finance",
      "stock tracking"
    ]
  },
  "stocks.disc.lowfloat": {
    "title": "lowfloat",
    "description": "The LowFloat webpage provides sophisticated tools for retrieving information\n  about top stocks with the lowest float. It offers a comprehensive database that\n  includes stocks from Nasdaq, the New York Stock Exchange, the American Stock Exchange,\n  and the Over the Counter Bulletin Board. The service not only provides a stock's\n  float, but also provides additional key data such as the number of outstanding\n  shares, short interest, and company industry.",
    "keywords": [
      "lowfloat",
      "stocks",
      "stock market",
      "Nasdaq",
      "New York Stock Exchange",
      "American Stock Exchange",
      "Outstanding shares",
      "Short interest",
      "Company industry",
      "Stock trading",
      "Low float stocks",
      "Stock data"
    ]
  },
  "stocks.disc.pipo": {
    "title": "pipo",
    "description": "This documentation page provides details on how to use the 'pipo' function\n  to retrieve past IPOs dates; instructions for its usage, parameters and clear examples\n  are provided.",
    "keywords": [
      "pipo",
      "past IPOs dates",
      "function usage",
      "parameters instructions",
      "examples",
      "IPOs",
      "dates"
    ]
  },
  "stocks.disc.rtat": {
    "title": "rtat",
    "description": "The rtat tool provides daily insights into the retail trading activity\n  and sentiment for over 9,500 US traded stocks, ADRs, and ETPs. Learn how to use\n  it, understand its parameters, and see examples of results with our detailed documentation.",
    "keywords": [
      "rtat",
      "trade tracking",
      "investment trades",
      "retail activity",
      "stocks",
      "ADRs",
      "ETPs",
      "retail sentiment",
      "daily view",
      "investment sentiment",
      "RTAT usage",
      "python example",
      "parameter limit"
    ]
  },
  "stocks.disc.trending": {
    "title": "trending",
    "description": "The 'Trending' page provides the latest news articles sourced from Seeking\n  Alpha. Users can access articles by ID, limit the number of articles displayed,\n  and filter by start date.",
    "keywords": [
      "Trending",
      "News Articles",
      "Seeking Alpha",
      "Article ID",
      "Article Limit",
      "Start Date"
    ]
  },
  "stocks.disc.ugs": {
    "title": "ugs",
    "description": "The 'ugs' documentation page provides instructions on how to print up\n  to 25 undervalued stocks with revenue and earnings growth exceeding 25%. It includes\n  details on usage, parameters, and examples demonstrating expected outcomes.",
    "keywords": [
      "undervalued stocks",
      "stocks",
      "revenue growth",
      "earnings growth",
      "stock market",
      "financial market",
      "ugs",
      "Yahoo Finance"
    ]
  },
  "stocks.disc.ulc": {
    "title": "ulc",
    "description": "The 'ulc' page provides a useful tool for displaying potentially undervalued\n  large cap stocks. The utility allows you to specify the limit of stocks to display,\n  making it a versatile tool for investment research. Source data is retrieved from\n  Yahoo Finance.",
    "keywords": [
      "stocks",
      "large cap stocks",
      "undervalued stocks",
      "investment research",
      "stock display tool",
      "Yahoo Finance",
      "stock market",
      "stock analysis"
    ]
  },
  "stocks.disc.upcoming": {
    "title": "upcoming",
    "description": "This documentation page provides information about the 'upcoming' command\n  which displays upcoming earnings release dates. It fetches data from Seeking Alpha\n  and presents it in an easy-to-read format, showcasing the upcoming earnings releases\n  of various companies. Ideal tool for investors seeking recent financial data.",
    "keywords": [
      "upcoming earnings release dates",
      "Seeking Alpha",
      "stock market",
      "financial data",
      "finance documentation",
      "stock earnings",
      "stock investment data",
      "financial information",
      "investment tools"
    ]
  },
  "stocks.dps.ctb": {
    "title": "ctb",
    "description": "This page provides a detailed overview on how to show the cost to borrow\n  of stocks using the ctb function. It includes usage, parameters, and examples, helping\n  users to effectively retrieve and manage data.",
    "keywords": [
      "ctb function",
      "cost to borrow",
      "stock data",
      "Interactive Broker",
      "record retrieval",
      "data management",
      "Stocksera"
    ]
  },
  "stocks.dps.dpotc": {
    "title": "dpotc",
    "description": "dpotc is a command that displays a barchart of dark pool (ATS) and OTC\n  (Non ATS) data. With this command, you can visually interpret financial data efficiently.",
    "keywords": [
      "dpotc",
      "dark pool data",
      "OTC data",
      "barchart display",
      "financial data visualization",
      "Non ATS",
      "ATS",
      "FINRA"
    ]
  },
  "stocks.dps.ftd": {
    "title": "ftd",
    "description": "Documentation and usage guide for the 'ftd' function that prints the\n  latest fails-to-deliver data sourced from SEC. It allows users to specify date range,\n  volume of data and offers raw data print.",
    "keywords": [
      "fails-to-deliver data",
      "SEC source",
      "ftd",
      "datetime parameter",
      "raw data",
      "data print",
      "data analysis"
    ]
  },
  "stocks.dps.hsi": {
    "title": "hsi",
    "description": "This page provides detailed instructions on how to use the 'hsi' tool,\n  which is designed to pull data on the top stocks that are being heavily shorted\n  according to HighShortInterest.com. It provides details on parameters, usage, and\n  examples on how to use the command line tool.",
    "keywords": [
      "hsi tool",
      "stock market data",
      "short interest stocks",
      "high short interest",
      "stock command line tools",
      "stock market research",
      "stocks",
      "short selling",
      "stock market guide"
    ]
  },
  "stocks.dps.load": {
    "title": "load",
    "description": "Understanding how to load a stock ticker for analysis. This page provides\n  description and usage of parameters such as stock ticker, start date, end date,\n  interval, filepath and more. Indian tickers and Yahoo Finance markets are also referenced.",
    "keywords": [
      "load",
      "stock ticker",
      "analysis",
      "data source",
      "Indian ticker",
      "yahoo finance",
      "market",
      "parameters",
      "starting date",
      "ending date",
      "intraday stock",
      "prepost",
      "filepath",
      "monthly data",
      "weekly data"
    ]
  },
  "stocks.dps.pos": {
    "title": "pos",
    "description": "The 'pos' page holds the explanation and tutorial for retrieving dark\n  pool short positions. The content includes usage, parameters with their detailed\n  description, and an example in form of a table.",
    "keywords": [
      "Dark pool short positions",
      "Python script usage",
      "Data parameters",
      "Data sorting",
      "Descending order",
      "Ascending order",
      "Display limit",
      "Command line tool example",
      "Volatility data",
      "Net short volume",
      "DP position",
      "Stock market parameters",
      "Stockgrid source"
    ]
  },
  "stocks.dps.prom": {
    "title": "prom",
    "description": "Display dark pool (ATS) data of tickers with growing trades activity\n  using linear regression. Filter and process data from different tiers.",
    "keywords": [
      "prom",
      "dark pool",
      "ATS data",
      "trade activity",
      "linear regression",
      "data filtering",
      "tier processing"
    ]
  },
  "stocks.dps.psi": {
    "title": "psi",
    "description": "The page provides detailed information about psi command which shows\n  the price vs short interest volume data from either NYSE or NASDAQ taken from Quandl\n  or Stockgrid. It also includes usage and parameter details.",
    "keywords": [
      "psi",
      "NYSE",
      "NASDAQ",
      "Quandl",
      "Stockgrid",
      "short-interest volume",
      "price"
    ]
  },
  "stocks.dps.shorted": {
    "title": "shorted",
    "description": "This page provides information on the 'shorted' functionality which allows\n  users to retrieve up to 25 top ticker most shorted stocks from Yahoo Finance. The\n  page explains how the feature can be used, and lists the parameters available for\n  customization.",
    "keywords": [
      "shorted",
      "top ticker",
      "most shorted stocks",
      "yahoo finance",
      "stock market",
      "stock analysis",
      "limit",
      "parameters"
    ]
  },
  "stocks.dps.sidtc": {
    "title": "sidtc",
    "description": "The sidtc page provides a command line interface to print short interest\n  and days to cover for stocks. Provides options to limit the number of tickers displayed\n  and sorting by specific fields.",
    "keywords": [
      "sidtc",
      "short interest",
      "days to cover",
      "Stockgrid",
      "stock market",
      "financial data",
      "stock analysis"
    ]
  },
  "stocks.dps.spos": {
    "title": "spos",
    "description": "An informative page that demonstrates the usage of the 'spos' command,\n  exhibiting Net Short Vol. vs Position. It includes instructions on how to use the\n  command, its parameters, and an illustrative image.",
    "keywords": [
      "spos command",
      "Net Short Vol vs Position",
      "command usage",
      "parameters",
      "trading commands"
    ]
  },
  "stocks.fa.analysis": {
    "title": "analysis",
    "description": "This page provides guidance on how to perform an analysis of SEC filings\n  using a specific NLP model through a python command. This command has no parameters.",
    "keywords": [
      "analysis",
      "SEC filings",
      "NLP model"
    ]
  },
  "stocks.fa.balance": {
    "title": "balance",
    "description": "The 'balance' documentation page provides comprehensive instructions\n  for printing a balance sheet statement over time. The page explains expected fields,\n  usage, parameters, and provides examples. It is a helpful resource for anyone looking\n  to understand how to use the 'balance' function effectively.",
    "keywords": [
      "balance sheet statement",
      "balance page",
      "financial data",
      "Alpha Vantage",
      "parameters",
      "time-series data"
    ]
  },
  "stocks.fa.cal": {
    "title": "cal",
    "description": "This page provides a guide to using the 'cal' command for accessing company\n  earning calendars and revenue estimates using python.",
    "keywords": [
      "Company Earnings",
      "Earnings Calendar",
      "Revenue Estimates",
      "Yahoo Finance"
    ]
  },
  "stocks.fa.cash": {
    "title": "cash",
    "description": "This documentation describes the 'cash' script which prints a complete\n  cash flow statement over time. It covers features including options for quarterly\n  or annual views, detailed financial factors such as accounts payable and net income,\n  and usage of the command-line interface. The data source is mentioned as Alpha Vantage.",
    "keywords": [
      "cash flow statement",
      "quarterly cash flow",
      "annual cash flow",
      "accounts payable",
      "accounts receivable",
      "net income",
      "operating cash flow",
      "investing activities",
      "financing activities",
      "Alpha Vantage source",
      "Stock financial analysis",
      "Command-line interface usage",
      "Docusaurus page metadata",
      "Parameter choices for cash script"
    ]
  },
  "stocks.fa.data": {
    "title": "data",
    "description": "This documentation page provides information on data metrics related\n  to the company. It includes various financial and non-financial fields such as Company,\n  Sector, Industry, Index, Sales, Profit Margin, and many more.",
    "keywords": [
      "Company Metrics",
      "Data Metrics",
      "Financial Data",
      "Industry",
      "Sector",
      "Index",
      "Sales",
      "Profit Margin",
      "Performance Metrics",
      "EPS",
      "Market Cap",
      "P/E ratio"
    ]
  },
  "stocks.fa.dcf": {
    "title": "dcf",
    "description": "Discover the dcf command, a powerful and flexible tool that allows users\n  to predict and analyze the value of a company based on future cash flows and the\n  present value. This tool allows for customizable parameters, includes linear regression\n  estimates, discount factors, and multiple prediction models.",
    "keywords": [
      "dcf",
      "discounted cash flow",
      "financial statements prediction",
      "linear regression",
      "Fama French",
      "CAPM",
      "cash flow analysis",
      "present value",
      "company value",
      "stock analysis",
      "financial tool"
    ]
  },
  "stocks.fa.dcfc": {
    "title": "dcfc",
    "description": "This page provides instructions on how to use the 'dcfc' function to\n  extract a company's discounted cash flow (DCF), stock price, and date information.\n  It further provides details on usage and parameters.",
    "keywords": [
      "dcfc",
      "discounted cash flow",
      "stock price",
      "financial data extraction",
      "financial modeling",
      "DCF",
      "quarters",
      "fundamental data"
    ]
  },
  "stocks.fa.divs": {
    "title": "divs",
    "description": "This documentation page provides explanation about the usage, and parameters\n  of the 'divs' function in showing historical dividends of a company.",
    "keywords": [
      "divs function",
      "historical dividends",
      "dividend plotting",
      "function parameters",
      "dividend history"
    ]
  },
  "stocks.fa.dupont": {
    "title": "dupont",
    "description": "This page provides information about the Dupont tool, which deconstructs\n  return on equity to help investors understand it better. This tool can toggle between\n  presenting raw data and processed data.",
    "keywords": [
      "dupont",
      "return on equity",
      "raw data"
    ]
  },
  "stocks.fa.earnings": {
    "title": "earnings",
    "description": "This page provides documentation for the 'earnings' function. This tool\n  prints earnings dates and reported EPS of a company, enabling users to efficiently\n  track this financial data in a clear format.",
    "keywords": [
      "docusaurus",
      "metadata",
      "earnings",
      "financial data",
      "EPS",
      "parameter",
      "example"
    ]
  },
  "stocks.fa.enterprise": {
    "title": "enterprise",
    "description": "The enterprise page provides insights into stock price, market capitalization,\n  enterprise value, total debt, and other financial indicators over time. This information\n  is crucial for investment decisions and financial modeling.",
    "keywords": [
      "enterprise",
      "stock price",
      "market capitalization",
      "enterprise value",
      "total debt",
      "cash and cash equivalents",
      "number of shares",
      "symbol",
      "financial modeling",
      "stocks"
    ]
  },
  "stocks.fa.fraud": {
    "title": "fraud",
    "description": "An in-depth look at various statistical models for detecting fraud in\n  a company's reported earnings. Includes discussions on the Beneish model, Zmijewski\n  Score, and McKee Score; and use of different indices like Days Sales in Receivables\n  Index, Gross Margin Index, Asset Quality Index, and more.",
    "keywords": [
      "Beneish model",
      "Zmijewski Score",
      "McKee Score",
      "Days Sales in Receivables Index",
      "Gross Margin Index",
      "Asset Quality Index",
      "Sales Growth Index",
      "Depreciation Index",
      "Sales General and Administrative Expenses Index",
      "Leverage Index",
      "Total Accruals to Total Assets",
      "Fraud detection",
      "Earnings manipulation"
    ]
  },
  "stocks.fa.growth": {
    "title": "growth",
    "description": "This documentation page discusses the various parameters and functionalities\n  of a financial growth model. It covers the growth of statement items and financial\n  ratios, including revenue, operating cash flow, assets, debt, EBIT, EPS, gross profit,\n  inventory, net income, operating income, and more. It provides usage examples and\n  parameter descriptions using Financial Modeling Prep as the data source.",
    "keywords": [
      "financial growth",
      "statement items growth",
      "financial ratios",
      "Revenue Growth",
      "inventory growth",
      "operating cash flow growth",
      "Asset growth",
      "Debt growth",
      "Ebit growth",
      "Eps growth",
      "Free cash flow growth",
      "Gross profit growth",
      "Inventory growth",
      "Net income growth",
      "Operating income growth",
      "Revenue growth",
      "Financial Modeling Prep"
    ]
  },
  "stocks.fa.hq": {
    "title": "hq",
    "description": "The hq tool opens the company's headquarters location in Google Maps.\n  Sourced from Yahoo Finance, this command requires no parameters for usage.",
    "keywords": [
      "hq",
      "Google Maps",
      "Yahoo Finance",
      "company location",
      "no parameters"
    ]
  },
  "stocks.fa.income": {
    "title": "income",
    "description": "This page provides in-depth information on how to generate a comprehensive\n  income statement over a specific period, either quarterly or annually. It covers\n  critical financial terms such as gross profit, operating expenses, income before\n  tax, net income, and EPS among others. These metrics can be derived using Alpha\n  Vantage data source for accurate financial analysis.",
    "keywords": [
      "income statement",
      "financial data",
      "quarterly reports",
      "annual reports",
      "financial metrics",
      "Alpha Vantage",
      "financial software",
      "financial terms",
      "gross profit",
      "net income",
      "operating expenses",
      "income before tax",
      "ebitda",
      "eps"
    ]
  },
  "stocks.fa.info": {
    "title": "info",
    "description": "A comprehensive resource of detailed information about companies, including\n  financial stats and profile data sourced from Yahoo Finance. Ideal for getting to\n  know more about a company's performance, size, location, financial stats, and more.",
    "keywords": [
      "business info",
      "company data",
      "financial details",
      "stock market",
      "Yahoo Finance",
      "company profile",
      "company information",
      "marketing SEO",
      "docusaurus page",
      "Page SEO"
    ]
  },
  "stocks.fa.key": {
    "title": "key",
    "description": "This documentation provides users with key metrics data about a company\n  using Alpha Vantage API. It presents data fields like Market capitalization, EBITDA,\n  EPS, PE ratio, and more.",
    "keywords": [
      "Alpha Vantage API",
      "Market capitalization",
      "EBITDA",
      "EPS",
      "PE ratio",
      "PEG ratio",
      "Price to book ratio",
      "Return on equity TTM",
      "Payout ratio",
      "Price to sales ratio TTM",
      "Dividend yield",
      "50 day moving average",
      "Analyst target price",
      "Beta"
    ]
  },
  "stocks.fa.load": {
    "title": "load",
    "description": "This page provides comprehensive instructions on how to load stock tickers\n  to perform analysis. It highlights how to load Indian market stocks with '.NS' and\n  provides a link to the Yahoo finance available markets. The page features various\n  parameters to tailor analysis including adjustments for start and end dates, interval\n  times, and loading custom files.",
    "keywords": [
      "Load stock ticker",
      "Perform analysis",
      "India stock market",
      ".NS",
      "Yahoo finance",
      "Exchanges data providers",
      "Parameters",
      "Stock interval",
      "Intraday stock minutes",
      "Load monthly data",
      "Load weekly data"
    ]
  },
  "stocks.fa.metrics": {
    "title": "metrics",
    "description": "This documentation page provides information on how to pull key metrics\n  of a company over time using metrics command. Included data are Return on Equity\n  (ROE), Working Capital, Current Ratio and Debt to Assets, among others.",
    "keywords": [
      "metrics",
      "company metrics",
      "Return on Equity",
      "Working Capital",
      "Current Ratio",
      "Debt to Assets",
      "quarterly metrics",
      "annual metrics",
      "financial modeling"
    ]
  },
  "stocks.fa.mgmt": {
    "title": "mgmt",
    "description": "This page provides details on how to print management team details using\n  the 'mgmt' command. It also includes potential insider activity page sourced from\n  Business Insider.",
    "keywords": [
      "management team",
      "insider activity",
      "Business Insider",
      "mgmt",
      "print management info",
      "usage of mgmt"
    ]
  },
  "stocks.fa.mktcap": {
    "title": "mktcap",
    "description": "The mktcap page describes the usage and parameters of the market cap\n  estimate over time. The source for this data is Yahoo Finance. A Python line command\n  is used to fetch and display this information.",
    "keywords": [
      "mktcap",
      "market cap estimate",
      "Yahoo Finance",
      "python commands",
      "financial data",
      "parameters",
      "starting date",
      "data visualisation"
    ]
  },
  "stocks.fa.overview": {
    "title": "overview",
    "description": "This page provides a command to generate an extensive overview of a company,\n  delivering important data from asset type and exchange to financial metrics by Alpha\n  Vantage. This can be particularly useful for financial analysis and understanding\n  the company's current standing in the market.",
    "keywords": [
      "Company overview",
      "Stocks information",
      "Market data",
      "Financial statistics",
      "Alpha Vantage",
      "Trading data",
      "Asset info",
      "Company data",
      "Financial analysis",
      "Business fundamentals"
    ]
  },
  "stocks.fa.profile": {
    "title": "profile",
    "description": "This documentation page provides comprehensive information about financial\n  profile command in Python. The command prints various aspects such as company description,\n  industry, sector, exchange and more.",
    "keywords": [
      "Financial Modeling Prep",
      "Python command",
      "financial profile",
      "sector exchange",
      "company description",
      "Company information"
    ]
  },
  "stocks.fa.quote": {
    "title": "quote",
    "description": "This page provides a detailed explanation on the 'quote' function, a\n  tool that delivers comprehensive financial data of a company including volume, price-to-equity\n  ratio, market cap, and more. Source of this information typically comes from Financial\n  Modeling Prep.",
    "keywords": [
      "quote",
      "company information",
      "market cap",
      "open price",
      "close price",
      "price-to-equity ratio",
      "Financial Modeling Prep",
      "Shares outstanding",
      "Day high",
      "Day low",
      "Earnings announcement",
      "Eps",
      "Exchange",
      "Name",
      "Open",
      "Pe",
      "Previous close",
      "Price",
      "Price avg200",
      "Price avg50",
      "Symbol",
      "Timestamp",
      "Volume",
      "Year high",
      "Year low"
    ]
  },
  "stocks.fa.ratios": {
    "title": "ratios",
    "description": "A comprehensive guide on using the 'ratios' function. It offers an in-depth\n  analysis of a company's ratios over time, which includes financial metrics like\n  Payout Ratio, Price-to-Book Ratio, Debt equity ratio, Dividend payout ratio and\n  much more.",
    "keywords": [
      "ratios",
      "financial ratios",
      "debt equity ratio",
      "dividend payout ratio",
      "price to book ratio",
      "financial modeling",
      "asset turnover",
      "cash flow",
      "return on equity",
      "operating cycle"
    ]
  },
  "stocks.fa.score": {
    "title": "score",
    "description": "This is a documentation for Score, a Python command for a value investing\n  tool based on insights by Warren Buffett, Joseph Piotroski, and Benjamin Graham.\n  This command does not require any parameters.",
    "keywords": [
      "Score",
      "Value Investing",
      "Warren Buffett",
      "Joseph Piotroski",
      "Benjamin Graham",
      "Investment tool",
      "FMP",
      "Python command"
    ]
  },
  "stocks.fa.shrs": {
    "title": "shrs",
    "description": "This page provides information on how to print Major, institutional and\n  mutualfunds shareholders using the 'shrs' command in Python. The data source for\n  this information is Yahoo Finance.",
    "keywords": [
      "shrs",
      "major shareholders",
      "institutional shareholders",
      "mutualfunds shareholders",
      "Yahoo Finance",
      "shareholder table"
    ]
  },
  "stocks.fa.splits": {
    "title": "splits",
    "description": "This page provides relevant information on stock splits and reverse split\n  events since a company's IPO, referencing Yahoo Finance. Example parameters for\n  use in Python are illustrated.",
    "keywords": [
      "stock splits",
      "reverse split",
      "IPO",
      "Yahoo Finance",
      "parameters",
      "gnus_splits",
      "aapl_splits"
    ]
  },
  "stocks.fa.sust": {
    "title": "sust",
    "description": "This documentation page covers the usage of 'sust' command in fetching\n  sustainability values of a company, useful for responsible investment decisions.\n  All values are sourced from Yahoo Finance.",
    "keywords": [
      "sust command",
      "sustainability values",
      "responsible investments",
      "Yahoo Finance",
      "ESG scores",
      "corporate sustainability",
      "investment tool"
    ]
  },
  "stocks.fa.warnings": {
    "title": "warnings",
    "description": "This page provides warnings by Sean Seah regarding stock market values,\n  including consistent historical earnings per share, return on equity, return on\n  assets, and net income to long-term debt ratio. Insightful examples and customizable\n  parameters are available for financial analysis.",
    "keywords": [
      "Sean Seah warnings",
      "stock market indicators",
      "financial analytics",
      "historical earnings per share",
      "return on equity",
      "return on assets",
      "net income to long-term debt ratio",
      "financial analysis examples",
      "customizable financial parameters"
    ]
  },
  "stocks.fa.web": {
    "title": "web",
    "description": "'This page provides detailed information on how to open the company''s\n  website using the ''web'' command. It includes usage instructions and specification\n  of the lack of parameters for the command. Source: Yahoo Finance.'",
    "keywords": [
      "company website",
      "web command",
      "usage instructions",
      "no parameters",
      "Yahoo Finance"
    ]
  },
  "stocks.gov.contracts": {
    "title": "contracts",
    "description": "This documentation page provides information about contracts associated\n  with a ticker as sourced from QuiverQuant. Details include usage, parameters like\n  past transaction days and raw data. Also added is a snapshot of the contracts interface.",
    "keywords": [
      "contracts",
      "past transaction days",
      "raw data",
      "quiverquant"
    ]
  },
  "stocks.gov.gtrades": {
    "title": "gtrades",
    "description": "This page provides documentation on how to use the gtrades governmental\n  trading tool, offering information on command usage, parameters, and possible settings.",
    "keywords": [
      "gtrades",
      "governmental trading",
      "usage",
      "parameters",
      "settings"
    ]
  },
  "stocks.gov.histcont": {
    "title": "histcont",
    "description": "The histcont page is part of Quiver Quant's website and deals with quarterly-contracts\n  historical data. Here you'll find information about parameters, usages, and data\n  visualizations.",
    "keywords": [
      "histcont",
      "Quiver Quant",
      "historical contracts",
      "raw data",
      "data visualization"
    ]
  },
  "stocks.gov.lastcontracts": {
    "title": "lastcontracts",
    "description": "This is a page for 'lastcontracts', a tool that displays the most recent\n  government contracts. It can customize the display based on the user's preferences\n  for the limit of contracts to display, the past transaction days to cover, and to\n  show or not the total amount of contracts.",
    "keywords": [
      "lastcontracts",
      "government contracts",
      "display contracts",
      "past transaction days",
      "limit of contracts",
      "total amount of contracts",
      "data display"
    ]
  },
  "stocks.gov.lasttrades": {
    "title": "lasttrades",
    "description": "This page presents 'lasttrades', a comprehensive tool providing details\n  on the last government trades. It provides usage, parameters, and examples on how\n  to retrieve and understand transaction data.",
    "keywords": [
      "lasttrades",
      "government trades",
      "transaction data",
      "trade parameters",
      "usage examples",
      "congress transactions",
      "senate trades",
      "house trades",
      "Quiver Quant"
    ]
  },
  "stocks.gov.load": {
    "title": "load",
    "description": "This page provides comprehensive instructions and details on how to load\n  stock ticker for market analysis, using various parameters. Details on how to choose\n  the starting and ending date, intraday stock minutes, pre and post market hours\n  are provided. There are also instructions on how to load custom files and specific\n  frequency data such as monthly or weekly.",
    "keywords": [
      "stock ticker",
      "market analysis",
      "intraday stock",
      "prepost market",
      "load stock data",
      "analysis parameters",
      "data frequency",
      "load custom file",
      "SBIN.NS",
      "Indian ticker",
      "monthly data",
      "weekly data"
    ]
  },
  "stocks.gov.lobbying": {
    "title": "lobbying",
    "description": "This lobbying documentation page provides lobbying details for Tesla\n  Inc. The content includes content related to the Electric Vehicle Tax Credit, Driving\n  America Forward Act, Energy Storage Tax Incentive and Deployment Act, and more.\n  The data is provided by Quiver Quant and represented in Python syntax.",
    "keywords": [
      "Lobbying",
      "Tesla Inc",
      "Electric Vehicle Tax Credit",
      "Driving America Forward Act",
      "Storage Tax Credit",
      "Energy Storage Tax Incentive and Deployment Act",
      "Quiver Quant",
      "Gov Stock Politics",
      "Python Usage",
      "Coronavirus Aid, Relief, and Economic Security Act"
    ]
  },
  "stocks.gov.qtrcontracts": {
    "title": "qtrcontracts",
    "description": "The qtrcontracts page provides a comprehensive guide on how to view and\n  analyze government contracts data using Quiver Quantitative. The guide includes\n  usage parameters, examples, and options for analysis such as total contracts, highest\n  sloped contracts, and highest decreasing slopes.",
    "keywords": [
      "qtrcontracts",
      "government contracts",
      "Quiver Quantitative",
      "stock market analysis",
      "tickers",
      "total contracts",
      "highest sloped contracts",
      "highest decreasing slopes",
      "raw data"
    ]
  },
  "stocks.gov.topbuys": {
    "title": "topbuys",
    "description": "Explore top buys for government trading. Discover how to use the 'topbuys'\n  feature, including parameter selection for congress, senate and house, past transactions,\n  and more for optimized use. Enhance your trading strategies today with quiverquant.",
    "keywords": [
      "government trading",
      "topbuys",
      "congress",
      "senate",
      "house",
      "past transactions",
      "quiverquant"
    ]
  },
  "stocks.gov.toplobbying": {
    "title": "toplobbying",
    "description": "Toplobbying is an efficient tool to monitor lobbying activities. It allows\n  users to specify a limit for the number of stocks to display and choose to print\n  raw data.",
    "keywords": [
      "toplobbying",
      "lobbying tool",
      "stocks",
      "limit stocks",
      "raw data",
      "display stocks",
      "quiverquant"
    ]
  },
  "stocks.gov.topsells": {
    "title": "topsells",
    "description": "The page provides information on the top sells in government trading.\n  Understand how to use different options like governing body, limit of top tickers,\n  past transaction months and others to filter the information.",
    "keywords": [
      "government trading",
      "top sells",
      "congress",
      "senate",
      "house",
      "past transactions months",
      "limit of top tickers",
      "print raw data",
      "quiverquant"
    ]
  },
  "stocks.ins.act": {
    "title": "act",
    "description": "The page provides a guide on the usage of 'act', a tool that enables\n  users to print insider business activity over time. It also  outlines the parameters\n  like 'raw' providing a flexibility to print raw data.",
    "keywords": [
      "act",
      "Insider activity",
      "Business Insider",
      "raw data"
    ]
  },
  "stocks.ins.blcp": {
    "title": "blcp",
    "description": "This page provides comprehensive instructions for using the 'blcp' feature\n  which displays the latest CEO/CFO purchases. It includes details on the usage, parameters,\n  and real-time examples.",
    "keywords": [
      "blcp usage",
      "CEO/CFO purchases",
      "limit parameters",
      "OpenInsider source",
      "Insider data",
      "Trade details",
      "Python usage examples"
    ]
  },
  "stocks.ins.blcs": {
    "title": "blcs",
    "description": "This page is about 'blcs', a tool that is used to print the latest CEO/CFO\n  sales 100k using data from OpenInsider. It displays insider data in a tabular format,\n  with options to limit data rows.",
    "keywords": [
      "OpenInsider",
      "blcs",
      "CEO/CFO sales",
      "Insider Data",
      "Python tool",
      "Stocks"
    ]
  },
  "stocks.ins.blip": {
    "title": "blip",
    "description": "This page enables usage of the 'blip' command, a tool for printing the\n  latest insider purchases 25k, sourced from OpenInsider. The usage, parameters, and\n  examples are provided to give an understanding on how to use this command effectively\n  to access insider trade data such as company name, insider name, trade type, price,\n  quantity, owned, value, etc.",
    "keywords": [
      "blip",
      "Insider Purchases",
      "OpenInsider",
      "stocks",
      "Trade Data",
      "Company Name",
      "Insider Name",
      "Trade Type",
      "Price",
      "Qty",
      "Value",
      "Title",
      "Owned",
      "Diff Own",
      "Data Display",
      "Limit Parameter"
    ]
  },
  "stocks.ins.blis": {
    "title": "blis",
    "description": "This page describes how to use the blis command to print out the latest\n  insider sales 100k from the OpenInsider source. It includes instructions on how\n  to limit the number of results and gives examples of use cases.",
    "keywords": [
      "blis command",
      "print latest insider sales",
      "OpenInsider source",
      "limit results",
      "use cases",
      "command usage",
      "data display",
      "data rows"
    ]
  },
  "stocks.ins.blop": {
    "title": "blop",
    "description": "'Documentation for ''blop'': a tool for displaying the latest officer\n  purchases in the stock market. The documentation covers usage, parameters, and provides\n  examples of insider data results including company and insider name, trade type,\n  price, quantity, ownership changes, and value.'",
    "keywords": [
      "blop",
      "officer purchases",
      "stock market",
      "insider data",
      "trade type",
      "purchase",
      "company name",
      "insider name",
      "price",
      "quantity",
      "ownership",
      "value"
    ]
  },
  "stocks.ins.blos": {
    "title": "blos",
    "description": "This Blos command page provides information on how to display the latest\n  officer sales 100k. It gives a detailed explanation of parameters, default values\n  and choices. It also provides clear examples, describing the output format and each\n  field's meaning.",
    "keywords": [
      "blos command",
      "officer sales",
      "OpenInsider",
      "datarows display",
      "command usage",
      "parameters",
      "derivative transaction",
      "multiple transactions",
      "filing date",
      "trade date",
      "company name",
      "insider name",
      "title",
      "trade type",
      "price",
      "quantity",
      "owned",
      "diff own",
      "value"
    ]
  },
  "stocks.ins.filter": {
    "title": "filter",
    "description": "Optimize your open insider data using the filter function. This guide\n  provides details on its usage, parameters, and examples, instructing users on how\n  to limit data rows and configure hyperlinks to meet their needs. Learn how to navigate\n  through stock market transactions, including sales and derivative transactions efficiently.",
    "keywords": [
      "OpenInsider",
      "filter",
      "insider filtered data",
      "derivative transaction",
      "securities",
      "stock market",
      "stock transactions",
      "data display"
    ]
  },
  "stocks.ins.lcb": {
    "title": "lcb",
    "description": "This page documents the usage of the lcb function, which is a Python\n  command to print the latest cluster buys in the stock market. It includes details\n  about the parameters used and provides examples of how to use it effectively. The\n  information is sourced from OpenInsider.",
    "keywords": [
      "lcb",
      "cluster buys",
      "openinsider",
      "python code",
      "code usage",
      "parameters",
      "data rows",
      "limit",
      "stock market",
      "stock data",
      "insider data"
    ]
  },
  "stocks.ins.lins": {
    "title": "lins",
    "description": "'The lins page provides detailed insight into insider trading activity.\n  It includes fields like Date, Relationship, Transaction, #Shares, Cost, Value ($),\n  #Shares Total, Insider Trading, SEC Form 4. This tool functions as a vital resource\n  for tracking insider trading data.'",
    "keywords": [
      "lins",
      "inside traders",
      "insider trading",
      "SEC Form 4",
      "Finviz",
      "stock market",
      "stock trading",
      "financial information",
      "trading data"
    ]
  },
  "stocks.ins.lip": {
    "title": "lip",
    "description": "Documentation for 'lip' command offers detailed instruction on its use\n  to track latest insider purchases in the stock market. It includes a demonstration\n  of its usage, parameter details, and real-life examples for user guidance.",
    "keywords": [
      "latest insider purchases",
      "OpenInsider",
      "stock market",
      "trading",
      "stock transactions",
      "stock trading script",
      "data display"
    ]
  },
  "stocks.ins.lis": {
    "title": "lis",
    "description": "Understand the usage of 'lis' function that prints latest insider sales\n  for stocks. You can limit the amount of datarows to be displayed. This comes from\n  OpenInsider source and can help understand Insider trading data.",
    "keywords": [
      "Print latest insider sales",
      "OpenInsider",
      "Stocks",
      "Insider data",
      "Trading",
      "Stock markets",
      "Financial data",
      "Script"
    ]
  },
  "stocks.ins.lit": {
    "title": "lit",
    "description": "This Docusaurus page provides access to the latest insider trading information.\n  With the lit function, users can limit the number of data rows to display and view\n  pertinent details like trade date, ticker, company name, insider name, title, trade\n  type, price, qty, owned, diff own and value.",
    "keywords": [
      "Insider trading",
      "OpenInsider",
      "lit function",
      "data rows",
      "trade date",
      "company name",
      "insider name",
      "title",
      "trade type",
      "price",
      "qty",
      "owned",
      "diff own",
      "value"
    ]
  },
  "stocks.ins.load": {
    "title": "load",
    "description": "This page provides clear instructions on how to load a stock ticker for\n  performing analysis, with special settings like loading an Indian ticker, defining\n  the timeframe, setting intraday minutes, including pre/after market hours, and more.\n  It also includes usage cases and available parameters.",
    "keywords": [
      "stock ticker",
      "stock analysis",
      "DEAR systems",
      "stock data",
      "data analysis",
      "finance analysis",
      "Indian stock market",
      "trading parameters",
      "Yahoo Finance",
      "custom data file",
      "monthly data",
      "weekly data",
      "prepost market hours",
      "intraday stock"
    ]
  },
  "stocks.ins.lpsb": {
    "title": "lpsb",
    "description": "The lpsb page provides a user guide on how to use the lpsb command to\n  print the latest penny stock buys. It shows parameters and usage examples, making\n  it easier for users to understand and use this function in their stock market analysis.",
    "keywords": [
      "penny stocks",
      "stock buy",
      "lpsb command",
      "user guide",
      "stock analysis",
      "command usage",
      "data analysis",
      "stock market",
      "trade data"
    ]
  },
  "stocks.ins.set": {
    "title": "set",
    "description": "This page provides instructions on how to set presets from the presets\n  folder. Various industry filter presets are available to tailor your usage.",
    "keywords": [
      "set preset",
      "presets folder",
      "filter presets",
      "python usage",
      "Industry presets"
    ]
  },
  "stocks.ins.stats": {
    "title": "stats",
    "description": "A documentation page detailing the usage and parameters of the 'stats'\n  function within the OpenInside software - used for filtering data using a selected\n  ticker.",
    "keywords": [
      "OpenInsider",
      "stats function",
      "ticker data",
      "filter data",
      "software documentation",
      "data visualization",
      "docusaurus",
      "parameters",
      "hyperlinks",
      "datarows",
      "limit",
      "Usage"
    ]
  },
  "stocks.ins.tippm": {
    "title": "tippm",
    "description": "This page provides information on the 'tippm' Python function which prints\n  data on the top insider purchases of the month. It includes usage details, parameters,\n  and examples of data rows from various companies such as Asana, Inc.",
    "keywords": [
      "tippm",
      "insider purchases",
      "stock information",
      "data display",
      "Asana, Inc.",
      "parameter",
      "examples"
    ]
  },
  "stocks.ins.tippw": {
    "title": "tippw",
    "description": "Learn how to use the tippw function to print the top insider purchases\n  of the week. Discover parameters and example usages that can be customized according\n  to your requirements.",
    "keywords": [
      "tippw",
      "insider purchases",
      "stock market",
      "financial data",
      "OpenInsider",
      "parameter usage",
      "python commands",
      "real-time data",
      "stock trading",
      "stock analysis tools"
    ]
  },
  "stocks.ins.tipt": {
    "title": "tipt",
    "description": "The page provides an overview and usage of the 'tipt' function, a tool\n  that prints the top insider purchases of the day from OpenInsider. With parameter\n  customization and examples, become more adept at monitoring insider stock purchases.",
    "keywords": [
      "tipt function",
      "insider purchases",
      "OpenInsider",
      "stock",
      "stock monitoring",
      "stock analysis",
      "guide",
      "usage",
      "tutorial",
      "data display",
      "trade"
    ]
  },
  "stocks.ins.tispm": {
    "title": "tispm",
    "description": "Metadata for the 'tispm' page on a stock marketing website. This page\n  provides information about the top insider sales of the month, including trade date,\n  ticker, company name, insider name, title, trade type, price, quantity, owned, diff\n  own, and value. The data can be customized and limited, sourced from OpenInsider.",
    "keywords": [
      "tispm",
      "insider sales",
      "stock marketing",
      "trade date",
      "company name",
      "insider name",
      "title",
      "trade type",
      "price",
      "quantity",
      "owned",
      "diff own",
      "value",
      "data display",
      "OpenInsider"
    ]
  },
  "stocks.ins.tispw": {
    "title": "tispw",
    "description": "tispw - A command line tool to fetch and present top insider sales of\n  the week from OpenInsider. Parameters for usage include the limit of datarows to\n  display. An important utility for those interested in stock market trends.",
    "keywords": [
      "tispw",
      "insider sales",
      "stock market",
      "OpenInsider",
      "data display",
      "parameters",
      "datarows",
      "command line tool"
    ]
  },
  "stocks.ins.tist": {
    "title": "tist",
    "description": "This page contains detailed instructions on how to use 'tist', a tool\n  to print top insider sales data of the day. Information on usage, parameters, and\n  options are provided.",
    "keywords": [
      "tist",
      "top insider sales",
      "OpenInsider",
      "usage instructions",
      "parameters",
      "options"
    ]
  },
  "stocks.ins.toppm": {
    "title": "toppm",
    "description": "The toppm command returns a comprehensive list of top officer purchases\n  of the month. It includes insider details such as filing date, trade date, ticker,\n  company name, insider name and more. You are able to limit the number of rows displayed\n  through the -l LIMIT parameter.",
    "keywords": [
      "toppm",
      "officer purchases",
      "insider data",
      "trade date",
      "company name",
      "insider name",
      "title",
      "trade type",
      "price",
      "quantity",
      "owned",
      "percentage difference",
      "value"
    ]
  },
  "stocks.ins.toppw": {
    "title": "toppw",
    "description": "The documentation page for 'toppw' which stands for 'top officer purchases\n  of the week', sourced from OpenInsider. Displays insider trading data including\n  filing date, trade date, ticker, company name, and related details.",
    "keywords": [
      "toppw",
      "insider trading",
      "OpenInsider",
      "stock market",
      "officer purchases",
      "trade data",
      "data display",
      "stock ticker"
    ]
  },
  "stocks.ins.topt": {
    "title": "topt",
    "description": "This page provides instructions on how to use the 'topt' function which\n  prints the top officer purchases of the day. It includes parameters for usage and\n  an understanding of the output.",
    "keywords": [
      "Topt",
      "Officer Purchases",
      "OpenInsider",
      "Usage",
      "Parameters",
      "Limit",
      "Datarows"
    ]
  },
  "stocks.ins.view": {
    "title": "view",
    "description": "This page provides instructions on how to view the available presets\n  in the preset folder using the view function. It also provides details about parameters\n  such as preset names.",
    "keywords": [
      "view function",
      "using presets",
      "parameter description",
      "programming",
      "software development",
      "coding instructions"
    ]
  },
  "stocks.options.binom": {
    "title": "binom",
    "description": "This page is an in-depth guide to using the binom function for binomial\n  option valuation. It details the usage, parameters, and provides examples to assist\n  users.",
    "keywords": [
      "binom",
      "option valuation",
      "binomial option",
      "Strike price",
      "put value",
      "European option",
      "American option",
      "export excel",
      "plot values",
      "volatility"
    ]
  },
  "stocks.options.calc": {
    "title": "calc",
    "description": "Learn about 'calc', a tool to calculate profit or loss for given option\n  settings for strikes, premium, and selling contracts with default and optional preferences.\n  Include examples and a profit chart for better understanding.",
    "keywords": [
      "calc",
      "profit calculator",
      "option settings",
      "put option",
      "sell option",
      "strike price",
      "premium price",
      "profit chart"
    ]
  },
  "stocks.options.chains": {
    "title": "chains",
    "description": "Detailed guide on how to display option chains with python usage. Documentation\n  includes parameters for call options, put options, strike price, ask size, bid size,\n  volume, open interest and others, along with their default values and options.",
    "keywords": [
      "option chains",
      "parameters",
      "python usage",
      "call options",
      "put options",
      "strike price",
      "ask size",
      "bid size",
      "volume",
      "open interest",
      "delta",
      "gamma",
      "theta",
      "vega",
      "ask iv",
      "bid iv",
      "mid iv"
    ]
  },
  "stocks.options.exp": {
    "title": "exp",
    "description": "The 'exp' page provides comprehensive details on setting expiration dates\n  using the 'exp' command in Python. It includes information on usage, parameters,\n  and examples to assist users in understanding and effectively managing dates.",
    "keywords": [
      "exp documentation",
      "expiration date setting",
      "expiry date tool",
      "expiry date parameters",
      "exp usage",
      "exp examples",
      "exp command",
      "exp date selection"
    ]
  },
  "stocks.options.greeks": {
    "title": "greeks",
    "description": "This documentation page describes the greeks command, which retrieves greeks for a given option.",
    "keywords": [
      "greeks",
      "delta",
      "gamma",
      "theta",
      "vega"
    ]
  },
  "stocks.options.grhist": {
    "title": "grhist",
    "description": "The grhist page is dedicated to illustrating how to plot historical option\n  greeks using Python. It includes various parameters like strike price, put option,\n  greek column, OCC option symbol, raw data, among others. It also demonstrates the\n  use of a certain data visualization for better understanding.",
    "keywords": [
      "grhist",
      "historical option greeks plot",
      "option greeks",
      "put option",
      "strike price",
      "greek column",
      "OCC option symbol",
      "raw data",
      "data visualization"
    ]
  },
  "stocks.options.hist": {
    "title": "hist",
    "description": "The page provides a method to get historical quotes for the provided\n  option chain using Python. It details the usage and parameters required, including\n  the strike price, put option flag, and OCC option symbol. Example code and output\n  are provided.",
    "keywords": [
      "historical quotes",
      "option chain",
      "strike price",
      "put option",
      "OCC option symbol",
      "code example"
    ]
  },
  "stocks.options.info": {
    "title": "info",
    "description": "This page provides information about a command 'info' that displays option\n  data. It includes details about usage, parameters, and examples of how to use the\n  command in a Python environment. The page is particularly useful for individuals\n  interested in stock options data.",
    "keywords": [
      "Info command",
      "Option data",
      "Python environment",
      "Stock options data",
      "Command usage",
      "Command parameters",
      "Command examples",
      "Implied volatility",
      "Historical volatility",
      "Put/Call Vol ratio",
      "Today's volume",
      "Open interest"
    ]
  },
  "stocks.options.load": {
    "title": "load",
    "description": "This documentation page includes detailed instructions on how to load\n  a stock ticker into the option menu using a specific command. It outlines each step\n  and provides multiple examples for better understanding.",
    "keywords": [
      "load command",
      "stock ticker",
      "options",
      "stock trading",
      "stock options",
      "command line interface",
      "trading tool",
      "trading instructions",
      "TSLA"
    ]
  },
  "stocks.options.oi": {
    "title": "oi",
    "description": "This page provides a detailed explanation on how to plot open interest\n  using various parameters such as min, max, calls, and puts. It also includes usage\n  examples.",
    "keywords": [
      "Open interest",
      "Tutorial",
      "Parameters",
      "Option trading"
    ]
  },
  "stocks.options.parity": {
    "title": "parity",
    "description": "The parity page provides details about whether options are over or under\n  valued. It includes usage examples, parameters definition and their choices.",
    "keywords": [
      "parity",
      "over or under valued options",
      "parameters",
      "options valuation",
      "example usage"
    ]
  },
  "stocks.options.pcr": {
    "title": "pcr",
    "description": "This marketing webpage demonstrates the usage of the 'pcr' function that\n  displays put to call ratio for a particular ticker. It includes a detailed parameters'\n  list and a plot for visualization.",
    "keywords": [
      "Put Call Ratio",
      "AlphaQuery",
      "pcr function",
      "visualization",
      "parameters description"
    ]
  },
  "stocks.options.plot": {
    "title": "plot",
    "description": "Plot documentation page provides information on how to show a plot for\n  the given x and y variables, with variables being last trade date, strike, last\n  price, bid, ask, percentage change, volume, open interest, implied volatility and\n  more. It also shows usage examples and available customizations.",
    "keywords": [
      "plot",
      "show plot",
      "trade date",
      "strike",
      "last price",
      "bid",
      "ask",
      "change",
      "percent change",
      "volume",
      "open interest",
      "implied volatility",
      "stocks",
      "options",
      "graph",
      "custom graphs",
      "smile"
    ]
  },
  "stocks.options.unu": {
    "title": "unu",
    "description": "The documentation covers the essential parameters and usage of unu command\n  in fdscanner.com. Unu command is a powerful tool for displaying, sorting, and filtering\n  unusual options in market data. The user can set the limit of options to show, sort\n  data by default and optional variables, reverse the data order, and flag to show\n  puts or calls only.",
    "keywords": [
      "unu command",
      "fdscanner.com",
      "market data",
      "data display",
      "stock options",
      "Vol/OI",
      "Limit",
      "sortby",
      "reverse",
      "puts_only",
      "calls_only",
      "unusual options",
      "Python script"
    ]
  },
  "stocks.options.voi": {
    "title": "voi",
    "description": "The voi page provides a guide on how to plot Volume + Open Interest of\n  calls vs puts with parameters like minimum volume, minimum strike price and maximum\n  strike price. It's an integral part of a python-based toolkit.",
    "keywords": [
      "voi",
      "Volume",
      "Open Interest",
      "strike price",
      "plot",
      "minimum volume",
      "maximum strike price"
    ]
  },
  "stocks.options.vol": {
    "title": "vol",
    "description": "The 'vol' page provides command-line instructions for plotting volumes.\n  It deals with parameters like minimal and maximal strikes, calls, and puts. The\n  page is mainly focused on contracts traded today and the plotting of call or put\n  options only.",
    "keywords": [
      "vol",
      "volume",
      "contracts traded",
      "plot volume",
      "min strike",
      "max strike",
      "calls",
      "puts",
      "options"
    ]
  },
  "stocks.options.vsurf": {
    "title": "vsurf",
    "description": "Learn the usage of vsurf, a Python tool for plotting a 3D volatility\n  surface. Understand the parameters and see a sample representation.",
    "keywords": [
      "vsurf",
      "3D volatility surface",
      "IV",
      "OI",
      "LP",
      "data visualization"
    ]
  },
  "stocks.options.hedge.add": {
    "title": "add",
    "description": "This page guides on the usage of the 'add' command to add options to\n  the trading diagram. The command has parameters allowing the user to buy a put instead\n  of a call, short an option, and specify an option's identifier.",
    "keywords": [
      "trade options",
      "options trading",
      "options diagram",
      "add command",
      "buy put",
      "short option",
      "option identifier",
      "options command",
      "options parameters",
      "command usage"
    ]
  },
  "stocks.options.hedge.list": {
    "title": "list",
    "description": "The 'list' page details available calls and puts commands that have no\n  parameters. It presents a step-by-step guide on using the 'list' command along with\n  examples.",
    "keywords": [
      "list command",
      "calls and puts",
      "stock options",
      "command parameters",
      "command usage",
      "command examples"
    ]
  },
  "stocks.options.hedge.pick": {
    "title": "pick",
    "description": "Learn how to use the 'pick' function to plot option hedge diagrams. Discover\n  parameters like amount investment and what options to pick.",
    "keywords": [
      "Option hedge diagrams",
      "Investment",
      "Long call",
      "Long put",
      "Short call",
      "Short put",
      "Seed investment"
    ]
  },
  "stocks.options.hedge.plot": {
    "title": "plot",
    "description": "The 'plot' function is central to mapping out option payoff diagrams\n  with no required parameters. Ideal for financial strategies visualization.",
    "keywords": [
      "plot function",
      "option payoff diagrams",
      "no parameters",
      "financial strategies visualization"
    ]
  },
  "stocks.options.hedge.rmv": {
    "title": "rmv",
    "description": "This documentation page outlines the usage, parameters and examples for\n  the rmv command in the hedge. With rmv, you can efficiently remove one of the options\n  shown in the hedge or all of them.",
    "keywords": [
      "rmv command",
      "hedge options",
      "remove option",
      "stocks options",
      "programming command",
      "command usage",
      "command parameters",
      "command examples"
    ]
  },
  "stocks.options.hedge.sop": {
    "title": "sop",
    "description": "The sop command in this documentation demonstrates how to view selected\n  options in a stock hedge. It provides usage, parameter details, and practical examples.",
    "keywords": [
      "sop",
      "parameters",
      "options",
      "stocks",
      "hedge",
      "add",
      "implied volatility"
    ]
  },
  "stocks.options.pricing.add": {
    "title": "add",
    "description": "This page demonstrates how to use the 'add' function to input a projected\n  stock price and its chance of occurrence into a data set. The tutorial is detailed\n  and includes examples for easy comprehension.",
    "keywords": [
      "Stock Market",
      "Stock Pricing",
      "Stock Options",
      "Pricing Projection",
      "Options Pricing",
      "Price Addition"
    ]
  },
  "stocks.options.pricing.rmv": {
    "title": "rmv",
    "description": "The rmv command allows users to remove a price from the list in the stock\n  options pricing tool. It is a vital feature in the command line interface market\n  tool, which provides flexibility in managing price lists.",
    "keywords": [
      "rmv command",
      "remove price",
      "stock options price",
      "command line interface",
      "price list",
      "market tools"
    ]
  },
  "stocks.options.pricing.rnval": {
    "title": "rnval",
    "description": "The rnval page provides detailed information about calculating the risk\n  neutral value of options, with steps to use the 'rnval' function. It includes detailed\n  parameters like strike prices and risk-free rates along with examples to aid comprehension.",
    "keywords": [
      "rnval",
      "risk neutral value",
      "options",
      "stock options",
      "strike price",
      "risk-free rate"
    ]
  },
  "stocks.options.pricing.show": {
    "title": "show",
    "description": "This page provides the 'show' command, used to display stock option price\n  and it's estimated chance. It comes without parameters.",
    "keywords": [
      "show command",
      "stock options",
      "display prices",
      "no parameters",
      "stock price estimation"
    ]
  },
  "stocks.options.screen.scr": {
    "title": "scr",
    "description": "The page describes the usage, parameters and functions of the scr command.\n  It includes details about various presets like high_IV, TSLA_Poots, SPY_ATM_Calls\n  among others and key concepts like Implied Volatility and Price-to-book.",
    "keywords": [
      "Screener filter",
      "syncretism",
      "high IV",
      "TSLA Poots",
      "SPY ATM Calls",
      "Implied Volatility",
      "Open Interest",
      "Price-to-book",
      "scr command",
      "SPY ATM Poots"
    ]
  },
  "stocks.options.screen.set": {
    "title": "set",
    "description": "This page provides documentation on how to set presets from both custom\n  and default ones for filters. Instructions for usage along with parameters are described\n  in detail.",
    "keywords": [
      "set presets",
      "custom presets",
      "default presets",
      "filter presets",
      "set filter presets",
      "instructions",
      "parameters",
      "usage"
    ]
  },
  "stocks.options.screen.view": {
    "title": "view",
    "description": "This page provides guidance on using view feature that offers preset\n  options under the presets folder. The categories include template.ini, high_IV.ini,\n  among others. Learn how to effectively use the view command in Python.",
    "keywords": [
      "presets",
      "usage",
      "parameters",
      "view"
    ]
  },
  "stocks.qa.acf": {
    "title": "acf",
    "description": "Explore Auto-Correlation and Partial Auto-Correlation Functions for diff\n  and diff diff stock data using the acf Python script command. Understand maximum\n  lags to display in plots.",
    "keywords": [
      "Auto-Correlation",
      "Partial Auto-Correlation",
      "diff stock data",
      "acf",
      "lags",
      "maximum lags"
    ]
  },
  "stocks.qa.beta": {
    "title": "beta",
    "description": "This page displays a scatter plot demonstrating the beta of two stocks\n  or ETFs, provides usage and parameters, including the reference ticker used for\n  beta calculation with a default of 'SPY'.",
    "keywords": [
      "beta",
      "stocks",
      "ETFs",
      "scatter plot",
      "beta calculation",
      "SPY"
    ]
  },
  "stocks.qa.bw": {
    "title": "bw",
    "description": "The page provides details about the 'bw' command in Python for generating\n  Box and Whisker plots. It includes usage, parameters, and an example visual output.",
    "keywords": [
      "Box and Whisker plot",
      "bw command",
      "Parameter usage",
      "Plot Visualization"
    ]
  },
  "stocks.qa.capm": {
    "title": "capm",
    "description": "The capm page offers detailed information on analysing a stock's risk\n  in comparison to the market risk. Learn to use the 'capm' command and understand\n  Beta, Systematic Risk, and Unsystematic Risk in stock analysis.",
    "keywords": [
      "capm",
      "stock risk",
      "market risk",
      "beta",
      "systematic risk",
      "unsystematic risk",
      "stock analysis"
    ]
  },
  "stocks.qa.cdf": {
    "title": "cdf",
    "description": "The 'cdf' page outlines the usage and parameters of the cumulative distribution\n  function within python coding. It also includes examples and an illustrative visual\n  aid.",
    "keywords": [
      "Cumulative distribution function",
      "cdf",
      "coding",
      "parameters",
      "examples",
      "usage",
      "export functions"
    ]
  },
  "stocks.qa.cusum": {
    "title": "cusum",
    "description": "Learn to use the Cumulative Sum Algorithm (CUSUM) to effortlessly detect\n  abrupt changes in your data. Understand parameters like threshold and drift to improve\n  your data analysis.",
    "keywords": [
      "cumulative sum algorithm",
      "CUSUM",
      "abrupt changes detection",
      "data analysis",
      "threshold",
      "drift"
    ]
  },
  "stocks.qa.decompose": {
    "title": "decompose",
    "description": "'Decompose time series guide and examples: additive and multiplicative\n  models. Includes usage, parameters, and example output for time series decomposition.'",
    "keywords": [
      "Decompose",
      "Time Series",
      "Additive Time Series",
      "Multiplicative Time Series",
      "Level",
      "CyclicTrend",
      "Residual",
      "Seasonality",
      "Usage",
      "Parameters",
      "Example"
    ]
  },
  "stocks.qa.es": {
    "title": "es",
    "description": "Documentation page for using the Expected Shortfall (ES) function in\n  Python. Provides detailed examples, parameter usage, and options for calculations.",
    "keywords": [
      "Expected Shortfall",
      "stock",
      "distribution",
      "percentile",
      "ES",
      "calculations"
    ]
  },
  "stocks.qa.hist": {
    "title": "hist",
    "description": "This page provides a guide on how to use 'hist' function in Python which\n  plots a histogram with density and rug. It also includes parameters related information\n  and usage syntax.",
    "keywords": [
      "Histogram",
      "Density",
      "Rug",
      "Usage",
      "Parameters",
      "n_bins"
    ]
  },
  "stocks.qa.kurtosis": {
    "title": "kurtosis",
    "description": "A deeper look into Kurtosis, a measure of probability distribution of\n  a real-valued random variable. The page also demonstrates how to use it with python,\n  especially setting the window length (n_window).",
    "keywords": [
      "Kurtosis",
      "probability distribution",
      "real-valued random variable",
      "skewness",
      "theoretical distribution",
      "n_window",
      "window length"
    ]
  },
  "stocks.qa.line": {
    "title": "line",
    "description": "Learn how to create a line plot of selected data with the option to highlight\n  specific datetimes using vertical line markers and scatter markers. You can also\n  plot with y on the log scale.",
    "keywords": [
      "line plot",
      "data visualization",
      "plotting data",
      "scatter markers",
      "vertical line markers",
      "log scale"
    ]
  },
  "stocks.qa.load": {
    "title": "load",
    "description": "This page provides information on loading stock tickers for analysis\n  and includes usage examples and parameters details. It also explains how to handle\n  Indian tickers and find available markets.",
    "keywords": [
      "stock analysis",
      "load stock ticker",
      "financial data",
      "stock market data",
      "Indian stock market",
      "financial analysis parameters",
      "market hours",
      "custom file loading",
      "intraday stock minutes",
      "monthly data",
      "weekly data"
    ]
  },
  "stocks.qa.normality": {
    "title": "normality",
    "description": "This page provides information on normality tests, including usage, parameters,\n  and examples. It includes different statistical tests such as Kurtosis, Skewness,\n  Jarque-Bera, Shapiro-Wilk, and Kolmogorov-Smirnov.",
    "keywords": [
      "Normality tests",
      "Normality Statistics",
      "Kurtosis",
      "Skewness",
      "Jarque-Bera",
      "Shapiro-Wilk",
      "Kolmogorov-Smirnov",
      "p-value",
      "Statistic"
    ]
  },
  "stocks.qa.om": {
    "title": "om",
    "description": "This page provides detailed guidance on how to use the omega ratio function\n  (om) for stock analysis with Python, including usage instructions and parameters.",
    "keywords": [
      "omega ratio",
      "stock analysis",
      "financial analytics",
      "stock market"
    ]
  },
  "stocks.qa.pick": {
    "title": "pick",
    "description": "This page provides information on how to select different parameters\n  (like high, low, close etc.) for daily stock analysis, especially for TSLA stocks.\n  It explains the usage of the 'pick' command within the Python environment for stock\n  parameter selection.",
    "keywords": [
      "target variable",
      "stock analysis",
      "daily stock",
      "tsla stock",
      "pick",
      "stock parameter selection",
      "stock market",
      "stock data manipulation",
      "market data",
      "financial data analysis",
      "time series data"
    ]
  },
  "stocks.qa.qqplot": {
    "title": "qqplot",
    "description": "Discover the usage of QQ plot in Python to help with data visualization\n  of normal quantiles. This page provides information with no parameters required\n  to use it.",
    "keywords": [
      "qqplot",
      "normal quantiles",
      "data visualization"
    ]
  },
  "stocks.qa.quantile": {
    "title": "quantile",
    "description": "This page provides insights into the concept of 'Quantile' and how it's\n  used for dividing a distribution. It includes parameter details such as n_window\n  and f_quantile and usage information with Python.",
    "keywords": [
      "quantile",
      "distribution",
      "median",
      "n_window",
      "f_quantile",
      "observations"
    ]
  },
  "stocks.qa.raw": {
    "title": "raw",
    "description": "This page explains the 'raw' function related to financial data manipulation,\n  including its usage, parameters and some examples on how to use it in Python. It\n  cover topics such as sorting raw data, displaying limit number of data points and\n  reverse sorting.",
    "keywords": [
      "raw data",
      "financial data",
      "data manipulation",
      "sorting raw data",
      "reverse sorting",
      "display limit"
    ]
  },
  "stocks.qa.rolling": {
    "title": "rolling",
    "description": "The document displays a brief overview about rolling mean and standard\n  deviation. It includes usage explanation, parameters description with special emphasis\n  on window length and an illustrative diagram.",
    "keywords": [
      "Rolling mean",
      "Standard deviation",
      "Usage",
      "Parameters",
      "n_window",
      "Window length"
    ]
  },
  "stocks.qa.sh": {
    "title": "sh",
    "description": "A comprehensive documentation page provides information about the Sharpe\n  ratio of a selected stock. It includes parameters such as risk-free return and rolling\n  window length, along with their usage presented in Python code.",
    "keywords": [
      "Sharpe Ratio",
      "Stock",
      "Risk Free Return",
      "Rolling Window Length",
      "Finance",
      "Investment"
    ]
  },
  "stocks.qa.skew": {
    "title": "skew",
    "description": "The skew page describes skewness as a measure of asymmetry or distortion\n  of a symmetric distribution, such as a normal distribution. Skewness measures the\n  deviation of a random variable from a symmetric distribution. The page also details\n  the usage and parameters of the 'skew' function.",
    "keywords": [
      "skew",
      "asymmetry",
      "symmetric distribution",
      "normal distribution",
      "deviation",
      "n_window parameter"
    ]
  },
  "stocks.qa.so": {
    "title": "so",
    "description": "This page provides information on how to calculate the Sortino ratio\n  of a selected stock, including parameters for target return, adjusting the Sortino\n  ratio for comparison with the Sharpe ratio, and setting the rolling window length.",
    "keywords": [
      "sortino ratio",
      "stock analysis",
      "target return",
      "adjusted sortino ratio",
      "rolling window length",
      "sharpe ratio",
      "investment strategy"
    ]
  },
  "stocks.qa.spread": {
    "title": "spread",
    "description": "The 'spread' page shows the rolling spread measurement. Users can learn\n  how to use the 'spread' command, including its parameters such as 'n_window' which\n  defines the window length.",
    "keywords": [
      "spread",
      "rolling spread measurement",
      "n_window",
      "window length"
    ]
  },
  "stocks.qa.summary": {
    "title": "summary",
    "description": "Documentation for the 'summary' function on the marketing website. This\n  feature provides detailed summary statistics on stocks, including parameters like\n  open, high, low, close, adjclose, volume, returns, and more.",
    "keywords": [
      "summary function",
      "stocks",
      "statistics",
      "stock data",
      "stock volume",
      "stock returns",
      "data analysis",
      "market analysis",
      "open price",
      "close price",
      "high price",
      "low price",
      "adjusted close price"
    ]
  },
  "stocks.qa.unitroot": {
    "title": "unitroot",
    "description": "This documentation page provides a detailed guide on how to use 'unitroot',\n  a python function for executing unit root tests including ADF and KPSS. It includes\n  parameters details, their choices, and usage examples.",
    "keywords": [
      "unitroot",
      "ADF",
      "KPSS",
      "stationarity",
      "root test",
      "fuller_reg",
      "kpss_reg",
      "regression",
      "stock",
      "statistics"
    ]
  },
  "stocks.qa.var": {
    "title": "var",
    "description": "The page provides a comprehensive guide on the usage of 'var' command\n  for calculating Value at Risk (VaR) of selected stocks. It includes details on parameters,\n  usage, and examples.",
    "keywords": [
      "Value at Risk",
      "var",
      "stocks",
      "stock trading",
      "VaR calculation",
      "portfolio management",
      "risk management",
      "quantitative analysis",
      "financial tools"
    ]
  },
  "stocks.screener.financial": {
    "title": "financial",
    "description": "This page details the use of the financial function that displays filtered\n  financial data of relevant companies. It details the various parameters including\n  preset filters, data sorting instructions, stock limits and more.",
    "keywords": [
      "financial data",
      "financial filtering",
      "preset filters",
      "data sort",
      "stock limits",
      "financial parameters",
      "data ascending",
      "data descending",
      "financial commands",
      "financial programming",
      "python financial commands",
      "stock market commands",
      "stock analysis"
    ]
  },
  "stocks.screener.historical": {
    "title": "historical",
    "description": "The page outlines the use of the historical function, allowing users\n  to compare stock prices of companies historically. It provides details on usage\n  and parameters such as limits, date formats, types of candles, and more. The data\n  comes from sources like Yahoo Finance.",
    "keywords": [
      "historical",
      "price comparison",
      "similar companies",
      "Yahoo Finance",
      "parameters",
      "limit",
      "no_scale",
      "start",
      "type_candle",
      "date format",
      "shorted stocks"
    ]
  },
  "stocks.screener.overview": {
    "title": "overview",
    "description": "This documentation provides a comprehensive guide on the overview function\n  which displays a brief data of companies based on predefined filters. It can limit\n  the stocks to print, reverse the sorting order, and sort table elements.",
    "keywords": [
      "overview",
      "filter presets",
      "limit",
      "reverse",
      "sort",
      "stocks",
      "stock print",
      "data sorting",
      "table elements",
      "stock analysis",
      "commands",
      "parameters",
      "pre-set filtering"
    ]
  },
  "stocks.screener.ownership": {
    "title": "ownership",
    "description": "This documentation page includes detailed information about the 'ownership'\n  feature. Users can learn about the usage, available parameters, and filtering presets\n  to extract specific ownership data of companies.",
    "keywords": [
      "ownership",
      "ownership data",
      "companies data",
      "usage",
      "parameters",
      "preset",
      "filter presets",
      "limit",
      "reverse",
      "sort",
      "stocks"
    ]
  },
  "stocks.screener.performance": {
    "title": "performance",
    "description": "This page outlines the parameters and usage for retrieving performance\n  data of various stocks, using predefined filter presets. It provides different ways\n  of sorting and limiting the data output.",
    "keywords": [
      "performance data",
      "filter presets",
      "stock analysis",
      "top performers",
      "overbought stocks",
      "oversold stocks",
      "stock sorting",
      "stock scanning",
      "stock volatility",
      "stock volume"
    ]
  },
  "stocks.screener.set": {
    "title": "set",
    "description": "Page provides instructions and usage methods on how to set presets from\n  custom and default ones in Python. It includes a wide array of parameters for filtering\n  presets.",
    "keywords": [
      "set",
      "preset",
      "parameters",
      "filter presets",
      "oversold_under_5dol",
      "potential_reversals",
      "top_performers_all",
      "death_cross",
      "unusual_volume",
      "news_scanner",
      "cheap_bottom_dividend",
      "cheap_dividend",
      "top_performers_healthcare",
      "bull_runs_over_10pct",
      "value_stocks",
      "golden_cross",
      "growth_stocks",
      "channel_up_and_low_debt_and_sma_50and200",
      "buffett_like",
      "continued_momentum_scan",
      "analyst_strong_buy",
      "under_15dol_stocks",
      "5pct_above_low",
      "cheap_oversold",
      "weak_support_and_top_performers",
      "undervalue",
      "oversold_under_3dol",
      "top_performers_tech",
      "rosenwald_gtfo",
      "recent_growth_and_support",
      "heavy_inst_ins",
      "modified_neff",
      "simplistic_momentum_scanner_under_7dol",
      "golden_cross_penny",
      "break_out_stocks",
      "high_vol_and_low_debt",
      "stocks_strong_support_levels",
      "sexy_year",
      "short_squeeze_scan",
      "oversold",
      "rosenwald",
      "modified_dreman",
      "top_gainers",
      "top_losers",
      "new_high",
      "new_low",
      "most_volatile",
      "most_active",
      "overbought",
      "downgrades",
      "upgrades",
      "earnings_before",
      "earnings_after",
      "recent_insider_buying",
      "recent_insider_selling",
      "major_news",
      "horizontal_sr",
      "tl_resistance",
      "tl_support",
      "wedge_up",
      "wedge_down",
      "wedge",
      "triangle_ascending",
      "triangle_descending",
      "channel_up",
      "channel_down",
      "channel",
      "double_top",
      "double_bottom",
      "multiple_top",
      "multiple_bottom",
      "head_shoulders",
      "head_shoulders_inverse"
    ]
  },
  "stocks.screener.technical": {
    "title": "technical",
    "description": "This page provides a comprehensive guide to the 'technical' functionality\n  of our platform. It explains how to use presets to filter and print technical data\n  of companies, and describes the functions of different parameters.",
    "keywords": [
      "technical data",
      "stock filtering",
      "stock analytics",
      "financial tools",
      "preset filters",
      "stock parameters",
      "data sorting",
      "financial data analysis"
    ]
  },
  "stocks.screener.valuation": {
    "title": "valuation",
    "description": "Marketing website page providing a tool to print valuation data of various\n  stocks based on a set of pre-defined filters, further offering various parametric\n  controls to refine and customize the output.",
    "keywords": [
      "valuation tool",
      "stock market",
      "market filters",
      "financial data",
      "stock parameters",
      "data sort",
      "parameter limit",
      "preset filters",
      "Python commands",
      "investment tool",
      "stock analysis"
    ]
  },
  "stocks.screener.view": {
    "title": "view",
    "description": "The page provides information on the 'view' function which allows one\n  to view available presets under the presets folder. It includes the usage in Python\n  and parameters that can be set, aiding in stock analysis.",
    "keywords": [
      "view",
      "presets",
      "parameters",
      "preset options",
      "usage",
      "custom preset",
      "stock analysis"
    ]
  },
  "stocks.sia.country": {
    "title": "country",
    "description": "This page provides documentation about using the 'country' command. Explore\n  country details or set a specific country using the proper command syntax.",
    "keywords": [
      "country command",
      "Python country command",
      "command usage",
      "command parameters",
      "country selection",
      "country details",
      "optional parameters"
    ]
  },
  "stocks.sia.cpci": {
    "title": "cpci",
    "description": "This page provides information on the usage and parameters of 'cpci',\n  a tool for analyzing Companies per Country based on Industry and Market Cap. It\n  helps users understand how to input parameters and what effect each one has on the\n  output.",
    "keywords": [
      "cpci",
      "companies per country",
      "industry",
      "market cap",
      "parameters",
      "usage",
      "data analysis",
      "raw data",
      "maximum number of countries to display",
      "minimum percentage to display country"
    ]
  },
  "stocks.sia.cpcs": {
    "title": "cpcs",
    "description": "CPCS is a powerful tool that allows users to view company distribution\n  based on various parameters like sector, market cap and more. It offers customizable\n  options to control the data display.",
    "keywords": [
      "CPCS",
      "Company distribution by Country, Sector and Market Cap",
      "Country distribution data",
      "Sector distribution data",
      "Market cap data",
      "Data visualization",
      "Data customization"
    ]
  },
  "stocks.sia.cpic": {
    "title": "cpic",
    "description": "This is a documentation page for CPIC, a tool that displays companies\n  per industry based on country and market cap. It allows users to adjust parameters\n  such as the maximum number of industries to display and the minimum percentage to\n  display an industry.",
    "keywords": [
      "CPIC",
      "companies per industry",
      "country",
      "market cap",
      "maximum industries to display",
      "minimum percentage to display industry",
      "raw data",
      "business tool",
      "data visualization"
    ]
  },
  "stocks.sia.cpis": {
    "title": "cpis",
    "description": "This documentation pages describes the cpis command which allows users to visualize companies per industry based on sector and market cap",
    "keywords": [
      "sector",
      "industry",
      "market cap"
    ]
  },
  "stocks.sia.cps": {
    "title": "cps",
    "description": "A comprehensive guide on how to use the CPS tool for displaying Companies\n  per Sectors based on Country and Market Cap. It provides detailed explanation about\n  the command-line parameters, their options and usage.",
    "keywords": [
      "CPS tool",
      "Companies per Sectors",
      "Country and Market Cap",
      "command-line parameters",
      "max sectors to display",
      "min percentage to display sector",
      "output all raw data",
      "data visualization"
    ]
  },
  "stocks.sia.exchange": {
    "title": "exchange",
    "description": "This page provides comprehensive information and usage of the 'exchange'\n  command for swapping the international exchanges flag. Specifically, it outlines\n  the parameters for this operation.",
    "keywords": [
      "exchange",
      "swap",
      "international exchanges",
      "parameters"
    ]
  },
  "stocks.sia.industry": {
    "title": "industry",
    "description": "This page provides information on how to view existing industries or\n  setting an industry using parameters. It includes usage, choices, and optional settings\n  for the 'industry' function.",
    "keywords": [
      "industry",
      "industry selection",
      "set industry",
      "industry parameters",
      "industry usage"
    ]
  },
  "stocks.sia.metric": {
    "title": "metric",
    "description": "An informational page detailing the usage and parameters of the 'metric'\n  function. This function allows you to visualize various business and economic metrics\n  such as return on assets (roa), return on equity (roe), current ratio (cr), and\n  more. Understanding these metrics can aid in making informed financial and business\n  decisions.",
    "keywords": [
      "metric visualization",
      "roa",
      "roe",
      "cr",
      "qr",
      "de",
      "tc",
      "tcs",
      "tr",
      "rps",
      "rg",
      "eg",
      "pm",
      "gp",
      "gm",
      "ocf",
      "om",
      "fcf",
      "td",
      "ebitda",
      "ebitdam",
      "rec",
      "mc",
      "fte",
      "er",
      "bv",
      "ss",
      "pb",
      "beta",
      "fs",
      "peg",
      "ev",
      "fpe"
    ]
  },
  "stocks.sia.mktcap": {
    "title": "mktcap",
    "description": "This is an documentation page for 'mktcap', a tool that sets market cap\n  size to anything from Nano to Mega. Find usage instructions, parameters, and more.",
    "keywords": [
      "mktcap",
      "market cap",
      "Nano",
      "Micro",
      "Small",
      "Mid",
      "Large",
      "Mega",
      "nano",
      "micro",
      "small",
      "mid",
      "large",
      "mega"
    ]
  },
  "stocks.sia.period": {
    "title": "period",
    "description": "This page provides details on how to set the period parameter to define\n  the time frame as annual, quarterly, or trailing. Essential for marketing and SEO\n  strategies requiring data analysis within specific periods.",
    "keywords": [
      "period",
      "annual",
      "quarterly",
      "trailing",
      "parameters",
      "marketing"
    ]
  },
  "stocks.sia.sector": {
    "title": "sector",
    "description": "A documentation page outlining how-to instructions for setting sectors\n  in Python. It includes usage, parameters, and choices.",
    "keywords": [
      "Python instructions",
      "Setting sectors",
      "Command-line arguments",
      "Command Usage",
      "Parameters",
      "Programming documentation"
    ]
  },
  "stocks.sia.select": {
    "title": "select",
    "description": "The page provides detailed information on how to select a stock ticker\n  and customize industry, sector, country and market cap aligned with it. This includes\n  the usage guide and parameters to ensure smooth operations.",
    "keywords": [
      "Select Stock Ticker",
      "Ticker Parameters",
      "Industry Selection",
      "Sector Selection",
      "Country Selection",
      "Market Cap Selection"
    ]
  },
  "stocks.sia.vis": {
    "title": "vis",
    "description": "Use our platform to visualize important financial metrics like Balance\n  Sheet, Income, and Cash Flow Statements. Our tool provides an efficient metric visualization\n  facility and supports currency conversion for easy-use. Ideal for financial reporting\n  and analysis.",
    "keywords": [
      "metrics",
      "visualization",
      "balance sheet statement metrics",
      "income statement metrics",
      "cash flow statement metrics",
      "financial reporting",
      "accounting software",
      "currency conversion"
    ]
  },
  "stocks.ta.ad": {
    "title": "ad",
    "description": "An in-depth explanation of Accumulation/Distribution Line (AD), its interpretation,\n  and usage. The page also provides a Python script for the indicator and describes\n  its parameters.",
    "keywords": [
      "Accumulation/Distribution Line (AD)",
      "AD Indicator",
      "Close Location Value",
      "CLV",
      "Stock Market Indicator",
      "Python Script",
      "b_use_open",
      "On Balance Volume (OBV)",
      "Volume Times"
    ]
  },
  "stocks.ta.adosc": {
    "title": "adosc",
    "description": "The Accumulation/Distribution Oscillator, also known as adosc or the\n  Chaikin Oscillator, is a momentum indicator that considers both the strength of\n  price moves and the underlying buying and selling pressure during a certain period.\n  Readings above zero signify net buying pressure, while those below zero signal net\n  selling pressure. Divergences between the indicator and explicit price movements\n  are the most prevalent signals, often denoting market turning points.",
    "keywords": [
      "adosc",
      "Accumulation/Distribution Oscillator",
      "Chaikin Oscillator",
      "momentum indicator",
      "buying and selling pressure",
      "market turning points",
      "price moves"
    ]
  },
  "stocks.ta.adx": {
    "title": "adx",
    "description": "Discover the purpose and usage of the ADX (Average Directional Index),\n  a Welles Wilder style moving average of the Directional Movement Index. Learn to\n  interpret the ADX values to determine the strength of a trend.",
    "keywords": [
      "ADX",
      "Welles Wilder",
      "Average Directional Index",
      "Directional Movement Index",
      "ADX interpretation",
      "ADX parameters",
      "ADX usage",
      "Trend strength",
      "Trend analysis"
    ]
  },
  "stocks.ta.aroon": {
    "title": "aroon",
    "description": "The page provides comprehensive details about the 'aroon' indicator,\n  a tool used in analytics to identify new trends. The explanation covers the significance\n  of the terms 'Aroon Up' and 'Aroon Down', as well as their impact on indicating\n  the occurrence and strength of upward and downward trends.",
    "keywords": [
      "aroon",
      "dawn's early light",
      "trend indicator",
      "upward trend",
      "downward trend",
      "crossovers",
      "Aroon Up",
      "Aroon Down",
      "n_length",
      "n_scalar",
      "trend strength"
    ]
  },
  "stocks.ta.atr": {
    "title": "atr",
    "description": "Technical documentation of the 'atr' function or Average True Range used\n  for measuring volatility in financial markets, particularly those arising due to\n  gaps or limit moves. The page highlights how to use the function using Python, its\n  parameters, and different modes.",
    "keywords": [
      "Averge True Range",
      "atr",
      "volatility measurement",
      "trading algorithms",
      "financial markets",
      "technical analysis",
      "ema",
      "sma",
      "wma",
      "hma",
      "zlma"
    ]
  },
  "stocks.ta.bbands": {
    "title": "bbands",
    "description": "A comprehensive guide to understanding and using Bollinger Bands for\n  optimizing trading strategies. Learn about overbought and oversold conditions, price\n  targets, and the intuitive 'bbands' command for Python.",
    "keywords": [
      "Bollinger Bands",
      "overbought conditions",
      "oversold conditions",
      "support level",
      "resistance level",
      "price target",
      "bbands command",
      "technical analysis",
      "trading strategy",
      "Bollinger Bands parameters"
    ]
  },
  "stocks.ta.cci": {
    "title": "cci",
    "description": "Learn about the Commodity Channel Index (CCI), a tool designed to detect\n  beginning and ending market trends. Find out how to use it and what its parameters\n  mean.",
    "keywords": [
      "CCI",
      "Commodity Channel Index",
      "market trends",
      "overbought conditions",
      "oversold conditions",
      "price divergence",
      "price correction",
      "n_length",
      "n_scalar"
    ]
  },
  "stocks.ta.cg": {
    "title": "cg",
    "description": "This document details the Center of Gravity indicator used to anticipate\n  future price movements and to speculate the next price change of an asset, providing\n  parameter descriptions, usage, and a demonstrative chart.",
    "keywords": [
      "Center of Gravity",
      "COG",
      "price movements",
      "oscillator",
      "market trend",
      "price reversal",
      "asset price speculation",
      "technical analysis"
    ]
  },
  "stocks.ta.clenow": {
    "title": "clenow",
    "description": "This page provides detailed information on the Clenow Volatility Adjusted\n  Momentum, including its usage, parameters, and Python code examples. Learn how to\n  adjust the lookback period for regression.",
    "keywords": [
      "clenow",
      "volatility adjusted momentum",
      "marketing website page",
      "lookback period for regression"
    ]
  },
  "stocks.ta.demark": {
    "title": "demark",
    "description": "This page provides insights into the calculation of the Demark sequential\n  indicator, its usage, and parameters. Ideal for those interested in Python programming,\n  data visualization, financial analysis, and trading indicators.",
    "keywords": [
      "Demark sequential indicator",
      "Demark calculation",
      "Indicator parameters",
      "Python programming",
      "Data visualization",
      "Financial analysis",
      "Trading indicators"
    ]
  },
  "stocks.ta.donchian": {
    "title": "donchian",
    "description": "This page provides in-depth details on Donchian Channels - an indicator\n  formed by upper and lower bands around a midrange or median band, and how to use\n  it with parameters in python.",
    "keywords": [
      "Donchian Channels",
      "moving average calculations",
      "security price",
      "upper band",
      "lower band",
      "midrange",
      "median band",
      "parameters",
      "n_length_upper",
      "n_length_lower"
    ]
  },
  "stocks.ta.ema": {
    "title": "ema",
    "description": "This is an explanation and usage guideline for the Exponential Moving\n  Average (EMA), a core tool in technical analysis. Learn about its distinction from\n  the Simple Moving Average and understand how it places greater contribution on recent\n  values, making it more responsive to changes in data.",
    "keywords": [
      "Exponential Moving Average",
      "technical analysis",
      "Simple Moving Average",
      "ema",
      "ema parameters",
      "ema usage"
    ]
  },
  "stocks.ta.fib": {
    "title": "fib",
    "description": "The page delivers documentation for the Python program 'fib', used to\n  calculate fibonacci retracement levels. It includes usage instructions, parameters\n  definition, and visual outputs.",
    "keywords": [
      "fibonacci retracement levels",
      "fib program",
      "period parameter",
      "start parameter",
      "end parameter",
      "date selection",
      "data analytics",
      "technical analysis tool"
    ]
  },
  "stocks.ta.fisher": {
    "title": "fisher",
    "description": "The page provides a comprehensive guide to the Fisher Transform, a technical\n  indicator by John F. Ehlers. It helps in highlighting extreme prices based on recent\n  values, identifying turning points, showing the trend and isolating price waves.\n  The functions, usage and parameters of the Fisher Transform are elaborately discussed.",
    "keywords": [
      "Fisher Transform",
      "technical indicator",
      "John F. Ehlers",
      "Gaussian normal distribution",
      "extreme prices",
      "turning points",
      "price of an asset",
      "trend indication",
      "price waves",
      "Fisher usage",
      "Fisher parameters"
    ]
  },
  "stocks.ta.hma": {
    "title": "hma",
    "description": "Hull Moving Average (HMA) is a moving average methodology that reduces\n  lag and increases curve smoothness. This page provides detailed usage information,\n  relevant parameters, and imagery references.",
    "keywords": [
      "Hull Moving Average",
      "HMA",
      "moving average",
      "market analysis",
      "lag reduction",
      "curve smoothness",
      "usage instruction",
      "parameters",
      "imagery"
    ]
  },
  "stocks.ta.kc": {
    "title": "kc",
    "description": "In-depth explanation and usage of the KC function for Keltner Channels;\n  including parameters, and how to utilize it to determine trend direction through\n  volatility-based bands.",
    "keywords": [
      "Keltner Channels",
      "volatility-based bands",
      "asset's price",
      "average true range",
      "ATR",
      "volatility",
      "trend direction",
      "kc",
      "n_length",
      "n_scalar",
      "s_mamode",
      "n_offset"
    ]
  },
  "stocks.ta.load": {
    "title": "load",
    "description": "This page provides detailed instructions on how to load a stock ticker\n  to perform analysis, complete with usage examples and parameters. It also provides\n  information on loading Indian tickers and references to data sources.",
    "keywords": [
      "load stock ticker",
      "perform stock analysis",
      "Indian stock ticker",
      "stock analysis parameters",
      "stock data usage",
      "data source",
      "intraday stock minutes",
      "pre/after market hours",
      "load custom file",
      "monthly data",
      "weekly data"
    ]
  },
  "stocks.ta.macd": {
    "title": "macd",
    "description": "This page explains the Moving Average Convergence Divergence (MACD),\n  a tool used in technical analysis to signal trend changes. By explaining the behaviour\n  of MACD under various conditions, understanding its usage, and highlighting its\n  parameters, it assists in generating buy and sell signals.",
    "keywords": [
      "MACD",
      "Moving Average Convergence Divergence",
      "Exponential Moving Averages",
      "Trend changes",
      "Buy signal",
      "Sell signal",
      "Overbought conditions",
      "Oversold conditions"
    ]
  },
  "stocks.ta.obv": {
    "title": "obv",
    "description": "Learn about On Balance Volume (OBV), a cumulative total of the up and\n  down volume. Understand how to interpret OBV and its applications in the market\n  trend analysis. No parameters required for this command.",
    "keywords": [
      "On Balance Volume",
      "up and down volume",
      "market trend analysis",
      "OBV",
      "price moves",
      "non-confirmed move",
      "strong trend",
      "market is not trending"
    ]
  },
  "stocks.ta.recom": {
    "title": "recom",
    "description": "This documentation page outlines the use of a Python command-line tool\n  that prints Tradingview recommendations for various stock exchanges based on selected\n  technical indicators. It also covers the usage, parameters, and provides examples\n  of applicable scripts with their outputs.",
    "keywords": [
      "Tradingview recommendation",
      "Technical indicators",
      "Script",
      "Stock exchange",
      "Python command-line tool",
      "Forex",
      "Crypto",
      "Screener",
      "Stocks"
    ]
  },
  "stocks.ta.rsi": {
    "title": "rsi",
    "description": "This page provides comprehensive information about the Relative Strength\n  Index (RSI), a tool used to calculate the ratio of recent upward price movements.\n  It details how to interpret RSI as an overbought or oversold indicator, highlights\n  how to use it, and breaks down various parameters associated with it.",
    "keywords": [
      "Relative Strength Index",
      "rsi",
      "overbought/oversold indicator",
      "price movements",
      "price reversal",
      "rsi parameters",
      "n_length",
      "n_scalar",
      "n_drift"
    ]
  },
  "stocks.ta.sma": {
    "title": "sma",
    "description": "The page explains the simple moving average (SMA) command, used for data\n  smoothing and trend identification. It includes SMA's usage, parameters, and a graphical\n  representation, making it easier to understand how to use SMA to filter data.",
    "keywords": [
      "Moving Average",
      "trend identification",
      "data smoothing",
      "Simple Moving Average",
      "SMA",
      "data filtering",
      "sma command",
      "n_length",
      "n_offset"
    ]
  },
  "stocks.ta.stoch": {
    "title": "stoch",
    "description": "This page presents an understanding of the Stochastic Oscillator, a technical\n  analysis indicator, and its parameters. It illustrates the buy and sell signals,\n  moving averages, overbought and oversold conditions, and usage in Python. Particularly,\n  it explains the commands n_fastkperiod, n_slowdperiod, and n_slowkperiod.",
    "keywords": [
      "Stochastic Oscillator",
      "overbought condition",
      "oversold condition",
      "Fast %D",
      "Slow %D",
      "buy signal",
      "sell signal",
      "Raw %K",
      "crossover signals",
      "stoch",
      "moving average",
      "trading range",
      "n_fastkperiod",
      "n_slowdperiod",
      "n_slowkperiod"
    ]
  },
  "stocks.ta.summary": {
    "title": "summary",
    "description": "Detailed guide on using the technical summary report provided by FinBrain's\n  API, a leading provider of deep learning algorithms for financial analysis and prediction.\n  Learn how to track market trends and indicators such as RSI, MACD, SMA, and Bollinger\n  Bands.",
    "keywords": [
      "technical summary",
      "FinBrain API",
      "trading prediction",
      "deep learning algorithms",
      "stock trading",
      "stock trends",
      "RSI",
      "MACD",
      "SMA",
      "Bollinger Bands"
    ]
  },
  "stocks.ta.tv": {
    "title": "tv",
    "description": "The webpage describes the use of 'tv' command to display TradingView\n  for technical analysis. It provides information on how to use the command in python,\n  and elaborates that this command doesn't require any parameters.",
    "keywords": [
      "TradingView",
      "technical analysis",
      "tv command",
      "no parameters"
    ]
  },
  "stocks.ta.view": {
    "title": "view",
    "description": "Learn how to view historical stocks price with trendlines using our platform.\n  No parameters, quick visualization and up-to-date information from Finviz.",
    "keywords": [
      "view historical price",
      "price trendlines",
      "stock price visualization",
      "Finviz"
    ]
  },
  "stocks.ta.vwap": {
    "title": "vwap",
    "description": "This page provides documentation on Volume Weighted Average Price (vwap)\n  which measures the average typical price by volume. It shows usage, parameters,\n  and examples specific to the analysis of stock data, with an example featuring the\n  GOOGL stock.",
    "keywords": [
      "vwap",
      "Volume Weighted Average Price",
      "intraday charts",
      "general direction",
      "parameters",
      "examples",
      "stocks",
      "analysis",
      "offset",
      "GOOGL stock"
    ]
  },
  "stocks.ta.wma": {
    "title": "wma",
    "description": "Learn how to use the Weighted Moving Average (WMA) in data analysis with\n  this comprehensive guide. The WMA accentuates recent prices over past figures, thus\n  providing close follow-up of market trends.",
    "keywords": [
      "Weighted Moving Average",
      "WMA",
      "data",
      "data analysis",
      "market trends",
      "price tracking"
    ]
  },
  "stocks.ta.zlma": {
    "title": "zlma",
    "description": "The zlma page provides an in-depth understanding of the zero lag exponential\n  moving average (ZLEMA), with insight into its usage, parameters such as 'n_length'\n  and 'n_offset', and a usage example. This indicator was created by John Ehlers and\n  Ric Way and the page neatly explains the concept with visual aids.",
    "keywords": [
      "zlma",
      "zero lag exponential moving average",
      "John Ehlers",
      "Ric Way",
      "exponential moving average",
      "EMA",
      "de-lagged data",
      "moving average",
      "n_length",
      "n_offset"
    ]
  },
  "stocks.th.all": {
    "title": "all",
    "description": "This page provides insights on the 'all' exchange command, including\n  its usage and parameters. This command displays all the exchanges available.",
    "keywords": [
      "all exchange command",
      "show all exchanges",
      "exchanges usage",
      "command parameters",
      "exchanges command documentation"
    ]
  },
  "stocks.th.closed": {
    "title": "closed",
    "description": "Closed exchanges documentation page provides instructions on how to use\n  the 'exchange' command that has no parameters to show currently closed exchanges.",
    "keywords": [
      "closed exchanges",
      "exchange command",
      "usage",
      "no parameters"
    ]
  },
  "stocks.th.exchange": {
    "title": "exchange",
    "description": "Documentation page for exchanging market information, including usage,\n  parameters and selectable choices.",
    "keywords": [
      "Exchange",
      "Market Information",
      "Parameters",
      "Docusaurus page",
      "Documentation"
    ]
  },
  "stocks.th.open": {
    "title": "open",
    "description": "Learn about the command to show currently open exchanges with our detailed\n  documentation. Understand its usage with no parameters.",
    "keywords": [
      "Command",
      "Open exchanges",
      "Usage",
      "Parameters",
      "Documentation"
    ]
  },
  "stocks.th.symbol": {
    "title": "symbol",
    "description": "The page offers insight into using the 'symbol' parameter in trading\n  commands. It serves as a guide to set the symbol for your trades using Python, detailing\n  its usage and parameters.",
    "keywords": [
      "symbol trading",
      "trade symbols",
      "trading parameters",
      "symbol selection",
      "stock symbols",
      "python trading commands",
      "symbol choice"
    ]
  }
}